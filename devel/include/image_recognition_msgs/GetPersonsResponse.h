// Generated by gencpp from file image_recognition_msgs/GetPersonsResponse.msg
// DO NOT EDIT!


#ifndef IMAGE_RECOGNITION_MSGS_MESSAGE_GETPERSONSRESPONSE_H
#define IMAGE_RECOGNITION_MSGS_MESSAGE_GETPERSONSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <image_recognition_msgs/PersonDetection.h>

namespace image_recognition_msgs
{
template <class ContainerAllocator>
struct GetPersonsResponse_
{
  typedef GetPersonsResponse_<ContainerAllocator> Type;

  GetPersonsResponse_()
    : detections()  {
    }
  GetPersonsResponse_(const ContainerAllocator& _alloc)
    : detections(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::image_recognition_msgs::PersonDetection_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::image_recognition_msgs::PersonDetection_<ContainerAllocator> >::other >  _detections_type;
  _detections_type detections;




  typedef boost::shared_ptr< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPersonsResponse_

typedef ::image_recognition_msgs::GetPersonsResponse_<std::allocator<void> > GetPersonsResponse;

typedef boost::shared_ptr< ::image_recognition_msgs::GetPersonsResponse > GetPersonsResponsePtr;
typedef boost::shared_ptr< ::image_recognition_msgs::GetPersonsResponse const> GetPersonsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace image_recognition_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'image_recognition_msgs': ['/home/robot/inmoov_ros/src/image_recognition/image_recognition_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "32e89db0c51ed623846b51562d545973";
  }

  static const char* value(const ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x32e89db0c51ed623ULL;
  static const uint64_t static_value2 = 0x846b51562d545973ULL;
};

template<class ContainerAllocator>
struct DataType< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "image_recognition_msgs/GetPersonsResponse";
  }

  static const char* value(const ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "PersonDetection[] detections\n\
\n\
================================================================================\n\
MSG: image_recognition_msgs/PersonDetection\n\
BodypartDetection nose\n\
BodypartDetection neck\n\
BodypartDetection right_shoulder\n\
BodypartDetection right_elbow\n\
BodypartDetection right_wrist\n\
BodypartDetection left_shoulder\n\
BodypartDetection left_elbow\n\
BodypartDetection left_wrist\n\
BodypartDetection right_hip\n\
BodypartDetection right_knee\n\
BodypartDetection right_ankle\n\
BodypartDetection left_hip\n\
BodypartDetection left_knee\n\
BodypartDetection left_ankle\n\
BodypartDetection right_eye\n\
BodypartDetection left_eye\n\
BodypartDetection right_ear\n\
BodypartDetection left_ear\n\
BodypartDetection chest\n\
================================================================================\n\
MSG: image_recognition_msgs/BodypartDetection\n\
uint32 x\n\
uint32 y\n\
float32 confidence\n\
";
  }

  static const char* value(const ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.detections);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPersonsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::image_recognition_msgs::GetPersonsResponse_<ContainerAllocator>& v)
  {
    s << indent << "detections[]" << std::endl;
    for (size_t i = 0; i < v.detections.size(); ++i)
    {
      s << indent << "  detections[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::image_recognition_msgs::PersonDetection_<ContainerAllocator> >::stream(s, indent + "    ", v.detections[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // IMAGE_RECOGNITION_MSGS_MESSAGE_GETPERSONSRESPONSE_H
