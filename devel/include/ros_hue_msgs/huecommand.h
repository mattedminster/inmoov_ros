// Generated by gencpp from file ros_hue_msgs/huecommand.msg
// DO NOT EDIT!


#ifndef ROS_HUE_MSGS_MESSAGE_HUECOMMAND_H
#define ROS_HUE_MSGS_MESSAGE_HUECOMMAND_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_hue_msgs
{
template <class ContainerAllocator>
struct huecommand_
{
  typedef huecommand_<ContainerAllocator> Type;

  huecommand_()
    : mode()
    , modevalue()
    , on(false)
    , bri(0)
    , hue(0)
    , sat(0)  {
    }
  huecommand_(const ContainerAllocator& _alloc)
    : mode(_alloc)
    , modevalue(_alloc)
    , on(false)
    , bri(0)
    , hue(0)
    , sat(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _mode_type;
  _mode_type mode;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _modevalue_type;
  _modevalue_type modevalue;

   typedef uint8_t _on_type;
  _on_type on;

   typedef uint32_t _bri_type;
  _bri_type bri;

   typedef uint32_t _hue_type;
  _hue_type hue;

   typedef uint32_t _sat_type;
  _sat_type sat;




  typedef boost::shared_ptr< ::ros_hue_msgs::huecommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_hue_msgs::huecommand_<ContainerAllocator> const> ConstPtr;

}; // struct huecommand_

typedef ::ros_hue_msgs::huecommand_<std::allocator<void> > huecommand;

typedef boost::shared_ptr< ::ros_hue_msgs::huecommand > huecommandPtr;
typedef boost::shared_ptr< ::ros_hue_msgs::huecommand const> huecommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_hue_msgs::huecommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_hue_msgs::huecommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_hue_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'ros_hue_msgs': ['/home/robot/inmoov_ros/src/ros_hue_msgs/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_hue_msgs::huecommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_hue_msgs::huecommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_hue_msgs::huecommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_hue_msgs::huecommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_hue_msgs::huecommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_hue_msgs::huecommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_hue_msgs::huecommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9ac66e96124ba30aaff7d6cdedaa1ac6";
  }

  static const char* value(const ::ros_hue_msgs::huecommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9ac66e96124ba30aULL;
  static const uint64_t static_value2 = 0xaff7d6cdedaa1ac6ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_hue_msgs::huecommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_hue_msgs/huecommand";
  }

  static const char* value(const ::ros_hue_msgs::huecommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_hue_msgs::huecommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string   mode                  \n\
string   modevalue\n\
bool on\n\
uint32 bri\n\
uint32 hue\n\
uint32 sat             \n\
	\n\
\n\
";
  }

  static const char* value(const ::ros_hue_msgs::huecommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_hue_msgs::huecommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.mode);
      stream.next(m.modevalue);
      stream.next(m.on);
      stream.next(m.bri);
      stream.next(m.hue);
      stream.next(m.sat);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct huecommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_hue_msgs::huecommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_hue_msgs::huecommand_<ContainerAllocator>& v)
  {
    s << indent << "mode: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.mode);
    s << indent << "modevalue: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.modevalue);
    s << indent << "on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.on);
    s << indent << "bri: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.bri);
    s << indent << "hue: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.hue);
    s << indent << "sat: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sat);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_HUE_MSGS_MESSAGE_HUECOMMAND_H
