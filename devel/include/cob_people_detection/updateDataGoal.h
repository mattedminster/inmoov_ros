// Generated by gencpp from file cob_people_detection/updateDataGoal.msg
// DO NOT EDIT!


#ifndef COB_PEOPLE_DETECTION_MESSAGE_UPDATEDATAGOAL_H
#define COB_PEOPLE_DETECTION_MESSAGE_UPDATEDATAGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace cob_people_detection
{
template <class ContainerAllocator>
struct updateDataGoal_
{
  typedef updateDataGoal_<ContainerAllocator> Type;

  updateDataGoal_()
    : update_mode(0)
    , update_index(0)
    , old_label()
    , new_label()  {
    }
  updateDataGoal_(const ContainerAllocator& _alloc)
    : update_mode(0)
    , update_index(0)
    , old_label(_alloc)
    , new_label(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _update_mode_type;
  _update_mode_type update_mode;

   typedef int32_t _update_index_type;
  _update_index_type update_index;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _old_label_type;
  _old_label_type old_label;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _new_label_type;
  _new_label_type new_label;




  typedef boost::shared_ptr< ::cob_people_detection::updateDataGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cob_people_detection::updateDataGoal_<ContainerAllocator> const> ConstPtr;

}; // struct updateDataGoal_

typedef ::cob_people_detection::updateDataGoal_<std::allocator<void> > updateDataGoal;

typedef boost::shared_ptr< ::cob_people_detection::updateDataGoal > updateDataGoalPtr;
typedef boost::shared_ptr< ::cob_people_detection::updateDataGoal const> updateDataGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::cob_people_detection::updateDataGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace cob_people_detection

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'stereo_msgs': ['/opt/ros/kinetic/share/stereo_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'cob_perception_msgs': ['/home/robot/inmoov_ros/src/cob_perception_common/cob_perception_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'cob_people_detection': ['/home/robot/inmoov_ros/devel/share/cob_people_detection/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::cob_people_detection::updateDataGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::cob_people_detection::updateDataGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::cob_people_detection::updateDataGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d34a17444815de8f9d0fe51faa3bd9da";
  }

  static const char* value(const ::cob_people_detection::updateDataGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd34a17444815de8fULL;
  static const uint64_t static_value2 = 0x9d0fe51faa3bd9daULL;
};

template<class ContainerAllocator>
struct DataType< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cob_people_detection/updateDataGoal";
  }

  static const char* value(const ::cob_people_detection::updateDataGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Updates data in the training database\n\
#\n\
# goal message\n\
int32 update_mode			# update the label with new_label either for 1=one image given the update_index, 2=all entries labeled with old_label\n\
int32 update_index			# the database entry with this index number shall be updated with a new label\n\
string old_label			# all database entries carrying this label are to be updated with new_label\n\
string new_label			# the new label that is supposed to replace the old one\n\
";
  }

  static const char* value(const ::cob_people_detection::updateDataGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.update_mode);
      stream.next(m.update_index);
      stream.next(m.old_label);
      stream.next(m.new_label);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct updateDataGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cob_people_detection::updateDataGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::cob_people_detection::updateDataGoal_<ContainerAllocator>& v)
  {
    s << indent << "update_mode: ";
    Printer<int32_t>::stream(s, indent + "  ", v.update_mode);
    s << indent << "update_index: ";
    Printer<int32_t>::stream(s, indent + "  ", v.update_index);
    s << indent << "old_label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.old_label);
    s << indent << "new_label: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.new_label);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COB_PEOPLE_DETECTION_MESSAGE_UPDATEDATAGOAL_H
