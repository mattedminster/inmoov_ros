// Generated by gencpp from file haf_grasping/CalcGraspPointsServerAction.msg
// DO NOT EDIT!


#ifndef HAF_GRASPING_MESSAGE_CALCGRASPPOINTSSERVERACTION_H
#define HAF_GRASPING_MESSAGE_CALCGRASPPOINTSSERVERACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <haf_grasping/CalcGraspPointsServerActionGoal.h>
#include <haf_grasping/CalcGraspPointsServerActionResult.h>
#include <haf_grasping/CalcGraspPointsServerActionFeedback.h>

namespace haf_grasping
{
template <class ContainerAllocator>
struct CalcGraspPointsServerAction_
{
  typedef CalcGraspPointsServerAction_<ContainerAllocator> Type;

  CalcGraspPointsServerAction_()
    : action_goal()
    , action_result()
    , action_feedback()  {
    }
  CalcGraspPointsServerAction_(const ContainerAllocator& _alloc)
    : action_goal(_alloc)
    , action_result(_alloc)
    , action_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::haf_grasping::CalcGraspPointsServerActionGoal_<ContainerAllocator>  _action_goal_type;
  _action_goal_type action_goal;

   typedef  ::haf_grasping::CalcGraspPointsServerActionResult_<ContainerAllocator>  _action_result_type;
  _action_result_type action_result;

   typedef  ::haf_grasping::CalcGraspPointsServerActionFeedback_<ContainerAllocator>  _action_feedback_type;
  _action_feedback_type action_feedback;




  typedef boost::shared_ptr< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> const> ConstPtr;

}; // struct CalcGraspPointsServerAction_

typedef ::haf_grasping::CalcGraspPointsServerAction_<std::allocator<void> > CalcGraspPointsServerAction;

typedef boost::shared_ptr< ::haf_grasping::CalcGraspPointsServerAction > CalcGraspPointsServerActionPtr;
typedef boost::shared_ptr< ::haf_grasping::CalcGraspPointsServerAction const> CalcGraspPointsServerActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace haf_grasping

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/kinetic/share/actionlib_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/kinetic/share/sensor_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg'], 'visualization_msgs': ['/opt/ros/kinetic/share/visualization_msgs/cmake/../msg'], 'actionlib': ['/opt/ros/kinetic/share/actionlib/cmake/../msg'], 'haf_grasping': ['/home/robot/inmoov_ros/src/haf_grasping/msg', '/home/robot/inmoov_ros/devel/share/haf_grasping/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3d7edd487ff4cf654bc0c58ebbbbb97e";
  }

  static const char* value(const ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3d7edd487ff4cf65ULL;
  static const uint64_t static_value2 = 0x4bc0c58ebbbbb97eULL;
};

template<class ContainerAllocator>
struct DataType< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "haf_grasping/CalcGraspPointsServerAction";
  }

  static const char* value(const ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
CalcGraspPointsServerActionGoal action_goal\n\
CalcGraspPointsServerActionResult action_result\n\
CalcGraspPointsServerActionFeedback action_feedback\n\
\n\
================================================================================\n\
MSG: haf_grasping/CalcGraspPointsServerActionGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
CalcGraspPointsServerGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: haf_grasping/CalcGraspPointsServerGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the input for grasp calculation: a point cloud\n\
haf_grasping/GraspInput graspinput\n\
\n\
================================================================================\n\
MSG: haf_grasping/GraspInput\n\
\n\
#Header header                        	# header for time/frame information\n\
sensor_msgs/PointCloud2 input_pc     	# defines the point cloud on which grasps should be calculated (objects)\n\
string goal_frame_id				 	# the frame_id to which the point cloud should be transformed before grasps are calculated\n\
geometry_msgs/Point grasp_area_center 	# center of the region where grasps are searched\n\
float32 grasp_area_length_x				# defines the length of the rectangle (in x direction (in m)) where grasps are searched (with center grasp_area_center)\n\
float32 grasp_area_length_y				# defines the length of the rectangle (in y direction (in m)) where grasps are searched (with center grasp_area_center)\n\
\n\
\n\
duration max_calculation_time			# maximal calculation time before grasp result is returned\n\
bool show_only_best_grasp				# If true, only the best grasp is shown in visualization\n\
int32 threshold_grasp_evaluation		# defines the threshold for return_first_grasp_over_th if it is set to true (otherwise it is ignored)\n\
\n\
geometry_msgs/Vector3 approach_vector	# defines the direction from where a grasp should be executed \n\
int32 gripper_opening_width				# defines the factor (actually 1/factor) that is used for pre-grasp opening gripper width \n\
\n\
#geometry_msgs/Vector3 scale_gripper	# Scale of the gripper in x and y direction if it deviates from a gripper of the size of a huMAN hand\n\
\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointCloud2\n\
# This message holds a collection of N-dimensional points, which may\n\
# contain additional information such as normals, intensity, etc. The\n\
# point data is stored as a binary blob, its layout described by the\n\
# contents of the \"fields\" array.\n\
\n\
# The point cloud data may be organized 2d (image-like) or 1d\n\
# (unordered). Point clouds organized as 2d images may be produced by\n\
# camera depth sensors such as stereo or time-of-flight.\n\
\n\
# Time of sensor data acquisition, and the coordinate frame ID (for 3d\n\
# points).\n\
Header header\n\
\n\
# 2D structure of the point cloud. If the cloud is unordered, height is\n\
# 1 and width is the length of the point cloud.\n\
uint32 height\n\
uint32 width\n\
\n\
# Describes the channels and their layout in the binary data blob.\n\
PointField[] fields\n\
\n\
bool    is_bigendian # Is this data bigendian?\n\
uint32  point_step   # Length of a point in bytes\n\
uint32  row_step     # Length of a row in bytes\n\
uint8[] data         # Actual point data, size is (row_step*height)\n\
\n\
bool is_dense        # True if there are no invalid points\n\
\n\
================================================================================\n\
MSG: sensor_msgs/PointField\n\
# This message holds the description of one point entry in the\n\
# PointCloud2 message format.\n\
uint8 INT8    = 1\n\
uint8 UINT8   = 2\n\
uint8 INT16   = 3\n\
uint8 UINT16  = 4\n\
uint8 INT32   = 5\n\
uint8 UINT32  = 6\n\
uint8 FLOAT32 = 7\n\
uint8 FLOAT64 = 8\n\
\n\
string name      # Name of field\n\
uint32 offset    # Offset from start of point struct\n\
uint8  datatype  # Datatype enumeration, see above\n\
uint32 count     # How many elements in the field\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: haf_grasping/CalcGraspPointsServerActionResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
CalcGraspPointsServerResult result\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalStatus\n\
GoalID goal_id\n\
uint8 status\n\
uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n\
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n\
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n\
                            #   and has since completed its execution (Terminal State)\n\
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n\
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n\
                            #    to some failure (Terminal State)\n\
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n\
                            #    because the goal was unattainable or invalid (Terminal State)\n\
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n\
                            #    and has not yet completed execution\n\
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n\
                            #    but the action server has not yet confirmed that the goal is canceled\n\
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n\
                            #    and was successfully cancelled (Terminal State)\n\
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n\
                            #    sent over the wire by an action server\n\
\n\
#Allow for the user to associate a string with GoalStatus for debugging\n\
string text\n\
\n\
\n\
================================================================================\n\
MSG: haf_grasping/CalcGraspPointsServerResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define the result, if succeeded: defines grasp for gripper\n\
haf_grasping/GraspOutput graspOutput\n\
\n\
================================================================================\n\
MSG: haf_grasping/GraspOutput\n\
Header header\n\
int32 eval\n\
geometry_msgs/Point graspPoint1\n\
geometry_msgs/Point graspPoint2\n\
geometry_msgs/Point averagedGraspPoint\n\
geometry_msgs/Vector3 approachVector\n\
float32 roll # radians\n\
\n\
================================================================================\n\
MSG: haf_grasping/CalcGraspPointsServerActionFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
CalcGraspPointsServerFeedback feedback\n\
\n\
================================================================================\n\
MSG: haf_grasping/CalcGraspPointsServerFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Define a feedback message\n\
std_msgs/String feedback\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/String\n\
string data\n\
";
  }

  static const char* value(const ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_goal);
      stream.next(m.action_result);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CalcGraspPointsServerAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::haf_grasping::CalcGraspPointsServerAction_<ContainerAllocator>& v)
  {
    s << indent << "action_goal: ";
    s << std::endl;
    Printer< ::haf_grasping::CalcGraspPointsServerActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
    s << std::endl;
    Printer< ::haf_grasping::CalcGraspPointsServerActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
    s << std::endl;
    Printer< ::haf_grasping::CalcGraspPointsServerActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HAF_GRASPING_MESSAGE_CALCGRASPPOINTSSERVERACTION_H
