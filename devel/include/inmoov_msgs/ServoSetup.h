// Generated by gencpp from file inmoov_msgs/ServoSetup.msg
// DO NOT EDIT!


#ifndef INMOOV_MSGS_MESSAGE_SERVOSETUP_H
#define INMOOV_MSGS_MESSAGE_SERVOSETUP_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace inmoov_msgs
{
template <class ContainerAllocator>
struct ServoSetup_
{
  typedef ServoSetup_<ContainerAllocator> Type;

  ServoSetup_()
    : servoPin(0)
    , sensorPin(0)
    , minAngle(0.0)
    , maxAngle(0.0)
    , rest(0.0)
    , minPulse(0.0)
    , maxPulse(0.0)
    , minSensor(0.0)
    , maxSensor(0.0)
    , smoothing(0)
    , maxSpeed(0.0)  {
    }
  ServoSetup_(const ContainerAllocator& _alloc)
    : servoPin(0)
    , sensorPin(0)
    , minAngle(0.0)
    , maxAngle(0.0)
    , rest(0.0)
    , minPulse(0.0)
    , maxPulse(0.0)
    , minSensor(0.0)
    , maxSensor(0.0)
    , smoothing(0)
    , maxSpeed(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _servoPin_type;
  _servoPin_type servoPin;

   typedef int32_t _sensorPin_type;
  _sensorPin_type sensorPin;

   typedef float _minAngle_type;
  _minAngle_type minAngle;

   typedef float _maxAngle_type;
  _maxAngle_type maxAngle;

   typedef float _rest_type;
  _rest_type rest;

   typedef float _minPulse_type;
  _minPulse_type minPulse;

   typedef float _maxPulse_type;
  _maxPulse_type maxPulse;

   typedef float _minSensor_type;
  _minSensor_type minSensor;

   typedef float _maxSensor_type;
  _maxSensor_type maxSensor;

   typedef int32_t _smoothing_type;
  _smoothing_type smoothing;

   typedef float _maxSpeed_type;
  _maxSpeed_type maxSpeed;




  typedef boost::shared_ptr< ::inmoov_msgs::ServoSetup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inmoov_msgs::ServoSetup_<ContainerAllocator> const> ConstPtr;

}; // struct ServoSetup_

typedef ::inmoov_msgs::ServoSetup_<std::allocator<void> > ServoSetup;

typedef boost::shared_ptr< ::inmoov_msgs::ServoSetup > ServoSetupPtr;
typedef boost::shared_ptr< ::inmoov_msgs::ServoSetup const> ServoSetupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inmoov_msgs::ServoSetup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inmoov_msgs::ServoSetup_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace inmoov_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'inmoov_msgs': ['/home/robot/inmoov_ros/src/inmoov_msgs/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::inmoov_msgs::ServoSetup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inmoov_msgs::ServoSetup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inmoov_msgs::ServoSetup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inmoov_msgs::ServoSetup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inmoov_msgs::ServoSetup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inmoov_msgs::ServoSetup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inmoov_msgs::ServoSetup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9352507e0ae979f797e9e298510545cf";
  }

  static const char* value(const ::inmoov_msgs::ServoSetup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9352507e0ae979f7ULL;
  static const uint64_t static_value2 = 0x97e9e298510545cfULL;
};

template<class ContainerAllocator>
struct DataType< ::inmoov_msgs::ServoSetup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inmoov_msgs/ServoSetup";
  }

  static const char* value(const ::inmoov_msgs::ServoSetup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inmoov_msgs::ServoSetup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 servoPin 		#pin number for Servo\n\
int32 sensorPin		#pin number for Sensor\n\
float32 minAngle		#min physical angle of joint\n\
float32 maxAngle		#max physical angle of joint\n\
float32 rest			#rest angle\n\
float32 minPulse		#min Pulse for the servo - physical robot should be at min angle when this is set\n\
float32 maxPulse		#max Pulse for the servo - physical robot should be at max angle when this is set\n\
float32 minSensor		#min reading for sensor\n\
float32 maxSensor		#max reading for sensor\n\
int32 smoothing		#sets default smoothing pattern for joint\n\
float32 maxSpeed		#sets maxspeed\n\
\n\
\n\
\n\
\n\
";
  }

  static const char* value(const ::inmoov_msgs::ServoSetup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inmoov_msgs::ServoSetup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.servoPin);
      stream.next(m.sensorPin);
      stream.next(m.minAngle);
      stream.next(m.maxAngle);
      stream.next(m.rest);
      stream.next(m.minPulse);
      stream.next(m.maxPulse);
      stream.next(m.minSensor);
      stream.next(m.maxSensor);
      stream.next(m.smoothing);
      stream.next(m.maxSpeed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ServoSetup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inmoov_msgs::ServoSetup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inmoov_msgs::ServoSetup_<ContainerAllocator>& v)
  {
    s << indent << "servoPin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.servoPin);
    s << indent << "sensorPin: ";
    Printer<int32_t>::stream(s, indent + "  ", v.sensorPin);
    s << indent << "minAngle: ";
    Printer<float>::stream(s, indent + "  ", v.minAngle);
    s << indent << "maxAngle: ";
    Printer<float>::stream(s, indent + "  ", v.maxAngle);
    s << indent << "rest: ";
    Printer<float>::stream(s, indent + "  ", v.rest);
    s << indent << "minPulse: ";
    Printer<float>::stream(s, indent + "  ", v.minPulse);
    s << indent << "maxPulse: ";
    Printer<float>::stream(s, indent + "  ", v.maxPulse);
    s << indent << "minSensor: ";
    Printer<float>::stream(s, indent + "  ", v.minSensor);
    s << indent << "maxSensor: ";
    Printer<float>::stream(s, indent + "  ", v.maxSensor);
    s << indent << "smoothing: ";
    Printer<int32_t>::stream(s, indent + "  ", v.smoothing);
    s << indent << "maxSpeed: ";
    Printer<float>::stream(s, indent + "  ", v.maxSpeed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INMOOV_MSGS_MESSAGE_SERVOSETUP_H
