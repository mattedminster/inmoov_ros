// Generated by gencpp from file inmoov_msgs/MotorStatus.msg
// DO NOT EDIT!


#ifndef INMOOV_MSGS_MESSAGE_MOTORSTATUS_H
#define INMOOV_MSGS_MESSAGE_MOTORSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace inmoov_msgs
{
template <class ContainerAllocator>
struct MotorStatus_
{
  typedef MotorStatus_<ContainerAllocator> Type;

  MotorStatus_()
    : id(0)
    , goal(0.0)
    , position(0.0)
    , presentspeed(0.0)
    , moving(false)
    , posraw(0)
    , enabled(false)
    , power(false)  {
    }
  MotorStatus_(const ContainerAllocator& _alloc)
    : id(0)
    , goal(0.0)
    , position(0.0)
    , presentspeed(0.0)
    , moving(false)
    , posraw(0)
    , enabled(false)
    , power(false)  {
  (void)_alloc;
    }



   typedef uint8_t _id_type;
  _id_type id;

   typedef float _goal_type;
  _goal_type goal;

   typedef float _position_type;
  _position_type position;

   typedef float _presentspeed_type;
  _presentspeed_type presentspeed;

   typedef uint8_t _moving_type;
  _moving_type moving;

   typedef uint16_t _posraw_type;
  _posraw_type posraw;

   typedef uint8_t _enabled_type;
  _enabled_type enabled;

   typedef uint8_t _power_type;
  _power_type power;




  typedef boost::shared_ptr< ::inmoov_msgs::MotorStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::inmoov_msgs::MotorStatus_<ContainerAllocator> const> ConstPtr;

}; // struct MotorStatus_

typedef ::inmoov_msgs::MotorStatus_<std::allocator<void> > MotorStatus;

typedef boost::shared_ptr< ::inmoov_msgs::MotorStatus > MotorStatusPtr;
typedef boost::shared_ptr< ::inmoov_msgs::MotorStatus const> MotorStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::inmoov_msgs::MotorStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::inmoov_msgs::MotorStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace inmoov_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'inmoov_msgs': ['/home/robot/inmoov_ros/src/inmoov_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::inmoov_msgs::MotorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::inmoov_msgs::MotorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inmoov_msgs::MotorStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::inmoov_msgs::MotorStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inmoov_msgs::MotorStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::inmoov_msgs::MotorStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::inmoov_msgs::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d4a9e09f5fbe6a9414f80ffc2b3c7dc9";
  }

  static const char* value(const ::inmoov_msgs::MotorStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd4a9e09f5fbe6a94ULL;
  static const uint64_t static_value2 = 0x14f80ffc2b3c7dc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::inmoov_msgs::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "inmoov_msgs/MotorStatus";
  }

  static const char* value(const ::inmoov_msgs::MotorStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::inmoov_msgs::MotorStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8    id             # motor id 0-11\n\
float32  goal		# command position\n\
float32  position	# current sensed position\n\
float32  presentspeed	# calculated rotational speed\n\
bool     moving		# is servo moving?\n\
uint16   posraw		# raw position sensor value\n\
bool     enabled	# is servo enabled?\n\
bool     power		# does servo have power?\n\
\n\
\n\
";
  }

  static const char* value(const ::inmoov_msgs::MotorStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::inmoov_msgs::MotorStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.goal);
      stream.next(m.position);
      stream.next(m.presentspeed);
      stream.next(m.moving);
      stream.next(m.posraw);
      stream.next(m.enabled);
      stream.next(m.power);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct MotorStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::inmoov_msgs::MotorStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::inmoov_msgs::MotorStatus_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "goal: ";
    Printer<float>::stream(s, indent + "  ", v.goal);
    s << indent << "position: ";
    Printer<float>::stream(s, indent + "  ", v.position);
    s << indent << "presentspeed: ";
    Printer<float>::stream(s, indent + "  ", v.presentspeed);
    s << indent << "moving: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.moving);
    s << indent << "posraw: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.posraw);
    s << indent << "enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enabled);
    s << indent << "power: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.power);
  }
};

} // namespace message_operations
} // namespace ros

#endif // INMOOV_MSGS_MESSAGE_MOTORSTATUS_H
