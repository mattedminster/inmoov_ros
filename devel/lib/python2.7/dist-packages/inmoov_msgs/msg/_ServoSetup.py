# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from inmoov_msgs/ServoSetup.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class ServoSetup(genpy.Message):
  _md5sum = "9352507e0ae979f797e9e298510545cf"
  _type = "inmoov_msgs/ServoSetup"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int32 servoPin 		#pin number for Servo
int32 sensorPin		#pin number for Sensor
float32 minAngle		#min physical angle of joint
float32 maxAngle		#max physical angle of joint
float32 rest			#rest angle
float32 minPulse		#min Pulse for the servo - physical robot should be at min angle when this is set
float32 maxPulse		#max Pulse for the servo - physical robot should be at max angle when this is set
float32 minSensor		#min reading for sensor
float32 maxSensor		#max reading for sensor
int32 smoothing		#sets default smoothing pattern for joint
float32 maxSpeed		#sets maxspeed




"""
  __slots__ = ['servoPin','sensorPin','minAngle','maxAngle','rest','minPulse','maxPulse','minSensor','maxSensor','smoothing','maxSpeed']
  _slot_types = ['int32','int32','float32','float32','float32','float32','float32','float32','float32','int32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       servoPin,sensorPin,minAngle,maxAngle,rest,minPulse,maxPulse,minSensor,maxSensor,smoothing,maxSpeed

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ServoSetup, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.servoPin is None:
        self.servoPin = 0
      if self.sensorPin is None:
        self.sensorPin = 0
      if self.minAngle is None:
        self.minAngle = 0.
      if self.maxAngle is None:
        self.maxAngle = 0.
      if self.rest is None:
        self.rest = 0.
      if self.minPulse is None:
        self.minPulse = 0.
      if self.maxPulse is None:
        self.maxPulse = 0.
      if self.minSensor is None:
        self.minSensor = 0.
      if self.maxSensor is None:
        self.maxSensor = 0.
      if self.smoothing is None:
        self.smoothing = 0
      if self.maxSpeed is None:
        self.maxSpeed = 0.
    else:
      self.servoPin = 0
      self.sensorPin = 0
      self.minAngle = 0.
      self.maxAngle = 0.
      self.rest = 0.
      self.minPulse = 0.
      self.maxPulse = 0.
      self.minSensor = 0.
      self.maxSensor = 0.
      self.smoothing = 0
      self.maxSpeed = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2i7fif().pack(_x.servoPin, _x.sensorPin, _x.minAngle, _x.maxAngle, _x.rest, _x.minPulse, _x.maxPulse, _x.minSensor, _x.maxSensor, _x.smoothing, _x.maxSpeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.servoPin, _x.sensorPin, _x.minAngle, _x.maxAngle, _x.rest, _x.minPulse, _x.maxPulse, _x.minSensor, _x.maxSensor, _x.smoothing, _x.maxSpeed,) = _get_struct_2i7fif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2i7fif().pack(_x.servoPin, _x.sensorPin, _x.minAngle, _x.maxAngle, _x.rest, _x.minPulse, _x.maxPulse, _x.minSensor, _x.maxSensor, _x.smoothing, _x.maxSpeed))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 44
      (_x.servoPin, _x.sensorPin, _x.minAngle, _x.maxAngle, _x.rest, _x.minPulse, _x.maxPulse, _x.minSensor, _x.maxSensor, _x.smoothing, _x.maxSpeed,) = _get_struct_2i7fif().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2i7fif = None
def _get_struct_2i7fif():
    global _struct_2i7fif
    if _struct_2i7fif is None:
        _struct_2i7fif = struct.Struct("<2i7fif")
    return _struct_2i7fif
