# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from inmoov_msgs/MotorStatus.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MotorStatus(genpy.Message):
  _md5sum = "d4a9e09f5fbe6a9414f80ffc2b3c7dc9"
  _type = "inmoov_msgs/MotorStatus"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8    id             # motor id 0-11
float32  goal		# command position
float32  position	# current sensed position
float32  presentspeed	# calculated rotational speed
bool     moving		# is servo moving?
uint16   posraw		# raw position sensor value
bool     enabled	# is servo enabled?
bool     power		# does servo have power?


"""
  __slots__ = ['id','goal','position','presentspeed','moving','posraw','enabled','power']
  _slot_types = ['uint8','float32','float32','float32','bool','uint16','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,goal,position,presentspeed,moving,posraw,enabled,power

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MotorStatus, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.goal is None:
        self.goal = 0.
      if self.position is None:
        self.position = 0.
      if self.presentspeed is None:
        self.presentspeed = 0.
      if self.moving is None:
        self.moving = False
      if self.posraw is None:
        self.posraw = 0
      if self.enabled is None:
        self.enabled = False
      if self.power is None:
        self.power = False
    else:
      self.id = 0
      self.goal = 0.
      self.position = 0.
      self.presentspeed = 0.
      self.moving = False
      self.posraw = 0
      self.enabled = False
      self.power = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B3fBH2B().pack(_x.id, _x.goal, _x.position, _x.presentspeed, _x.moving, _x.posraw, _x.enabled, _x.power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.id, _x.goal, _x.position, _x.presentspeed, _x.moving, _x.posraw, _x.enabled, _x.power,) = _get_struct_B3fBH2B().unpack(str[start:end])
      self.moving = bool(self.moving)
      self.enabled = bool(self.enabled)
      self.power = bool(self.power)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B3fBH2B().pack(_x.id, _x.goal, _x.position, _x.presentspeed, _x.moving, _x.posraw, _x.enabled, _x.power))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 18
      (_x.id, _x.goal, _x.position, _x.presentspeed, _x.moving, _x.posraw, _x.enabled, _x.power,) = _get_struct_B3fBH2B().unpack(str[start:end])
      self.moving = bool(self.moving)
      self.enabled = bool(self.enabled)
      self.power = bool(self.power)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B3fBH2B = None
def _get_struct_B3fBH2B():
    global _struct_B3fBH2B
    if _struct_B3fBH2B is None:
        _struct_B3fBH2B = struct.Struct("<B3fBH2B")
    return _struct_B3fBH2B
