# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from haf_grasping/CalcGraspPointsServerAction.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import haf_grasping.msg
import actionlib_msgs.msg
import geometry_msgs.msg
import sensor_msgs.msg
import genpy
import std_msgs.msg

class CalcGraspPointsServerAction(genpy.Message):
  _md5sum = "3d7edd487ff4cf654bc0c58ebbbbb97e"
  _type = "haf_grasping/CalcGraspPointsServerAction"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

CalcGraspPointsServerActionGoal action_goal
CalcGraspPointsServerActionResult action_result
CalcGraspPointsServerActionFeedback action_feedback

================================================================================
MSG: haf_grasping/CalcGraspPointsServerActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
CalcGraspPointsServerGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: haf_grasping/CalcGraspPointsServerGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the input for grasp calculation: a point cloud
haf_grasping/GraspInput graspinput

================================================================================
MSG: haf_grasping/GraspInput

#Header header                        	# header for time/frame information
sensor_msgs/PointCloud2 input_pc     	# defines the point cloud on which grasps should be calculated (objects)
string goal_frame_id				 	# the frame_id to which the point cloud should be transformed before grasps are calculated
geometry_msgs/Point grasp_area_center 	# center of the region where grasps are searched
float32 grasp_area_length_x				# defines the length of the rectangle (in x direction (in m)) where grasps are searched (with center grasp_area_center)
float32 grasp_area_length_y				# defines the length of the rectangle (in y direction (in m)) where grasps are searched (with center grasp_area_center)


duration max_calculation_time			# maximal calculation time before grasp result is returned
bool show_only_best_grasp				# If true, only the best grasp is shown in visualization
int32 threshold_grasp_evaluation		# defines the threshold for return_first_grasp_over_th if it is set to true (otherwise it is ignored)

geometry_msgs/Vector3 approach_vector	# defines the direction from where a grasp should be executed 
int32 gripper_opening_width				# defines the factor (actually 1/factor) that is used for pre-grasp opening gripper width 

#geometry_msgs/Vector3 scale_gripper	# Scale of the gripper in x and y direction if it deviates from a gripper of the size of a huMAN hand


================================================================================
MSG: sensor_msgs/PointCloud2
# This message holds a collection of N-dimensional points, which may
# contain additional information such as normals, intensity, etc. The
# point data is stored as a binary blob, its layout described by the
# contents of the "fields" array.

# The point cloud data may be organized 2d (image-like) or 1d
# (unordered). Point clouds organized as 2d images may be produced by
# camera depth sensors such as stereo or time-of-flight.

# Time of sensor data acquisition, and the coordinate frame ID (for 3d
# points).
Header header

# 2D structure of the point cloud. If the cloud is unordered, height is
# 1 and width is the length of the point cloud.
uint32 height
uint32 width

# Describes the channels and their layout in the binary data blob.
PointField[] fields

bool    is_bigendian # Is this data bigendian?
uint32  point_step   # Length of a point in bytes
uint32  row_step     # Length of a row in bytes
uint8[] data         # Actual point data, size is (row_step*height)

bool is_dense        # True if there are no invalid points

================================================================================
MSG: sensor_msgs/PointField
# This message holds the description of one point entry in the
# PointCloud2 message format.
uint8 INT8    = 1
uint8 UINT8   = 2
uint8 INT16   = 3
uint8 UINT16  = 4
uint8 INT32   = 5
uint8 UINT32  = 6
uint8 FLOAT32 = 7
uint8 FLOAT64 = 8

string name      # Name of field
uint32 offset    # Offset from start of point struct
uint8  datatype  # Datatype enumeration, see above
uint32 count     # How many elements in the field

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: haf_grasping/CalcGraspPointsServerActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
CalcGraspPointsServerResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: haf_grasping/CalcGraspPointsServerResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define the result, if succeeded: defines grasp for gripper
haf_grasping/GraspOutput graspOutput

================================================================================
MSG: haf_grasping/GraspOutput
Header header
int32 eval
geometry_msgs/Point graspPoint1
geometry_msgs/Point graspPoint2
geometry_msgs/Point averagedGraspPoint
geometry_msgs/Vector3 approachVector
float32 roll # radians

================================================================================
MSG: haf_grasping/CalcGraspPointsServerActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
CalcGraspPointsServerFeedback feedback

================================================================================
MSG: haf_grasping/CalcGraspPointsServerFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Define a feedback message
std_msgs/String feedback


================================================================================
MSG: std_msgs/String
string data
"""
  __slots__ = ['action_goal','action_result','action_feedback']
  _slot_types = ['haf_grasping/CalcGraspPointsServerActionGoal','haf_grasping/CalcGraspPointsServerActionResult','haf_grasping/CalcGraspPointsServerActionFeedback']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       action_goal,action_result,action_feedback

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(CalcGraspPointsServerAction, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.action_goal is None:
        self.action_goal = haf_grasping.msg.CalcGraspPointsServerActionGoal()
      if self.action_result is None:
        self.action_result = haf_grasping.msg.CalcGraspPointsServerActionResult()
      if self.action_feedback is None:
        self.action_feedback = haf_grasping.msg.CalcGraspPointsServerActionFeedback()
    else:
      self.action_goal = haf_grasping.msg.CalcGraspPointsServerActionGoal()
      self.action_result = haf_grasping.msg.CalcGraspPointsServerActionResult()
      self.action_feedback = haf_grasping.msg.CalcGraspPointsServerActionFeedback()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.graspinput.input_pc.header.seq, _x.action_goal.goal.graspinput.input_pc.header.stamp.secs, _x.action_goal.goal.graspinput.input_pc.header.stamp.nsecs))
      _x = self.action_goal.goal.graspinput.input_pc.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal.graspinput.input_pc.height, _x.action_goal.goal.graspinput.input_pc.width))
      length = len(self.action_goal.goal.graspinput.input_pc.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.graspinput.input_pc.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.action_goal.goal.graspinput.input_pc.is_bigendian, _x.action_goal.goal.graspinput.input_pc.point_step, _x.action_goal.goal.graspinput.input_pc.row_step))
      _x = self.action_goal.goal.graspinput.input_pc.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_goal.goal.graspinput.input_pc.is_dense))
      _x = self.action_goal.goal.graspinput.goal_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d2f2iBi3di3I().pack(_x.action_goal.goal.graspinput.grasp_area_center.x, _x.action_goal.goal.graspinput.grasp_area_center.y, _x.action_goal.goal.graspinput.grasp_area_center.z, _x.action_goal.goal.graspinput.grasp_area_length_x, _x.action_goal.goal.graspinput.grasp_area_length_y, _x.action_goal.goal.graspinput.max_calculation_time.secs, _x.action_goal.goal.graspinput.max_calculation_time.nsecs, _x.action_goal.goal.graspinput.show_only_best_grasp, _x.action_goal.goal.graspinput.threshold_grasp_evaluation, _x.action_goal.goal.graspinput.approach_vector.x, _x.action_goal.goal.graspinput.approach_vector.y, _x.action_goal.goal.graspinput.approach_vector.z, _x.action_goal.goal.graspinput.gripper_opening_width, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.graspOutput.header.seq, _x.action_result.result.graspOutput.header.stamp.secs, _x.action_result.result.graspOutput.header.stamp.nsecs))
      _x = self.action_result.result.graspOutput.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i12df3I().pack(_x.action_result.result.graspOutput.eval, _x.action_result.result.graspOutput.graspPoint1.x, _x.action_result.result.graspOutput.graspPoint1.y, _x.action_result.result.graspOutput.graspPoint1.z, _x.action_result.result.graspOutput.graspPoint2.x, _x.action_result.result.graspOutput.graspPoint2.y, _x.action_result.result.graspOutput.graspPoint2.z, _x.action_result.result.graspOutput.averagedGraspPoint.x, _x.action_result.result.graspOutput.averagedGraspPoint.y, _x.action_result.result.graspOutput.averagedGraspPoint.z, _x.action_result.result.graspOutput.approachVector.x, _x.action_result.result.graspOutput.approachVector.y, _x.action_result.result.graspOutput.approachVector.z, _x.action_result.result.graspOutput.roll, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.feedback.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.action_goal is None:
        self.action_goal = haf_grasping.msg.CalcGraspPointsServerActionGoal()
      if self.action_result is None:
        self.action_result = haf_grasping.msg.CalcGraspPointsServerActionResult()
      if self.action_feedback is None:
        self.action_feedback = haf_grasping.msg.CalcGraspPointsServerActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.graspinput.input_pc.header.seq, _x.action_goal.goal.graspinput.input_pc.header.stamp.secs, _x.action_goal.goal.graspinput.input_pc.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.graspinput.input_pc.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.graspinput.input_pc.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.graspinput.input_pc.height, _x.action_goal.goal.graspinput.input_pc.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.graspinput.input_pc.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.action_goal.goal.graspinput.input_pc.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.action_goal.goal.graspinput.input_pc.is_bigendian, _x.action_goal.goal.graspinput.input_pc.point_step, _x.action_goal.goal.graspinput.input_pc.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.action_goal.goal.graspinput.input_pc.is_bigendian = bool(self.action_goal.goal.graspinput.input_pc.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.graspinput.input_pc.data = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.graspinput.input_pc.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.graspinput.input_pc.is_dense = bool(self.action_goal.goal.graspinput.input_pc.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.graspinput.goal_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.graspinput.goal_frame_id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.action_goal.goal.graspinput.grasp_area_center.x, _x.action_goal.goal.graspinput.grasp_area_center.y, _x.action_goal.goal.graspinput.grasp_area_center.z, _x.action_goal.goal.graspinput.grasp_area_length_x, _x.action_goal.goal.graspinput.grasp_area_length_y, _x.action_goal.goal.graspinput.max_calculation_time.secs, _x.action_goal.goal.graspinput.max_calculation_time.nsecs, _x.action_goal.goal.graspinput.show_only_best_grasp, _x.action_goal.goal.graspinput.threshold_grasp_evaluation, _x.action_goal.goal.graspinput.approach_vector.x, _x.action_goal.goal.graspinput.approach_vector.y, _x.action_goal.goal.graspinput.approach_vector.z, _x.action_goal.goal.graspinput.gripper_opening_width, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3d2f2iBi3di3I().unpack(str[start:end])
      self.action_goal.goal.graspinput.show_only_best_grasp = bool(self.action_goal.goal.graspinput.show_only_best_grasp)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.graspOutput.header.seq, _x.action_result.result.graspOutput.header.stamp.secs, _x.action_result.result.graspOutput.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.graspOutput.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.graspOutput.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.action_result.result.graspOutput.eval, _x.action_result.result.graspOutput.graspPoint1.x, _x.action_result.result.graspOutput.graspPoint1.y, _x.action_result.result.graspOutput.graspPoint1.z, _x.action_result.result.graspOutput.graspPoint2.x, _x.action_result.result.graspOutput.graspPoint2.y, _x.action_result.result.graspOutput.graspPoint2.z, _x.action_result.result.graspOutput.averagedGraspPoint.x, _x.action_result.result.graspOutput.averagedGraspPoint.y, _x.action_result.result.graspOutput.averagedGraspPoint.z, _x.action_result.result.graspOutput.approachVector.x, _x.action_result.result.graspOutput.approachVector.y, _x.action_result.result.graspOutput.approachVector.z, _x.action_result.result.graspOutput.roll, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_i12df3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.feedback.data = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.feedback.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs))
      _x = self.action_goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs))
      _x = self.action_goal.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_goal.goal.graspinput.input_pc.header.seq, _x.action_goal.goal.graspinput.input_pc.header.stamp.secs, _x.action_goal.goal.graspinput.input_pc.header.stamp.nsecs))
      _x = self.action_goal.goal.graspinput.input_pc.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_goal.goal.graspinput.input_pc.height, _x.action_goal.goal.graspinput.input_pc.width))
      length = len(self.action_goal.goal.graspinput.input_pc.fields)
      buff.write(_struct_I.pack(length))
      for val1 in self.action_goal.goal.graspinput.input_pc.fields:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.pack('<I%ss'%length, length, _x))
        _x = val1
        buff.write(_get_struct_IBI().pack(_x.offset, _x.datatype, _x.count))
      _x = self
      buff.write(_get_struct_B2I().pack(_x.action_goal.goal.graspinput.input_pc.is_bigendian, _x.action_goal.goal.graspinput.input_pc.point_step, _x.action_goal.goal.graspinput.input_pc.row_step))
      _x = self.action_goal.goal.graspinput.input_pc.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_goal.goal.graspinput.input_pc.is_dense))
      _x = self.action_goal.goal.graspinput.goal_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d2f2iBi3di3I().pack(_x.action_goal.goal.graspinput.grasp_area_center.x, _x.action_goal.goal.graspinput.grasp_area_center.y, _x.action_goal.goal.graspinput.grasp_area_center.z, _x.action_goal.goal.graspinput.grasp_area_length_x, _x.action_goal.goal.graspinput.grasp_area_length_y, _x.action_goal.goal.graspinput.max_calculation_time.secs, _x.action_goal.goal.graspinput.max_calculation_time.nsecs, _x.action_goal.goal.graspinput.show_only_best_grasp, _x.action_goal.goal.graspinput.threshold_grasp_evaluation, _x.action_goal.goal.graspinput.approach_vector.x, _x.action_goal.goal.graspinput.approach_vector.y, _x.action_goal.goal.graspinput.approach_vector.z, _x.action_goal.goal.graspinput.gripper_opening_width, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs))
      _x = self.action_result.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs))
      _x = self.action_result.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_result.status.status))
      _x = self.action_result.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.action_result.result.graspOutput.header.seq, _x.action_result.result.graspOutput.header.stamp.secs, _x.action_result.result.graspOutput.header.stamp.nsecs))
      _x = self.action_result.result.graspOutput.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_i12df3I().pack(_x.action_result.result.graspOutput.eval, _x.action_result.result.graspOutput.graspPoint1.x, _x.action_result.result.graspOutput.graspPoint1.y, _x.action_result.result.graspOutput.graspPoint1.z, _x.action_result.result.graspOutput.graspPoint2.x, _x.action_result.result.graspOutput.graspPoint2.y, _x.action_result.result.graspOutput.graspPoint2.z, _x.action_result.result.graspOutput.averagedGraspPoint.x, _x.action_result.result.graspOutput.averagedGraspPoint.y, _x.action_result.result.graspOutput.averagedGraspPoint.z, _x.action_result.result.graspOutput.approachVector.x, _x.action_result.result.graspOutput.approachVector.y, _x.action_result.result.graspOutput.approachVector.z, _x.action_result.result.graspOutput.roll, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs))
      _x = self.action_feedback.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs))
      _x = self.action_feedback.status.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      buff.write(_get_struct_B().pack(self.action_feedback.status.status))
      _x = self.action_feedback.status.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.action_feedback.feedback.feedback.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.action_goal is None:
        self.action_goal = haf_grasping.msg.CalcGraspPointsServerActionGoal()
      if self.action_result is None:
        self.action_result = haf_grasping.msg.CalcGraspPointsServerActionResult()
      if self.action_feedback is None:
        self.action_feedback = haf_grasping.msg.CalcGraspPointsServerActionFeedback()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.action_goal.header.seq, _x.action_goal.header.stamp.secs, _x.action_goal.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal_id.stamp.secs, _x.action_goal.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal_id.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_goal.goal.graspinput.input_pc.header.seq, _x.action_goal.goal.graspinput.input_pc.header.stamp.secs, _x.action_goal.goal.graspinput.input_pc.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.graspinput.input_pc.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.graspinput.input_pc.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_goal.goal.graspinput.input_pc.height, _x.action_goal.goal.graspinput.input_pc.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.action_goal.goal.graspinput.input_pc.fields = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.PointField()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8')
        else:
          val1.name = str[start:end]
        _x = val1
        start = end
        end += 9
        (_x.offset, _x.datatype, _x.count,) = _get_struct_IBI().unpack(str[start:end])
        self.action_goal.goal.graspinput.input_pc.fields.append(val1)
      _x = self
      start = end
      end += 9
      (_x.action_goal.goal.graspinput.input_pc.is_bigendian, _x.action_goal.goal.graspinput.input_pc.point_step, _x.action_goal.goal.graspinput.input_pc.row_step,) = _get_struct_B2I().unpack(str[start:end])
      self.action_goal.goal.graspinput.input_pc.is_bigendian = bool(self.action_goal.goal.graspinput.input_pc.is_bigendian)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.action_goal.goal.graspinput.input_pc.data = str[start:end]
      start = end
      end += 1
      (self.action_goal.goal.graspinput.input_pc.is_dense,) = _get_struct_B().unpack(str[start:end])
      self.action_goal.goal.graspinput.input_pc.is_dense = bool(self.action_goal.goal.graspinput.input_pc.is_dense)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_goal.goal.graspinput.goal_frame_id = str[start:end].decode('utf-8')
      else:
        self.action_goal.goal.graspinput.goal_frame_id = str[start:end]
      _x = self
      start = end
      end += 85
      (_x.action_goal.goal.graspinput.grasp_area_center.x, _x.action_goal.goal.graspinput.grasp_area_center.y, _x.action_goal.goal.graspinput.grasp_area_center.z, _x.action_goal.goal.graspinput.grasp_area_length_x, _x.action_goal.goal.graspinput.grasp_area_length_y, _x.action_goal.goal.graspinput.max_calculation_time.secs, _x.action_goal.goal.graspinput.max_calculation_time.nsecs, _x.action_goal.goal.graspinput.show_only_best_grasp, _x.action_goal.goal.graspinput.threshold_grasp_evaluation, _x.action_goal.goal.graspinput.approach_vector.x, _x.action_goal.goal.graspinput.approach_vector.y, _x.action_goal.goal.graspinput.approach_vector.z, _x.action_goal.goal.graspinput.gripper_opening_width, _x.action_result.header.seq, _x.action_result.header.stamp.secs, _x.action_result.header.stamp.nsecs,) = _get_struct_3d2f2iBi3di3I().unpack(str[start:end])
      self.action_goal.goal.graspinput.show_only_best_grasp = bool(self.action_goal.goal.graspinput.show_only_best_grasp)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_result.status.goal_id.stamp.secs, _x.action_result.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_result.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_result.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.status.text = str[start:end].decode('utf-8')
      else:
        self.action_result.status.text = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.action_result.result.graspOutput.header.seq, _x.action_result.result.graspOutput.header.stamp.secs, _x.action_result.result.graspOutput.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_result.result.graspOutput.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_result.result.graspOutput.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 116
      (_x.action_result.result.graspOutput.eval, _x.action_result.result.graspOutput.graspPoint1.x, _x.action_result.result.graspOutput.graspPoint1.y, _x.action_result.result.graspOutput.graspPoint1.z, _x.action_result.result.graspOutput.graspPoint2.x, _x.action_result.result.graspOutput.graspPoint2.y, _x.action_result.result.graspOutput.graspPoint2.z, _x.action_result.result.graspOutput.averagedGraspPoint.x, _x.action_result.result.graspOutput.averagedGraspPoint.y, _x.action_result.result.graspOutput.averagedGraspPoint.z, _x.action_result.result.graspOutput.approachVector.x, _x.action_result.result.graspOutput.approachVector.y, _x.action_result.result.graspOutput.approachVector.z, _x.action_result.result.graspOutput.roll, _x.action_feedback.header.seq, _x.action_feedback.header.stamp.secs, _x.action_feedback.header.stamp.nsecs,) = _get_struct_i12df3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.action_feedback.status.goal_id.stamp.secs, _x.action_feedback.status.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.goal_id.id = str[start:end]
      start = end
      end += 1
      (self.action_feedback.status.status,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.status.text = str[start:end].decode('utf-8')
      else:
        self.action_feedback.status.text = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.action_feedback.feedback.feedback.data = str[start:end].decode('utf-8')
      else:
        self.action_feedback.feedback.feedback.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_IBI = None
def _get_struct_IBI():
    global _struct_IBI
    if _struct_IBI is None:
        _struct_IBI = struct.Struct("<IBI")
    return _struct_IBI
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_i12df3I = None
def _get_struct_i12df3I():
    global _struct_i12df3I
    if _struct_i12df3I is None:
        _struct_i12df3I = struct.Struct("<i12df3I")
    return _struct_i12df3I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B2I = None
def _get_struct_B2I():
    global _struct_B2I
    if _struct_B2I is None:
        _struct_B2I = struct.Struct("<B2I")
    return _struct_B2I
_struct_3d2f2iBi3di3I = None
def _get_struct_3d2f2iBi3di3I():
    global _struct_3d2f2iBi3di3I
    if _struct_3d2f2iBi3di3I is None:
        _struct_3d2f2iBi3di3I = struct.Struct("<3d2f2iBi3di3I")
    return _struct_3d2f2iBi3di3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
