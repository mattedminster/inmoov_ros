# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from image_recognition_msgs/GetPersonsRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg
import sensor_msgs.msg

class GetPersonsRequest(genpy.Message):
  _md5sum = "b13d2865c5af2a64e6e30ab1b56e1dd5"
  _type = "image_recognition_msgs/GetPersonsRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """sensor_msgs/Image image

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of cameara
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id
"""
  __slots__ = ['image']
  _slot_types = ['sensor_msgs/Image']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       image

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPersonsRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
    else:
      self.image = sensor_msgs.msg.Image()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs))
      _x = self.image.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.image.height, _x.image.width))
      _x = self.image.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.image.is_bigendian, _x.image.step))
      _x = self.image.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.image is None:
        self.image = sensor_msgs.msg.Image()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.image.header.seq, _x.image.header.stamp.secs, _x.image.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.image.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.image.height, _x.image.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.image.encoding = str[start:end].decode('utf-8')
      else:
        self.image.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.image.is_bigendian, _x.image.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.image.data = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from image_recognition_msgs/GetPersonsResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import image_recognition_msgs.msg

class GetPersonsResponse(genpy.Message):
  _md5sum = "32e89db0c51ed623846b51562d545973"
  _type = "image_recognition_msgs/GetPersonsResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """PersonDetection[] detections

================================================================================
MSG: image_recognition_msgs/PersonDetection
BodypartDetection nose
BodypartDetection neck
BodypartDetection right_shoulder
BodypartDetection right_elbow
BodypartDetection right_wrist
BodypartDetection left_shoulder
BodypartDetection left_elbow
BodypartDetection left_wrist
BodypartDetection right_hip
BodypartDetection right_knee
BodypartDetection right_ankle
BodypartDetection left_hip
BodypartDetection left_knee
BodypartDetection left_ankle
BodypartDetection right_eye
BodypartDetection left_eye
BodypartDetection right_ear
BodypartDetection left_ear
BodypartDetection chest
================================================================================
MSG: image_recognition_msgs/BodypartDetection
uint32 x
uint32 y
float32 confidence"""
  __slots__ = ['detections']
  _slot_types = ['image_recognition_msgs/PersonDetection[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       detections

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPersonsResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.detections is None:
        self.detections = []
    else:
      self.detections = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections:
        _v1 = val1.nose
        _x = _v1
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v2 = val1.neck
        _x = _v2
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v3 = val1.right_shoulder
        _x = _v3
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v4 = val1.right_elbow
        _x = _v4
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v5 = val1.right_wrist
        _x = _v5
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v6 = val1.left_shoulder
        _x = _v6
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v7 = val1.left_elbow
        _x = _v7
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v8 = val1.left_wrist
        _x = _v8
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v9 = val1.right_hip
        _x = _v9
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v10 = val1.right_knee
        _x = _v10
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v11 = val1.right_ankle
        _x = _v11
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v12 = val1.left_hip
        _x = _v12
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v13 = val1.left_knee
        _x = _v13
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v14 = val1.left_ankle
        _x = _v14
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v15 = val1.right_eye
        _x = _v15
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v16 = val1.left_eye
        _x = _v16
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v17 = val1.right_ear
        _x = _v17
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v18 = val1.left_ear
        _x = _v18
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v19 = val1.chest
        _x = _v19
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.detections is None:
        self.detections = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections = []
      for i in range(0, length):
        val1 = image_recognition_msgs.msg.PersonDetection()
        _v20 = val1.nose
        _x = _v20
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v21 = val1.neck
        _x = _v21
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v22 = val1.right_shoulder
        _x = _v22
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v23 = val1.right_elbow
        _x = _v23
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v24 = val1.right_wrist
        _x = _v24
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v25 = val1.left_shoulder
        _x = _v25
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v26 = val1.left_elbow
        _x = _v26
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v27 = val1.left_wrist
        _x = _v27
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v28 = val1.right_hip
        _x = _v28
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v29 = val1.right_knee
        _x = _v29
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v30 = val1.right_ankle
        _x = _v30
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v31 = val1.left_hip
        _x = _v31
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v32 = val1.left_knee
        _x = _v32
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v33 = val1.left_ankle
        _x = _v33
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v34 = val1.right_eye
        _x = _v34
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v35 = val1.left_eye
        _x = _v35
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v36 = val1.right_ear
        _x = _v36
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v37 = val1.left_ear
        _x = _v37
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v38 = val1.chest
        _x = _v38
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        self.detections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.detections)
      buff.write(_struct_I.pack(length))
      for val1 in self.detections:
        _v39 = val1.nose
        _x = _v39
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v40 = val1.neck
        _x = _v40
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v41 = val1.right_shoulder
        _x = _v41
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v42 = val1.right_elbow
        _x = _v42
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v43 = val1.right_wrist
        _x = _v43
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v44 = val1.left_shoulder
        _x = _v44
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v45 = val1.left_elbow
        _x = _v45
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v46 = val1.left_wrist
        _x = _v46
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v47 = val1.right_hip
        _x = _v47
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v48 = val1.right_knee
        _x = _v48
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v49 = val1.right_ankle
        _x = _v49
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v50 = val1.left_hip
        _x = _v50
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v51 = val1.left_knee
        _x = _v51
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v52 = val1.left_ankle
        _x = _v52
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v53 = val1.right_eye
        _x = _v53
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v54 = val1.left_eye
        _x = _v54
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v55 = val1.right_ear
        _x = _v55
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v56 = val1.left_ear
        _x = _v56
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
        _v57 = val1.chest
        _x = _v57
        buff.write(_get_struct_2If().pack(_x.x, _x.y, _x.confidence))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.detections is None:
        self.detections = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.detections = []
      for i in range(0, length):
        val1 = image_recognition_msgs.msg.PersonDetection()
        _v58 = val1.nose
        _x = _v58
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v59 = val1.neck
        _x = _v59
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v60 = val1.right_shoulder
        _x = _v60
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v61 = val1.right_elbow
        _x = _v61
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v62 = val1.right_wrist
        _x = _v62
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v63 = val1.left_shoulder
        _x = _v63
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v64 = val1.left_elbow
        _x = _v64
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v65 = val1.left_wrist
        _x = _v65
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v66 = val1.right_hip
        _x = _v66
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v67 = val1.right_knee
        _x = _v67
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v68 = val1.right_ankle
        _x = _v68
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v69 = val1.left_hip
        _x = _v69
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v70 = val1.left_knee
        _x = _v70
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v71 = val1.left_ankle
        _x = _v71
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v72 = val1.right_eye
        _x = _v72
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v73 = val1.left_eye
        _x = _v73
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v74 = val1.right_ear
        _x = _v74
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v75 = val1.left_ear
        _x = _v75
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        _v76 = val1.chest
        _x = _v76
        start = end
        end += 12
        (_x.x, _x.y, _x.confidence,) = _get_struct_2If().unpack(str[start:end])
        self.detections.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2If = None
def _get_struct_2If():
    global _struct_2If
    if _struct_2If is None:
        _struct_2If = struct.Struct("<2If")
    return _struct_2If
class GetPersons(object):
  _type          = 'image_recognition_msgs/GetPersons'
  _md5sum = '7acffac5bd0d745a9cf4551bd10bd2dc'
  _request_class  = GetPersonsRequest
  _response_class = GetPersonsResponse
