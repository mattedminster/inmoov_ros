;; Auto-generated. Do not edit!


(when (boundp 'moveit_simple_grasps::GenerateGraspsGoal)
  (if (not (find-package "MOVEIT_SIMPLE_GRASPS"))
    (make-package "MOVEIT_SIMPLE_GRASPS"))
  (shadow 'GenerateGraspsGoal (find-package "MOVEIT_SIMPLE_GRASPS")))
(unless (find-package "MOVEIT_SIMPLE_GRASPS::GENERATEGRASPSGOAL")
  (make-package "MOVEIT_SIMPLE_GRASPS::GENERATEGRASPSGOAL"))

(in-package "ROS")
;;//! \htmlinclude GenerateGraspsGoal.msg.html
(if (not (find-package "GEOMETRY_MSGS"))
  (ros::roseus-add-msgs "geometry_msgs"))


(defclass moveit_simple_grasps::GenerateGraspsGoal
  :super ros::object
  :slots (_pose _width _options ))

(defmethod moveit_simple_grasps::GenerateGraspsGoal
  (:init
   (&key
    ((:pose __pose) (instance geometry_msgs::Pose :init))
    ((:width __width) 0.0)
    ((:options __options) (let (r) (dotimes (i 0) (push (instance moveit_simple_grasps::GraspGeneratorOptions :init) r)) r))
    )
   (send-super :init)
   (setq _pose __pose)
   (setq _width (float __width))
   (setq _options __options)
   self)
  (:pose
   (&rest __pose)
   (if (keywordp (car __pose))
       (send* _pose __pose)
     (progn
       (if __pose (setq _pose (car __pose)))
       _pose)))
  (:width
   (&optional __width)
   (if __width (setq _width __width)) _width)
  (:options
   (&rest __options)
   (if (keywordp (car __options))
       (send* _options __options)
     (progn
       (if __options (setq _options (car __options)))
       _options)))
  (:serialization-length
   ()
   (+
    ;; geometry_msgs/Pose _pose
    (send _pose :serialization-length)
    ;; float64 _width
    8
    ;; moveit_simple_grasps/GraspGeneratorOptions[] _options
    (apply #'+ (send-all _options :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; geometry_msgs/Pose _pose
       (send _pose :serialize s)
     ;; float64 _width
       (sys::poke _width (send s :buffer) (send s :count) :double) (incf (stream-count s) 8)
     ;; moveit_simple_grasps/GraspGeneratorOptions[] _options
     (write-long (length _options) s)
     (dolist (elem _options)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; geometry_msgs/Pose _pose
     (send _pose :deserialize buf ptr-) (incf ptr- (send _pose :serialization-length))
   ;; float64 _width
     (setq _width (sys::peek buf ptr- :double)) (incf ptr- 8)
   ;; moveit_simple_grasps/GraspGeneratorOptions[] _options
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _options (let (r) (dotimes (i n) (push (instance moveit_simple_grasps::GraspGeneratorOptions :init) r)) r))
     (dolist (elem- _options)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get moveit_simple_grasps::GenerateGraspsGoal :md5sum-) "162875df5b62e9fb4be6d2aa5a67176d")
(setf (get moveit_simple_grasps::GenerateGraspsGoal :datatype-) "moveit_simple_grasps/GenerateGraspsGoal")
(setf (get moveit_simple_grasps::GenerateGraspsGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal
geometry_msgs/Pose pose
float64 width
moveit_simple_grasps/GraspGeneratorOptions[] options

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: moveit_simple_grasps/GraspGeneratorOptions
uint8 grasp_axis
uint8 GRASP_AXIS_X = 0
uint8 GRASP_AXIS_Y = 1
uint8 GRASP_AXIS_Z = 2

uint8 grasp_direction
uint8 GRASP_DIRECTION_UP = 0
uint8 GRASP_DIRECTION_DOWN = 1

uint8 grasp_rotation
uint8 GRASP_ROTATION_HALF = 0
uint8 GRASP_ROTATION_FULL = 1

")



(provide :moveit_simple_grasps/GenerateGraspsGoal "162875df5b62e9fb4be6d2aa5a67176d")


