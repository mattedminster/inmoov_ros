;; Auto-generated. Do not edit!


(when (boundp 'cob_people_detection::addDataFeedback)
  (if (not (find-package "COB_PEOPLE_DETECTION"))
    (make-package "COB_PEOPLE_DETECTION"))
  (shadow 'addDataFeedback (find-package "COB_PEOPLE_DETECTION")))
(unless (find-package "COB_PEOPLE_DETECTION::ADDDATAFEEDBACK")
  (make-package "COB_PEOPLE_DETECTION::ADDDATAFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude addDataFeedback.msg.html


(defclass cob_people_detection::addDataFeedback
  :super ros::object
  :slots (_images_captured ))

(defmethod cob_people_detection::addDataFeedback
  (:init
   (&key
    ((:images_captured __images_captured) 0)
    )
   (send-super :init)
   (setq _images_captured (round __images_captured))
   self)
  (:images_captured
   (&optional __images_captured)
   (if __images_captured (setq _images_captured __images_captured)) _images_captured)
  (:serialization-length
   ()
   (+
    ;; int32 _images_captured
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; int32 _images_captured
       (write-long _images_captured s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; int32 _images_captured
     (setq _images_captured (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get cob_people_detection::addDataFeedback :md5sum-) "0bd9d2345b5b8d85a254a7569f431459")
(setf (get cob_people_detection::addDataFeedback :datatype-) "cob_people_detection/addDataFeedback")
(setf (get cob_people_detection::addDataFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# feedback message
int32 images_captured			# the number of images already captured


")



(provide :cob_people_detection/addDataFeedback "0bd9d2345b5b8d85a254a7569f431459")


