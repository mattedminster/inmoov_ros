;; Auto-generated. Do not edit!


(when (boundp 'cob_people_detection::addDataGoal)
  (if (not (find-package "COB_PEOPLE_DETECTION"))
    (make-package "COB_PEOPLE_DETECTION"))
  (shadow 'addDataGoal (find-package "COB_PEOPLE_DETECTION")))
(unless (find-package "COB_PEOPLE_DETECTION::ADDDATAGOAL")
  (make-package "COB_PEOPLE_DETECTION::ADDDATAGOAL"))

(in-package "ROS")
;;//! \htmlinclude addDataGoal.msg.html


(defclass cob_people_detection::addDataGoal
  :super ros::object
  :slots (_label _capture_mode _continuous_mode_images_to_capture _continuous_mode_delay ))

(defmethod cob_people_detection::addDataGoal
  (:init
   (&key
    ((:label __label) "")
    ((:capture_mode __capture_mode) 0)
    ((:continuous_mode_images_to_capture __continuous_mode_images_to_capture) 0)
    ((:continuous_mode_delay __continuous_mode_delay) 0.0)
    )
   (send-super :init)
   (setq _label (string __label))
   (setq _capture_mode (round __capture_mode))
   (setq _continuous_mode_images_to_capture (round __continuous_mode_images_to_capture))
   (setq _continuous_mode_delay (float __continuous_mode_delay))
   self)
  (:label
   (&optional __label)
   (if __label (setq _label __label)) _label)
  (:capture_mode
   (&optional __capture_mode)
   (if __capture_mode (setq _capture_mode __capture_mode)) _capture_mode)
  (:continuous_mode_images_to_capture
   (&optional __continuous_mode_images_to_capture)
   (if __continuous_mode_images_to_capture (setq _continuous_mode_images_to_capture __continuous_mode_images_to_capture)) _continuous_mode_images_to_capture)
  (:continuous_mode_delay
   (&optional __continuous_mode_delay)
   (if __continuous_mode_delay (setq _continuous_mode_delay __continuous_mode_delay)) _continuous_mode_delay)
  (:serialization-length
   ()
   (+
    ;; string _label
    4 (length _label)
    ;; int32 _capture_mode
    4
    ;; int32 _continuous_mode_images_to_capture
    4
    ;; float32 _continuous_mode_delay
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; string _label
       (write-long (length _label) s) (princ _label s)
     ;; int32 _capture_mode
       (write-long _capture_mode s)
     ;; int32 _continuous_mode_images_to_capture
       (write-long _continuous_mode_images_to_capture s)
     ;; float32 _continuous_mode_delay
       (sys::poke _continuous_mode_delay (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; string _label
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _label (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; int32 _capture_mode
     (setq _capture_mode (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; int32 _continuous_mode_images_to_capture
     (setq _continuous_mode_images_to_capture (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; float32 _continuous_mode_delay
     (setq _continuous_mode_delay (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get cob_people_detection::addDataGoal :md5sum-) "2c9c666c7dd8f1cd1885c5fee48c91b1")
(setf (get cob_people_detection::addDataGoal :datatype-) "cob_people_detection/addDataGoal")
(setf (get cob_people_detection::addDataGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Adds data to the training database
#
# goal message
string label				# a label for the data which shall be added
int32 capture_mode			# mode of data capture: 0=manual (i.e. initiate data capture with service messages), 1=continuous
int32 continuous_mode_images_to_capture	# if the continuous mode is selected this number specifies how many images shall be captured
float32 continuous_mode_delay		# if the continuous mode is selected this number specifies the delay time between the recording of two successive images (in seconds)

")



(provide :cob_people_detection/addDataGoal "2c9c666c7dd8f1cd1885c5fee48c91b1")


