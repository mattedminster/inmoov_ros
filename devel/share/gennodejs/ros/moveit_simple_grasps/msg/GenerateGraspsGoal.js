// Auto-generated. Do not edit!

// (in-package moveit_simple_grasps.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let GraspGeneratorOptions = require('./GraspGeneratorOptions.js');
let geometry_msgs = _finder('geometry_msgs');

//-----------------------------------------------------------

class GenerateGraspsGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.pose = null;
      this.width = null;
      this.options = null;
    }
    else {
      if (initObj.hasOwnProperty('pose')) {
        this.pose = initObj.pose
      }
      else {
        this.pose = new geometry_msgs.msg.Pose();
      }
      if (initObj.hasOwnProperty('width')) {
        this.width = initObj.width
      }
      else {
        this.width = 0.0;
      }
      if (initObj.hasOwnProperty('options')) {
        this.options = initObj.options
      }
      else {
        this.options = [];
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GenerateGraspsGoal
    // Serialize message field [pose]
    bufferOffset = geometry_msgs.msg.Pose.serialize(obj.pose, buffer, bufferOffset);
    // Serialize message field [width]
    bufferOffset = _serializer.float64(obj.width, buffer, bufferOffset);
    // Serialize message field [options]
    // Serialize the length for message field [options]
    bufferOffset = _serializer.uint32(obj.options.length, buffer, bufferOffset);
    obj.options.forEach((val) => {
      bufferOffset = GraspGeneratorOptions.serialize(val, buffer, bufferOffset);
    });
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GenerateGraspsGoal
    let len;
    let data = new GenerateGraspsGoal(null);
    // Deserialize message field [pose]
    data.pose = geometry_msgs.msg.Pose.deserialize(buffer, bufferOffset);
    // Deserialize message field [width]
    data.width = _deserializer.float64(buffer, bufferOffset);
    // Deserialize message field [options]
    // Deserialize array length for message field [options]
    len = _deserializer.uint32(buffer, bufferOffset);
    data.options = new Array(len);
    for (let i = 0; i < len; ++i) {
      data.options[i] = GraspGeneratorOptions.deserialize(buffer, bufferOffset)
    }
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 3 * object.options.length;
    return length + 68;
  }

  static datatype() {
    // Returns string type for a message object
    return 'moveit_simple_grasps/GenerateGraspsGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '162875df5b62e9fb4be6d2aa5a67176d';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #goal
    geometry_msgs/Pose pose
    float64 width
    moveit_simple_grasps/GraspGeneratorOptions[] options
    
    ================================================================================
    MSG: geometry_msgs/Pose
    # A representation of pose in free space, composed of position and orientation. 
    Point position
    Quaternion orientation
    
    ================================================================================
    MSG: geometry_msgs/Point
    # This contains the position of a point in free space
    float64 x
    float64 y
    float64 z
    
    ================================================================================
    MSG: geometry_msgs/Quaternion
    # This represents an orientation in free space in quaternion form.
    
    float64 x
    float64 y
    float64 z
    float64 w
    
    ================================================================================
    MSG: moveit_simple_grasps/GraspGeneratorOptions
    uint8 grasp_axis
    uint8 GRASP_AXIS_X = 0
    uint8 GRASP_AXIS_Y = 1
    uint8 GRASP_AXIS_Z = 2
    
    uint8 grasp_direction
    uint8 GRASP_DIRECTION_UP = 0
    uint8 GRASP_DIRECTION_DOWN = 1
    
    uint8 grasp_rotation
    uint8 GRASP_ROTATION_HALF = 0
    uint8 GRASP_ROTATION_FULL = 1
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GenerateGraspsGoal(null);
    if (msg.pose !== undefined) {
      resolved.pose = geometry_msgs.msg.Pose.Resolve(msg.pose)
    }
    else {
      resolved.pose = new geometry_msgs.msg.Pose()
    }

    if (msg.width !== undefined) {
      resolved.width = msg.width;
    }
    else {
      resolved.width = 0.0
    }

    if (msg.options !== undefined) {
      resolved.options = new Array(msg.options.length);
      for (let i = 0; i < resolved.options.length; ++i) {
        resolved.options[i] = GraspGeneratorOptions.Resolve(msg.options[i]);
      }
    }
    else {
      resolved.options = []
    }

    return resolved;
    }
};

module.exports = GenerateGraspsGoal;
