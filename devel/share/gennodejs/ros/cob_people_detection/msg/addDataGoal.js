// Auto-generated. Do not edit!

// (in-package cob_people_detection.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class addDataGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.label = null;
      this.capture_mode = null;
      this.continuous_mode_images_to_capture = null;
      this.continuous_mode_delay = null;
    }
    else {
      if (initObj.hasOwnProperty('label')) {
        this.label = initObj.label
      }
      else {
        this.label = '';
      }
      if (initObj.hasOwnProperty('capture_mode')) {
        this.capture_mode = initObj.capture_mode
      }
      else {
        this.capture_mode = 0;
      }
      if (initObj.hasOwnProperty('continuous_mode_images_to_capture')) {
        this.continuous_mode_images_to_capture = initObj.continuous_mode_images_to_capture
      }
      else {
        this.continuous_mode_images_to_capture = 0;
      }
      if (initObj.hasOwnProperty('continuous_mode_delay')) {
        this.continuous_mode_delay = initObj.continuous_mode_delay
      }
      else {
        this.continuous_mode_delay = 0.0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type addDataGoal
    // Serialize message field [label]
    bufferOffset = _serializer.string(obj.label, buffer, bufferOffset);
    // Serialize message field [capture_mode]
    bufferOffset = _serializer.int32(obj.capture_mode, buffer, bufferOffset);
    // Serialize message field [continuous_mode_images_to_capture]
    bufferOffset = _serializer.int32(obj.continuous_mode_images_to_capture, buffer, bufferOffset);
    // Serialize message field [continuous_mode_delay]
    bufferOffset = _serializer.float32(obj.continuous_mode_delay, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type addDataGoal
    let len;
    let data = new addDataGoal(null);
    // Deserialize message field [label]
    data.label = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [capture_mode]
    data.capture_mode = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [continuous_mode_images_to_capture]
    data.continuous_mode_images_to_capture = _deserializer.int32(buffer, bufferOffset);
    // Deserialize message field [continuous_mode_delay]
    data.continuous_mode_delay = _deserializer.float32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += object.label.length;
    return length + 16;
  }

  static datatype() {
    // Returns string type for a message object
    return 'cob_people_detection/addDataGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '2c9c666c7dd8f1cd1885c5fee48c91b1';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Adds data to the training database
    #
    # goal message
    string label				# a label for the data which shall be added
    int32 capture_mode			# mode of data capture: 0=manual (i.e. initiate data capture with service messages), 1=continuous
    int32 continuous_mode_images_to_capture	# if the continuous mode is selected this number specifies how many images shall be captured
    float32 continuous_mode_delay		# if the continuous mode is selected this number specifies the delay time between the recording of two successive images (in seconds)
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new addDataGoal(null);
    if (msg.label !== undefined) {
      resolved.label = msg.label;
    }
    else {
      resolved.label = ''
    }

    if (msg.capture_mode !== undefined) {
      resolved.capture_mode = msg.capture_mode;
    }
    else {
      resolved.capture_mode = 0
    }

    if (msg.continuous_mode_images_to_capture !== undefined) {
      resolved.continuous_mode_images_to_capture = msg.continuous_mode_images_to_capture;
    }
    else {
      resolved.continuous_mode_images_to_capture = 0
    }

    if (msg.continuous_mode_delay !== undefined) {
      resolved.continuous_mode_delay = msg.continuous_mode_delay;
    }
    else {
      resolved.continuous_mode_delay = 0.0
    }

    return resolved;
    }
};

module.exports = addDataGoal;
