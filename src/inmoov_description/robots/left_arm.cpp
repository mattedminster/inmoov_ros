/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-06-16 19:10:10.545271
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33;
x0=IKcos(j[1]);
x1=IKsin(j[2]);
x2=IKcos(j[4]);
x3=IKsin(j[1]);
x4=IKsin(j[3]);
x5=IKcos(j[2]);
x6=IKcos(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[0]);
x9=IKsin(j[0]);
x10=((0.009)*x3);
x11=((0.0192)*x5);
x12=((0.0144)*x4);
x13=((0.3862)*x3);
x14=((0.0192)*x6);
x15=((0.009)*x5);
x16=((0.0278)*x5);
x17=((0.01)*x3);
x18=((0.0192)*x3);
x19=((0.0192)*x4);
x20=((0.0144)*x5);
x21=(x1*x8);
x22=(x0*x6);
x23=(x0*x9);
x24=(x0*x8);
x25=(x1*x9);
x26=(x3*x8);
x27=(x0*x1);
x28=(x5*x8);
x29=((1.0)*x25);
x30=(x3*x5*x9);
x31=(x0*x4*x5);
x32=(x30+x21);
x33=((((-1.0)*x29))+((x26*x5)));
IkReal x34=((1.0)*x4);
eetrans[0]=(((x7*(((((-1.0)*x18*x34))+((x11*x22))))))+(((-0.3862)*x31))+(((-0.009)*x27*x7))+(((-1.0)*x0*x16))+(((0.01)*x27))+(((-0.2835)*x3))+((x2*(((((-1.0)*x10*x34))+((x15*x22))))))+((x12*x3))+(((0.0192)*x2*x27))+(((-1.0)*x20*x22))+(((-1.0)*x13*x6)));
IkReal x35=((1.0)*x3*x9);
eetrans[1]=((0.143)+(((0.2835)*x23))+(((-0.01)*x28))+(((-0.0278)*x21))+((x7*(((((-1.0)*x10*x25))+((x15*x8))))))+(((-1.0)*x12*x23))+((x2*((((x18*x25))+(((-1.0)*x11*x8))))))+(((0.04)*x9))+((x7*((((x19*x23))+((x14*x32))))))+(((0.3862)*x22*x9))+((x2*(((((0.009)*x32*x6))+(((0.009)*x23*x4))))))+(((0.078)*x8))+((x6*(((((-0.0144)*x21))+(((-1.0)*x20*x35))))))+((x17*x25))+((x4*(((((-0.3862)*x21))+(((-1.0)*x13*x5*x9))))))+(((-1.0)*x16*x35)));
IkReal x36=((1.0)*x21);
eetrans[2]=((0.298)+((x2*(((((-1.0)*x11*x9))+(((-1.0)*x18*x36))))))+(((-0.0278)*x25))+(((-0.01)*x5*x9))+((x6*(((((-0.0144)*x25))+((x20*x26))))))+((x7*(((((-1.0)*x14*x33))+(((-1.0)*x19*x24))))))+((x7*((((x10*x21))+((x15*x9))))))+(((0.078)*x9))+((x16*x26))+((x4*(((((-0.3862)*x25))+((x13*x28))))))+((x2*(((((-0.009)*x24*x4))+(((-0.009)*x33*x6))))))+(((-0.2835)*x24))+((x12*x24))+(((-0.04)*x8))+(((-1.0)*x17*x36))+(((-0.3862)*x22*x8)));
eerot[0]=(x31+((x3*x6)));
eerot[1]=(((x32*x4))+(((-1.0)*x22*x9)));
eerot[2]=(((x4*((x29+(((-1.0)*x26*x5))))))+((x22*x8)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=((-1.0)*r02);
new_px=((0.298)+(((-1.0)*pz)));
new_r01=r01;
new_py=((-0.143)+py);
new_r02=r00;
new_pz=px;
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[72], zeror[48];
int numroots;;
IkReal x37=(px*r00);
IkReal x38=(pz*r02);
IkReal x39=(py*r01);
IkReal x40=((0.0278)*r02);
IkReal x41=((0.078)*r01);
IkReal x42=((0.0278)*r01);
IkReal x43=((0.3235)*r00);
IkReal x44=((0.567)*r02);
IkReal x45=((0.0556)*r00);
IkReal x46=((0.2435)*r00);
IkReal x47=px*px;
IkReal x48=pz*pz;
IkReal x49=py*py;
IkReal x50=((0.7724)*pz);
IkReal x51=((0.01112256)*r00);
IkReal x52=((0.0288)*px);
IkReal x53=((0.0043368)*r02);
IkReal x54=((0.7724)*py);
IkReal x55=((0.04995163)*r01);
IkReal x56=((0.050466)*r00);
IkReal x57=((0.088452)*r02);
IkReal x58=((0.0086736)*r00);
IkReal x59=((0.004448)*r01);
IkReal x60=((1.5448)*px);
IkReal x61=((0.0576)*pz);
IkReal x62=((0.02224512)*r02);
IkReal x63=((0.037986)*r00);
IkReal x64=((0.09531163)*r01);
IkReal x65=((0.156)*r00);
IkReal x66=((0.0576)*py);
IkReal x67=((0.02224512)*r01);
IkReal x68=((0.09990326)*r00);
IkReal x69=((0.100932)*r01);
IkReal x70=((0.0173472)*r01);
IkReal x71=((0.008896)*r00);
IkReal x72=((3.0896)*py);
IkReal x73=((0.075972)*r01);
IkReal x74=((0.19062326)*r00);
IkReal x75=((0.03934363)*r02);
IkReal x76=((0.01088)*r01);
IkReal x77=((0.13044726)*r00);
IkReal x78=((0.08470363)*r02);
IkReal x79=((0.03622363)*r02);
IkReal x80=((0.12420726)*r00);
IkReal x81=((0.01408)*r01);
IkReal x82=((0.08158363)*r02);
IkReal x83=((0.487)*r01);
IkReal x84=(px*r02);
IkReal x85=((4.0)*r01);
IkReal x86=(px*py);
IkReal x87=((1.0)*r02);
IkReal x88=((1.0)*r01);
IkReal x89=(pz*r00);
IkReal x90=(py*r02);
IkReal x91=(py*r00);
IkReal x92=(pz*r01);
IkReal x93=((2.0)*r00);
IkReal x94=((0.1112)*r01);
IkReal x95=((2.0)*pz);
IkReal x96=((0.647)*r01);
IkReal x97=(px*r01);
IkReal x98=((0.136)*x90);
IkReal x99=((0.136)*x92);
IkReal x100=(r01*x47);
IkReal x101=((0.0556)*x92);
IkReal x102=(r01*x48);
IkReal x103=((0.156)*x37);
IkReal x104=((0.156)*x39);
IkReal x105=((0.156)*x38);
IkReal x106=((0.0556)*x90);
IkReal x107=((0.647)*x91);
IkReal x108=(px*x96);
IkReal x109=((0.647)*x84);
IkReal x110=(pz*x38);
IkReal x111=((0.647)*x89);
IkReal x112=(px*x94);
IkReal x113=((1.134)*x92);
IkReal x114=((1.134)*x90);
IkReal x115=((0.1112)*x91);
IkReal x116=((0.16)*x38);
IkReal x117=((0.16)*x39);
IkReal x118=((0.16)*x37);
IkReal x119=(px*x83);
IkReal x120=((0.487)*x91);
IkReal x121=(r02*x49);
IkReal x122=(r02*x47);
IkReal x123=((0.176)*x92);
IkReal x124=((0.487)*x84);
IkReal x125=((0.487)*x89);
IkReal x126=((0.176)*x90);
IkReal x127=((-0.0556)*r00);
IkReal x128=(x65+(((-1.0)*x96)));
IkReal x129=((0.272)*x89);
IkReal x130=((0.272)*x84);
IkReal x131=((0.1112)*x84);
IkReal x132=((0.1112)*x89);
IkReal x133=((1.294)*x90);
IkReal x134=((1.294)*x92);
IkReal x135=((2.268)*x84);
IkReal x136=((2.268)*x89);
IkReal x137=((0.352)*x84);
IkReal x138=((0.974)*x90);
IkReal x139=((0.352)*x89);
IkReal x140=((0.974)*x92);
IkReal x141=((((-1.0)*x45))+x44);
IkReal x142=((-0.0278)*r01);
IkReal x143=((0.272)*x97);
IkReal x144=((0.272)*x91);
IkReal x145=(py*x39);
IkReal x146=((0.352)*x91);
IkReal x147=((0.352)*x97);
IkReal x148=(x37*x95);
IkReal x149=(x39*x95);
IkReal x150=((2.0)*py*x37);
IkReal x151=((1.0)*x145);
IkReal x152=((2.0)*py*x38);
IkReal x153=(x49*x87);
IkReal x154=(x47*x87);
IkReal x155=((2.0)*px*x37);
IkReal x156=((4.0)*px*x38);
IkReal x157=((4.0)*px*x39);
IkReal x158=(x48*x93);
IkReal x159=(x49*x93);
IkReal x160=((1.0)*x110);
IkReal x161=(x65+x83);
IkReal x162=((8.0)*py*x38);
IkReal x163=((8.0)*py*x37);
IkReal x164=((4.0)*x145);
IkReal x165=(x48*x85);
IkReal x166=(x47*x85);
IkReal x167=(x44+x45);
IkReal x168=(x48*x88);
IkReal x169=(x47*x88);
IkReal x170=(x40+x41);
IkReal x171=(x51+x52);
IkReal x172=((-0.0070128)+x125);
IkReal x173=(x66+x67);
IkReal x174=(x77+x76);
IkReal x175=(x71+x70);
IkReal x176=(x80+x81);
IkReal x177=((-0.061792)+x146);
IkReal x178=(x59+x57);
IkReal x179=(x74+x73);
IkReal x180=(x53+x63);
IkReal x181=(x43+x41);
IkReal x182=(x46+x40);
IkReal x183=(x110+x78);
IkReal x184=(x112+x58);
IkReal x185=(x145+x64);
IkReal x186=(x101+x53);
IkReal x187=((-0.0093168)+x110+x79);
IkReal x188=(x122+x121);
IkReal x189=(x124+x99);
IkReal x190=(x113+x115);
IkReal x191=(x108+x106);
IkReal x192=(x109+x98);
IkReal x193=(x160+x75);
IkReal x194=(x126+x109);
IkReal x195=(x100+x102);
IkReal x196=(x160+x82);
IkReal x197=(x124+x123);
IkReal x198=(x108+x101);
IkReal x199=(x115+x114);
IkReal x200=(x120+x106);
IkReal x201=(x151+x64);
IkReal x202=(x144+x61+x62);
IkReal x203=((0.3862)+x39+x38+x37);
IkReal x204=(x145+x55+x56);
IkReal x205=(x159+x158);
IkReal x206=(x166+x165);
IkReal x207=(x154+x153);
IkReal x208=(x151+x55+x56);
IkReal x209=(x168+x169);
IkReal x210=(x152+x150+x54);
IkReal x211=(x148+x149+x50);
IkReal x212=(x111+x211);
IkReal x213=((0.061792)+x143+x117+x116+x118);
IkReal x214=((0.0602472)+x104+x105+x107+x103);
IkReal x215=(x157+x156+x155+x60);
IkReal x216=(x162+x163+x164+x72);
IkReal x217=((0.0602472)+x119+x104+x105+x101+x103);
IkReal x218=(x147+x117+x116+x118+x61+x62);
IkReal x219=((0.0602472)+x119+x104+x105+x106+x103);
op[0]=((((-1.0)*x181))+x203+x40);
op[1]=x42;
op[2]=x167;
op[3]=0;
op[4]=((((-1.0)*x170))+x203+x46);
op[5]=x42;
op[6]=x42;
op[7]=((((-1.0)*x170))+(((-1.0)*x43))+x203);
op[8]=0;
op[9]=x141;
op[10]=x42;
op[11]=((((-1.0)*x41))+x182+x203);
op[12]=((-0.0093168)+(((-1.0)*x193))+(((-1.0)*x192))+x171+x111+x188+x99+(((-1.0)*x211)));
op[13]=((((-1.0)*x186))+(((-1.0)*x108))+x106+x195+(((-1.0)*x208))+x214+(((-1.0)*x210)));
op[14]=((((-1.0)*x174))+(((-1.0)*x202))+x213+x205+(((-1.0)*x215)));
op[15]=((((-1.0)*x184))+(((-1.0)*x114))+x178+x190);
op[16]=((((-1.0)*x171))+(((-1.0)*x189))+x172+x183+(((-1.0)*x207))+x211+x98);
op[17]=(x195+x180+(((-1.0)*x200))+(((-1.0)*x201))+x217+(((-1.0)*x210)));
op[18]=((((-1.0)*x191))+x195+x186+(((-1.0)*x208))+x214+(((-1.0)*x210)));
op[19]=((((-1.0)*x111))+(((-1.0)*x123))+x171+x194+x187+(((-1.0)*x207))+x211);
op[20]=((((-1.0)*x199))+x113+x184+x57+(((-1.0)*x59)));
op[21]=(x177+x176+(((-1.0)*x205))+x215+(((-1.0)*x218)));
op[22]=((((-1.0)*x186))+(((-1.0)*x120))+x195+(((-1.0)*x201))+x219+x63+(((-1.0)*x210)));
op[23]=((-0.0070128)+(((-1.0)*x171))+(((-1.0)*x196))+(((-1.0)*x125))+(((-1.0)*x126))+x197+x188+(((-1.0)*x211)));
op[24]=x128;
op[25]=x127;
op[26]=x94;
op[27]=0;
op[28]=x161;
op[29]=x127;
op[30]=x127;
op[31]=x128;
op[32]=0;
op[33]=((-0.1112)*r01);
op[34]=x127;
op[35]=x161;
op[36]=((((-1.0)*x129))+x173+x134+x130+(((-1.0)*x133)));
op[37]=(x132+(((-1.0)*x205))+(((-1.0)*x131))+x215+x68+(((-1.0)*x69)));
op[38]=((((-0.26089452)*r01))+x206+(((0.02176)*r00))+(((-1.0)*x216)));
op[39]=((((-1.0)*x175))+x135+(((-1.0)*x136)));
op[40]=((((-1.0)*x173))+x140+x129+(((-1.0)*x130))+(((-1.0)*x138)));
op[41]=(x179+x131+(((-1.0)*x205))+(((-1.0)*x132))+x215);
op[42]=(x131+(((-1.0)*x205))+(((-1.0)*x132))+x215+x68+(((-1.0)*x69)));
op[43]=(x173+x133+x139+(((-1.0)*x137))+(((-1.0)*x134)));
op[44]=(x175+x135+(((-1.0)*x136)));
op[45]=((((0.24841452)*r01))+(((-1.0)*x206))+x216+(((-0.02816)*r00)));
op[46]=(x179+x132+(((-1.0)*x205))+(((-1.0)*x131))+x215);
op[47]=((((-1.0)*x140))+(((-1.0)*x173))+x137+x138+(((-1.0)*x139)));
op[48]=(x170+x203+x43);
op[49]=x142;
op[50]=x141;
op[51]=0;
op[52]=((((-1.0)*x182))+x203+x41);
op[53]=x142;
op[54]=x142;
op[55]=((((-1.0)*x40))+x181+x203);
op[56]=0;
op[57]=x167;
op[58]=x142;
op[59]=((((-1.0)*x46))+x170+x203);
op[60]=((-0.0093168)+(((-1.0)*x171))+(((-1.0)*x193))+x192+x188+(((-1.0)*x99))+(((-1.0)*x212)));
op[61]=((((-1.0)*x191))+x101+(((-1.0)*x209))+x210+x214+x204+(((-1.0)*x53)));
op[62]=(x174+(((-1.0)*x205))+(((-1.0)*x202))+x213+x215);
op[63]=((((-1.0)*x112))+(((-1.0)*x113))+x199+x58+x57+(((-1.0)*x59)));
op[64]=((-0.0070128)+(((-1.0)*x125))+x171+x183+x189+(((-1.0)*x207))+x211+(((-1.0)*x98)));
op[65]=((((-1.0)*x101))+(((-1.0)*x120))+x185+(((-1.0)*x209))+x210+x219+x53+(((-1.0)*x63)));
op[66]=((((-1.0)*x198))+x106+(((-1.0)*x209))+x210+x214+x204+x53);
op[67]=((((-1.0)*x171))+(((-1.0)*x194))+x123+x187+(((-1.0)*x207))+x212);
op[68]=((((-1.0)*x190))+x178+x112+x114+(((-1.0)*x58)));
op[69]=((((-1.0)*x176))+x177+x205+(((-1.0)*x218))+(((-1.0)*x215)));
op[70]=((((-1.0)*x180))+x185+(((-1.0)*x200))+(((-1.0)*x209))+x210+x217);
op[71]=((((-1.0)*x196))+(((-1.0)*x197))+x171+x172+x126+x188+(((-1.0)*x211)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj1 = zeror[ij0+1], htj2 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj1)||isnan(htj2)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x220=htj0*htj0;
CheckValue<IkReal> x221=IKPowWithIntegerCheck(((1.0)+x220),-1);
if(!x221.valid){
continue;
}
cj0array[numsolutions]=((x221.value)*(((1.0)+(((-1.0)*x220)))));
CheckValue<IkReal> x222=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x222.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x222.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x223=htj1*htj1;
CheckValue<IkReal> x224=IKPowWithIntegerCheck(((1.0)+x223),-1);
if(!x224.valid){
continue;
}
cj1array[numsolutions]=((x224.value)*(((1.0)+(((-1.0)*x223)))));
CheckValue<IkReal> x225=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x225.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x225.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x226=htj2*htj2;
CheckValue<IkReal> x227=IKPowWithIntegerCheck(((1.0)+x226),-1);
if(!x227.valid){
continue;
}
cj2array[numsolutions]=((x227.value)*(((1.0)+(((-1.0)*x226)))));
CheckValue<IkReal> x228=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x228.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x228.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj1 = 1;
_nj2 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij0]-cj2array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij0]-sj2array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij1[1] = 0; _ij2[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

    j2 = j2array[ij0]; cj2 = cj2array[ij0]; sj2 = sj2array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x229=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x229))+((r02*sj1))+(((-1.0)*r01*sj0*x229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((((-1.0)*cj0*r00*x229))+((r02*sj1))+(((-1.0)*r01*sj0*x229))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((((-1.0)*cj0*r00*x229))+((r02*sj1))+(((-1.0)*r01*sj0*x229))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x230=((1.0)*cj1);
evalcond[0]=((((-1.0)*r00*sj0))+(((-1.0)*(IKsin(j3))))+((cj0*r01)));
evalcond[1]=((((-1.0)*cj0*r00*x230))+(((-1.0)*r01*sj0*x230))+((r02*sj1))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x231=((20.0160128102482)*px);
IkReal x232=(cj0*sj1);
IkReal x233=(cj1*pz);
IkReal x234=((42.7008273285295)*py);
IkReal x235=(sj0*sj1);
IkReal x236=((20.0160128102482)*py);
IkReal x237=((42.7008273285295)*px);
if( IKabs(((-1.32852949025887)+(((-1.0)*x235*x236))+(((-1.0)*x231*x232))+(((-20.0160128102482)*x233))+((cj0*x234))+(((0.800640512409928)*sj1))+(((-1.0)*sj0*x237)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14358153189218)+((x234*x235))+((x232*x237))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x233))+((cj0*x236))+(((-1.0)*sj0*x231)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.32852949025887)+(((-1.0)*x235*x236))+(((-1.0)*x231*x232))+(((-20.0160128102482)*x233))+((cj0*x234))+(((0.800640512409928)*sj1))+(((-1.0)*sj0*x237))))+IKsqr(((-1.14358153189218)+((x234*x235))+((x232*x237))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x233))+((cj0*x236))+(((-1.0)*sj0*x231))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.32852949025887)+(((-1.0)*x235*x236))+(((-1.0)*x231*x232))+(((-20.0160128102482)*x233))+((cj0*x234))+(((0.800640512409928)*sj1))+(((-1.0)*sj0*x237))), ((-1.14358153189218)+((x234*x235))+((x232*x237))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x233))+((cj0*x236))+(((-1.0)*sj0*x231))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x238=IKsin(j4);
IkReal x239=IKcos(j4);
evalcond[0]=((-0.0358)+(((-0.0192)*x238))+(((-0.009)*x239))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.01)+(((-0.0192)*x239))+((cj1*pz))+(((0.009)*x238))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x240=((20.0160128102482)*px);
IkReal x241=(cj0*sj1);
IkReal x242=(cj1*pz);
IkReal x243=((42.7008273285295)*py);
IkReal x244=(sj0*sj1);
IkReal x245=((20.0160128102482)*py);
IkReal x246=((42.7008273285295)*px);
if( IKabs(((2.95863357352549)+(((-1.0)*cj0*x243))+(((-1.0)*x240*x241))+((sj0*x246))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x242))+(((-1.0)*x244*x245)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.866026154256739)+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x242))+((x241*x246))+(((-1.0)*cj0*x245))+((sj0*x240))+((x243*x244)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.95863357352549)+(((-1.0)*cj0*x243))+(((-1.0)*x240*x241))+((sj0*x246))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x242))+(((-1.0)*x244*x245))))+IKsqr(((0.866026154256739)+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x242))+((x241*x246))+(((-1.0)*cj0*x245))+((sj0*x240))+((x243*x244))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.95863357352549)+(((-1.0)*cj0*x243))+(((-1.0)*x240*x241))+((sj0*x246))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x242))+(((-1.0)*x244*x245))), ((0.866026154256739)+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x242))+((x241*x246))+(((-1.0)*cj0*x245))+((sj0*x240))+((x243*x244))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x247=IKsin(j4);
IkReal x248=IKcos(j4);
evalcond[0]=((-0.0646)+(((0.0192)*x247))+(((0.009)*x248))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.009)*x247))+(((-0.0192)*x248))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x249=(cj0*px);
IkReal x250=((42.7008273285295)*cj1);
IkReal x251=((20.0160128102482)*sj1);
IkReal x252=((20.0160128102482)*cj1);
IkReal x253=((42.7008273285295)*sj1);
IkReal x254=(py*sj0);
if( IKabs(((-11.2906325060048)+(((-1.70803309314118)*cj1))+((x249*x250))+(((-1.0)*x251*x254))+((x250*x254))+(((-1.0)*pz*x252))+(((-1.0)*pz*x253))+(((-1.0)*x249*x251))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+((x249*x252))+((x249*x253))+(((-0.800640512409928)*cj1))+((pz*x250))+(((-1.70803309314118)*sj1))+(((-1.0)*pz*x251))+((x253*x254))+((x252*x254)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-11.2906325060048)+(((-1.70803309314118)*cj1))+((x249*x250))+(((-1.0)*x251*x254))+((x250*x254))+(((-1.0)*pz*x252))+(((-1.0)*pz*x253))+(((-1.0)*x249*x251))+(((0.800640512409928)*sj1))))+IKsqr(((-5.81331732052309)+((x249*x252))+((x249*x253))+(((-0.800640512409928)*cj1))+((pz*x250))+(((-1.70803309314118)*sj1))+(((-1.0)*pz*x251))+((x253*x254))+((x252*x254))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-11.2906325060048)+(((-1.70803309314118)*cj1))+((x249*x250))+(((-1.0)*x251*x254))+((x250*x254))+(((-1.0)*pz*x252))+(((-1.0)*pz*x253))+(((-1.0)*x249*x251))+(((0.800640512409928)*sj1))), ((-5.81331732052309)+((x249*x252))+((x249*x253))+(((-0.800640512409928)*cj1))+((pz*x250))+(((-1.70803309314118)*sj1))+(((-1.0)*pz*x251))+((x253*x254))+((x252*x254))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x255=IKsin(j4);
IkReal x256=IKcos(j4);
IkReal x257=(cj0*px);
IkReal x258=(py*sj0);
IkReal x259=((1.0)*cj1);
evalcond[0]=((-0.01)+(((-0.0192)*x256))+(((0.009)*x255))+((sj1*x257))+((sj1*x258))+((cj1*pz))+(((-0.04)*sj1)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((0.009)*x256))+(((-1.0)*x257*x259))+((pz*sj1))+(((0.0192)*x255))+(((-1.0)*x258*x259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x260=(cj0*px);
IkReal x261=((42.7008273285295)*cj1);
IkReal x262=((20.0160128102482)*sj1);
IkReal x263=((20.0160128102482)*cj1);
IkReal x264=((42.7008273285295)*sj1);
IkReal x265=(py*sj0);
if( IKabs(((12.9207365892714)+(((-1.0)*x262*x265))+(((1.70803309314118)*cj1))+(((-1.0)*x261*x265))+((pz*x264))+(((0.800640512409928)*sj1))+(((-1.0)*pz*x263))+(((-1.0)*x260*x261))+(((-1.0)*x260*x262)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((-1.0)*x263*x265))+(((0.800640512409928)*cj1))+((x260*x264))+(((-1.70803309314118)*sj1))+((x264*x265))+((pz*x262))+((pz*x261))+(((-1.0)*x260*x263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.9207365892714)+(((-1.0)*x262*x265))+(((1.70803309314118)*cj1))+(((-1.0)*x261*x265))+((pz*x264))+(((0.800640512409928)*sj1))+(((-1.0)*pz*x263))+(((-1.0)*x260*x261))+(((-1.0)*x260*x262))))+IKsqr(((5.53576194288764)+(((-1.0)*x263*x265))+(((0.800640512409928)*cj1))+((x260*x264))+(((-1.70803309314118)*sj1))+((x264*x265))+((pz*x262))+((pz*x261))+(((-1.0)*x260*x263))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((12.9207365892714)+(((-1.0)*x262*x265))+(((1.70803309314118)*cj1))+(((-1.0)*x261*x265))+((pz*x264))+(((0.800640512409928)*sj1))+(((-1.0)*pz*x263))+(((-1.0)*x260*x261))+(((-1.0)*x260*x262))), ((5.53576194288764)+(((-1.0)*x263*x265))+(((0.800640512409928)*cj1))+((x260*x264))+(((-1.70803309314118)*sj1))+((x264*x265))+((pz*x262))+((pz*x261))+(((-1.0)*x260*x263))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x266=IKsin(j4);
IkReal x267=IKcos(j4);
IkReal x268=(cj0*px);
IkReal x269=(py*sj0);
IkReal x270=((1.0)*cj1);
evalcond[0]=((-0.01)+((cj1*pz))+(((-0.0192)*x267))+(((-0.04)*sj1))+(((0.009)*x266))+((sj1*x268))+((sj1*x269)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-0.009)*x267))+(((-1.0)*x269*x270))+(((-0.0192)*x266))+(((-1.0)*x268*x270))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x271=(py*sj0);
IkReal x272=((75000.0)*cj1);
IkReal x273=(pz*sj1);
IkReal x274=((160000.0)*cj1);
IkReal x275=(pz*sj3);
IkReal x276=(cj0*px);
IkReal x277=(sj1*sj3);
CheckValue<IkReal> x278=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x278.valid){
continue;
}
CheckValue<IkReal> x279 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((-1.0)*x272*x275))+((x271*x274))+(((3000.0)*x277))+(((-75000.0)*x276*x277))+(((-6400.0)*cj1))+((x274*x276))+(((3054.0)*sj3))+(((-160000.0)*x273))+(((-75000.0)*x271*x277)))),IkReal(((-21262.5)+((x272*x276))+((x271*x272))+(((-6400.0)*x277))+((x274*x275))+(((-3000.0)*cj1))+(((160000.0)*x271*x277))+(((-75000.0)*x273))+(((-520.0)*sj3))+(((160000.0)*x276*x277))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x279.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x278.value)))+(x279.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x280=IKsin(j4);
IkReal x281=IKcos(j4);
IkReal x282=(cj0*px);
IkReal x283=((1.0)*cj1);
IkReal x284=(py*sj0);
IkReal x285=((0.0192)*x280);
IkReal x286=((0.009)*x281);
evalcond[0]=((-0.01)+(((-0.0192)*x281))+((cj1*pz))+(((-0.04)*sj1))+(((0.009)*x280))+((sj1*x282))+((sj1*x284)));
evalcond[1]=((-0.0502)+(((-1.0)*cj3*x286))+(((-1.0)*cj3*x285))+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+((sj3*x285))+((sj3*x286))+(((-1.0)*x282*x283))+((pz*sj1))+(((-1.0)*x283*x284)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x287=(px*sj0);
IkReal x288=((160000.0)*cj0);
IkReal x289=((160000.0)*cj3);
IkReal x290=(cj1*pz);
IkReal x291=(cj3*sj1);
IkReal x292=((75000.0)*cj0);
IkReal x293=(py*sj0);
CheckValue<IkReal> x294 = IKatan2WithCheck(IkReal(((-8032.0)+(((3000.0)*x291))+(((-75000.0)*cj3*x290))+(((3054.0)*cj3))+(((61792.0)*sj3))+(((-1.0)*px*x291*x292))+(((-75000.0)*x291*x293))+(((-160000.0)*x287))+((py*x288)))),IkReal(((-3765.0)+((x289*x290))+(((-6400.0)*x291))+((py*x292))+((sj1*x289*x293))+(((-75000.0)*x287))+((px*x288*x291))+(((-520.0)*cj3))+(((28965.0)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x294.valid){
continue;
}
CheckValue<IkReal> x295=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x295.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x294.value)+(((1.5707963267949)*(x295.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x296=IKsin(j4);
IkReal x297=IKcos(j4);
IkReal x298=(cj0*px);
IkReal x299=((1.0)*cj1);
IkReal x300=(py*sj0);
IkReal x301=((0.0192)*x296);
IkReal x302=((0.009)*x297);
evalcond[0]=((-0.01)+(((0.009)*x296))+((sj1*x298))+((cj1*pz))+(((-0.0192)*x297))+(((-0.04)*sj1))+((sj1*x300)));
evalcond[1]=((-0.0502)+(((-1.0)*cj3*x302))+(((-1.0)*cj3*x301))+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+((sj3*x302))+((sj3*x301))+(((-0.0144)*sj3))+(((-1.0)*x298*x299))+(((-1.0)*x299*x300))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x303=((1.0)*cj0);
if( IKabs((((r00*sj0))+(((-1.0)*r01*x303)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*cj1*r00*x303))+(((-1.0)*cj1*r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*r01*x303))))+IKsqr((((r02*sj1))+(((-1.0)*cj1*r00*x303))+(((-1.0)*cj1*r01*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r00*sj0))+(((-1.0)*r01*x303))), (((r02*sj1))+(((-1.0)*cj1*r00*x303))+(((-1.0)*cj1*r01*sj0))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x304=((1.0)*cj1);
evalcond[0]=((((-1.0)*r00*sj0))+(IKsin(j3))+((cj0*r01)));
evalcond[1]=(((r02*sj1))+(((-1.0)*cj0*r00*x304))+(((-1.0)*r01*sj0*x304))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x305=((20.0160128102482)*px);
IkReal x306=(cj0*sj1);
IkReal x307=(cj1*pz);
IkReal x308=((42.7008273285295)*py);
IkReal x309=(sj0*sj1);
IkReal x310=((20.0160128102482)*py);
IkReal x311=((42.7008273285295)*px);
if( IKabs(((5.33279957299173)+(((-1.0)*cj0*x308))+((sj0*x311))+(((20.0160128102482)*x307))+((x309*x310))+((x305*x306))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.97891646650654)+(((-1.0)*cj0*x310))+(((-42.7008273285295)*x307))+(((-1.0)*x308*x309))+(((-1.0)*x306*x311))+(((1.70803309314118)*sj1))+((sj0*x305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.33279957299173)+(((-1.0)*cj0*x308))+((sj0*x311))+(((20.0160128102482)*x307))+((x309*x310))+((x305*x306))+(((-0.800640512409928)*sj1))))+IKsqr(((1.97891646650654)+(((-1.0)*cj0*x310))+(((-42.7008273285295)*x307))+(((-1.0)*x308*x309))+(((-1.0)*x306*x311))+(((1.70803309314118)*sj1))+((sj0*x305))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((5.33279957299173)+(((-1.0)*cj0*x308))+((sj0*x311))+(((20.0160128102482)*x307))+((x309*x310))+((x305*x306))+(((-0.800640512409928)*sj1))), ((1.97891646650654)+(((-1.0)*cj0*x310))+(((-42.7008273285295)*x307))+(((-1.0)*x308*x309))+(((-1.0)*x306*x311))+(((1.70803309314118)*sj1))+((sj0*x305))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x312=IKcos(j4);
IkReal x313=IKsin(j4);
evalcond[0]=((-0.1202)+(((0.009)*x312))+(((0.0192)*x313))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.0192)*x312))+((py*sj0*sj1))+(((-0.009)*x313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x314=((20.0160128102482)*px);
IkReal x315=(cj0*sj1);
IkReal x316=(cj1*pz);
IkReal x317=((42.7008273285295)*py);
IkReal x318=(sj0*sj1);
IkReal x319=((20.0160128102482)*py);
IkReal x320=((42.7008273285295)*px);
if( IKabs(((-3.70269548972511)+(((-1.0)*sj0*x320))+(((20.0160128102482)*x316))+((cj0*x317))+((x318*x319))+((x314*x315))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.25647184414198)+(((-1.0)*x315*x320))+(((1.70803309314118)*sj1))+((cj0*x319))+(((-1.0)*sj0*x314))+(((-42.7008273285295)*x316))+(((-1.0)*x317*x318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.70269548972511)+(((-1.0)*sj0*x320))+(((20.0160128102482)*x316))+((cj0*x317))+((x318*x319))+((x314*x315))+(((-0.800640512409928)*sj1))))+IKsqr(((-2.25647184414198)+(((-1.0)*x315*x320))+(((1.70803309314118)*sj1))+((cj0*x319))+(((-1.0)*sj0*x314))+(((-42.7008273285295)*x316))+(((-1.0)*x317*x318))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.70269548972511)+(((-1.0)*sj0*x320))+(((20.0160128102482)*x316))+((cj0*x317))+((x318*x319))+((x314*x315))+(((-0.800640512409928)*sj1))), ((-2.25647184414198)+(((-1.0)*x315*x320))+(((1.70803309314118)*sj1))+((cj0*x319))+(((-1.0)*sj0*x314))+(((-42.7008273285295)*x316))+(((-1.0)*x317*x318))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x321=IKcos(j4);
IkReal x322=IKsin(j4);
evalcond[0]=((-0.0914)+(((-0.009)*x321))+(((-0.0192)*x322))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.01)+(((-0.009)*x322))+(((0.0192)*x321))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x323=(cj0*px);
IkReal x324=((42.7008273285295)*cj1);
IkReal x325=((20.0160128102482)*sj1);
IkReal x326=((20.0160128102482)*cj1);
IkReal x327=((42.7008273285295)*sj1);
IkReal x328=(py*sj0);
if( IKabs(((-11.2906325060048)+((x325*x328))+(((-1.70803309314118)*cj1))+((x323*x325))+((x323*x324))+((pz*x326))+((x324*x328))+(((-1.0)*pz*x327))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+((x326*x328))+((x323*x326))+(((-0.800640512409928)*cj1))+(((-1.0)*x327*x328))+(((-1.0)*x323*x327))+(((1.70803309314118)*sj1))+(((-1.0)*pz*x325))+(((-1.0)*pz*x324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-11.2906325060048)+((x325*x328))+(((-1.70803309314118)*cj1))+((x323*x325))+((x323*x324))+((pz*x326))+((x324*x328))+(((-1.0)*pz*x327))+(((-0.800640512409928)*sj1))))+IKsqr(((-5.81331732052309)+((x326*x328))+((x323*x326))+(((-0.800640512409928)*cj1))+(((-1.0)*x327*x328))+(((-1.0)*x323*x327))+(((1.70803309314118)*sj1))+(((-1.0)*pz*x325))+(((-1.0)*pz*x324))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-11.2906325060048)+((x325*x328))+(((-1.70803309314118)*cj1))+((x323*x325))+((x323*x324))+((pz*x326))+((x324*x328))+(((-1.0)*pz*x327))+(((-0.800640512409928)*sj1))), ((-5.81331732052309)+((x326*x328))+((x323*x326))+(((-0.800640512409928)*cj1))+(((-1.0)*x327*x328))+(((-1.0)*x323*x327))+(((1.70803309314118)*sj1))+(((-1.0)*pz*x325))+(((-1.0)*pz*x324))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x329=IKsin(j4);
IkReal x330=IKcos(j4);
IkReal x331=(cj0*px);
IkReal x332=(py*sj0);
IkReal x333=((1.0)*cj1);
evalcond[0]=((0.01)+(((0.0192)*x330))+(((-0.009)*x329))+((cj1*pz))+(((-0.04)*sj1))+((sj1*x331))+((sj1*x332)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((0.0192)*x329))+(((-1.0)*x331*x333))+(((-1.0)*x332*x333))+((pz*sj1))+(((0.009)*x330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x334=(cj0*px);
IkReal x335=((42.7008273285295)*cj1);
IkReal x336=((20.0160128102482)*sj1);
IkReal x337=((20.0160128102482)*cj1);
IkReal x338=((42.7008273285295)*sj1);
IkReal x339=(py*sj0);
if( IKabs(((12.9207365892714)+((x334*x336))+((x336*x339))+(((1.70803309314118)*cj1))+((pz*x337))+((pz*x338))+(((-1.0)*x335*x339))+(((-1.0)*x334*x335))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((-1.0)*x337*x339))+(((0.800640512409928)*cj1))+(((-1.0)*x338*x339))+(((-1.0)*pz*x335))+(((1.70803309314118)*sj1))+((pz*x336))+(((-1.0)*x334*x338))+(((-1.0)*x334*x337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.9207365892714)+((x334*x336))+((x336*x339))+(((1.70803309314118)*cj1))+((pz*x337))+((pz*x338))+(((-1.0)*x335*x339))+(((-1.0)*x334*x335))+(((-0.800640512409928)*sj1))))+IKsqr(((5.53576194288764)+(((-1.0)*x337*x339))+(((0.800640512409928)*cj1))+(((-1.0)*x338*x339))+(((-1.0)*pz*x335))+(((1.70803309314118)*sj1))+((pz*x336))+(((-1.0)*x334*x338))+(((-1.0)*x334*x337))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((12.9207365892714)+((x334*x336))+((x336*x339))+(((1.70803309314118)*cj1))+((pz*x337))+((pz*x338))+(((-1.0)*x335*x339))+(((-1.0)*x334*x335))+(((-0.800640512409928)*sj1))), ((5.53576194288764)+(((-1.0)*x337*x339))+(((0.800640512409928)*cj1))+(((-1.0)*x338*x339))+(((-1.0)*pz*x335))+(((1.70803309314118)*sj1))+((pz*x336))+(((-1.0)*x334*x338))+(((-1.0)*x334*x337))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x340=IKsin(j4);
IkReal x341=IKcos(j4);
IkReal x342=(cj0*px);
IkReal x343=(py*sj0);
IkReal x344=((1.0)*cj1);
evalcond[0]=((0.01)+((cj1*pz))+(((0.0192)*x341))+(((-0.04)*sj1))+(((-0.009)*x340))+((sj1*x343))+((sj1*x342)));
evalcond[1]=((0.2979)+(((-0.0192)*x340))+(((0.04)*cj1))+(((-0.009)*x341))+(((-1.0)*x343*x344))+((pz*sj1))+(((-1.0)*x342*x344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x345=(py*sj0);
IkReal x346=((75000.0)*cj1);
IkReal x347=(pz*sj1);
IkReal x348=((160000.0)*cj1);
IkReal x349=(pz*sj3);
IkReal x350=(cj0*px);
IkReal x351=(sj1*sj3);
CheckValue<IkReal> x352=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x352.valid){
continue;
}
CheckValue<IkReal> x353 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((-3000.0)*x351))+(((75000.0)*x345*x351))+(((-160000.0)*x347))+(((-6400.0)*cj1))+(((3054.0)*sj3))+((x345*x348))+((x346*x349))+((x348*x350))+(((75000.0)*x350*x351)))),IkReal(((-21262.5)+(((-160000.0)*x350*x351))+(((-75000.0)*x347))+((x346*x350))+(((-3000.0)*cj1))+(((-1.0)*x348*x349))+((x345*x346))+(((-160000.0)*x345*x351))+(((-520.0)*sj3))+(((6400.0)*x351))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x352.value)))+(x353.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x354=IKsin(j4);
IkReal x355=IKcos(j4);
IkReal x356=(cj0*px);
IkReal x357=((1.0)*cj1);
IkReal x358=(py*sj0);
IkReal x359=((0.0192)*x354);
IkReal x360=((0.009)*x355);
evalcond[0]=((0.01)+(((-0.009)*x354))+((cj1*pz))+(((0.0192)*x355))+(((-0.04)*sj1))+((sj1*x358))+((sj1*x356)));
evalcond[1]=((-0.1058)+((cj3*x359))+(((-0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+((cj3*x360))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x357*x358))+(((-1.0)*x356*x357))+(((-0.0144)*sj3))+((sj3*x359))+((sj3*x360))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x361=(px*sj0);
IkReal x362=((160000.0)*cj0);
IkReal x363=(cj3*sj1);
IkReal x364=((75000.0)*cj0);
IkReal x365=(py*sj0);
IkReal x366=(cj1*cj3*pz);
CheckValue<IkReal> x367=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x367.valid){
continue;
}
CheckValue<IkReal> x368 = IKatan2WithCheck(IkReal(((16928.0)+(((-3000.0)*x363))+(((3054.0)*cj3))+(((61792.0)*sj3))+(((75000.0)*x363*x365))+(((-1.0)*py*x362))+((px*x363*x364))+(((75000.0)*x366))+(((160000.0)*x361)))),IkReal(((7935.0)+(((6400.0)*x363))+(((-1.0)*py*x364))+(((-520.0)*cj3))+(((-160000.0)*x366))+(((28965.0)*sj3))+(((75000.0)*x361))+(((-160000.0)*x363*x365))+(((-1.0)*px*x362*x363)))),IKFAST_ATAN2_MAGTHRESH);
if(!x368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x367.value)))+(x368.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x369=IKsin(j4);
IkReal x370=IKcos(j4);
IkReal x371=(cj0*px);
IkReal x372=((1.0)*cj1);
IkReal x373=(py*sj0);
IkReal x374=((0.0192)*x369);
IkReal x375=((0.009)*x370);
evalcond[0]=((0.01)+(((-0.009)*x369))+((sj1*x371))+((sj1*x373))+((cj1*pz))+(((0.0192)*x370))+(((-0.04)*sj1)));
evalcond[1]=((-0.1058)+(((-0.3862)*sj3))+((cj3*x375))+((cj3*x374))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x372*x373))+(((-0.0144)*sj3))+((sj3*x375))+((sj3*x374))+(((-1.0)*x371*x372))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x376=((1.0)*cj1);
IkReal x377=(cj0*r00);
IkReal x378=(r01*sj0);
if( IKabs((((sj1*x377))+((sj1*x378))+((cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*x376*x378))+(((-1.0)*x376*x377)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x377))+((sj1*x378))+((cj1*r02))))+IKsqr((((r02*sj1))+(((-1.0)*x376*x378))+(((-1.0)*x376*x377))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj1*x377))+((sj1*x378))+((cj1*r02))), (((r02*sj1))+(((-1.0)*x376*x378))+(((-1.0)*x376*x377))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x379=(r01*sj0);
IkReal x380=((1.0)*cj1);
IkReal x381=(cj0*r00);
evalcond[0]=(((sj1*x379))+((cj1*r02))+(((-1.0)*(IKsin(j3))))+((sj1*x381)));
evalcond[1]=((((-1.0)*x380*x381))+(((-1.0)*x379*x380))+((r02*sj1))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x382=((20.0160128102482)*px);
IkReal x383=(cj0*sj1);
IkReal x384=(cj1*pz);
IkReal x385=((42.7008273285295)*py);
IkReal x386=(sj0*sj1);
IkReal x387=((20.0160128102482)*py);
IkReal x388=((42.7008273285295)*px);
if( IKabs(((0.440886042167067)+(((-1.70803309314118)*sj1))+((x383*x388))+((x385*x386))+((cj0*x387))+(((-1.0)*sj0*x382))+(((42.7008273285295)*x384)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((3.74833199893248)+(((20.0160128102482)*x384))+((x386*x387))+(((-1.0)*cj0*x385))+((x382*x383))+((sj0*x388))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.440886042167067)+(((-1.70803309314118)*sj1))+((x383*x388))+((x385*x386))+((cj0*x387))+(((-1.0)*sj0*x382))+(((42.7008273285295)*x384))))+IKsqr(((3.74833199893248)+(((20.0160128102482)*x384))+((x386*x387))+(((-1.0)*cj0*x385))+((x382*x383))+((sj0*x388))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.440886042167067)+(((-1.70803309314118)*sj1))+((x383*x388))+((x385*x386))+((cj0*x387))+(((-1.0)*sj0*x382))+(((42.7008273285295)*x384))), ((3.74833199893248)+(((20.0160128102482)*x384))+((x386*x387))+(((-1.0)*cj0*x385))+((x382*x383))+((sj0*x388))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x389=IKsin(j4);
IkReal x390=IKcos(j4);
evalcond[0]=((-0.068)+(((0.0192)*x390))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.009)*x389)));
evalcond[1]=((0.0422)+(((-0.009)*x390))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.0192)*x389))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x391=((20.0160128102482)*px);
IkReal x392=(cj0*sj1);
IkReal x393=(cj1*pz);
IkReal x394=((42.7008273285295)*py);
IkReal x395=(sj0*sj1);
IkReal x396=((20.0160128102482)*py);
IkReal x397=((42.7008273285295)*px);
if( IKabs(((-1.93327995729917)+(((-1.0)*sj0*x391))+((cj0*x396))+(((-1.0)*x394*x395))+(((1.70803309314118)*sj1))+(((-1.0)*x392*x397))+(((-42.7008273285295)*x393)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.63544168668268)+(((-1.0)*cj0*x394))+(((-20.0160128102482)*x393))+(((-1.0)*x395*x396))+((sj0*x397))+(((-1.0)*x391*x392))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.93327995729917)+(((-1.0)*sj0*x391))+((cj0*x396))+(((-1.0)*x394*x395))+(((1.70803309314118)*sj1))+(((-1.0)*x392*x397))+(((-42.7008273285295)*x393))))+IKsqr(((2.63544168668268)+(((-1.0)*cj0*x394))+(((-20.0160128102482)*x393))+(((-1.0)*x395*x396))+((sj0*x397))+(((-1.0)*x391*x392))+(((0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.93327995729917)+(((-1.0)*sj0*x391))+((cj0*x396))+(((-1.0)*x394*x395))+(((1.70803309314118)*sj1))+(((-1.0)*x392*x397))+(((-42.7008273285295)*x393))), ((2.63544168668268)+(((-1.0)*cj0*x394))+(((-20.0160128102482)*x393))+(((-1.0)*x395*x396))+((sj0*x397))+(((-1.0)*x391*x392))+(((0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x398=IKsin(j4);
IkReal x399=IKcos(j4);
evalcond[0]=((-0.068)+(((-0.009)*x398))+(((0.0192)*x399))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0134)+((cj1*pz))+(((0.009)*x399))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.0192)*x398))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x400=((42.7008273285295)*cj0);
IkReal x401=(cj1*px);
IkReal x402=((20.0160128102482)*sj0);
IkReal x403=((20.0160128102482)*cj0);
IkReal x404=(pz*sj1);
IkReal x405=(cj1*py);
IkReal x406=((42.7008273285295)*sj0);
if( IKabs(((-12.8518815052042)+(((-1.70803309314118)*cj1))+((py*x403))+((x405*x406))+(((-1.0)*px*x402))+((x400*x401))+(((-42.7008273285295)*x404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.48265278889778)+(((-20.0160128102482)*x404))+(((-0.800640512409928)*cj1))+((px*x406))+(((-1.0)*py*x400))+((x402*x405))+((x401*x403)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-12.8518815052042)+(((-1.70803309314118)*cj1))+((py*x403))+((x405*x406))+(((-1.0)*px*x402))+((x400*x401))+(((-42.7008273285295)*x404))))+IKsqr(((-2.48265278889778)+(((-20.0160128102482)*x404))+(((-0.800640512409928)*cj1))+((px*x406))+(((-1.0)*py*x400))+((x402*x405))+((x401*x403))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-12.8518815052042)+(((-1.70803309314118)*cj1))+((py*x403))+((x405*x406))+(((-1.0)*px*x402))+((x400*x401))+(((-42.7008273285295)*x404))), ((-2.48265278889778)+(((-20.0160128102482)*x404))+(((-0.800640512409928)*cj1))+((px*x406))+(((-1.0)*py*x400))+((x402*x405))+((x401*x403))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x407=IKsin(j4);
IkReal x408=IKcos(j4);
IkReal x409=((1.0)*cj1);
evalcond[0]=((-0.068)+(((-0.009)*x407))+(((0.0192)*x408))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((-1.0)*py*sj0*x409))+(((0.04)*cj1))+(((0.0192)*x407))+(((0.009)*x408))+((pz*sj1))+(((-1.0)*cj0*px*x409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x410=((42.7008273285295)*py);
IkReal x411=((20.0160128102482)*sj0);
IkReal x412=(pz*sj1);
IkReal x413=(cj0*cj1*px);
if( IKabs(((11.3594875900721)+(((-1.0)*cj1*sj0*x410))+(((-1.0)*px*x411))+(((42.7008273285295)*x412))+(((1.70803309314118)*cj1))+(((20.0160128102482)*cj0*py))+(((-42.7008273285295)*x413)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.86642647451294)+(((-20.0160128102482)*x413))+(((0.800640512409928)*cj1))+(((20.0160128102482)*x412))+(((-1.0)*cj0*x410))+(((42.7008273285295)*px*sj0))+(((-1.0)*cj1*py*x411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((11.3594875900721)+(((-1.0)*cj1*sj0*x410))+(((-1.0)*px*x411))+(((42.7008273285295)*x412))+(((1.70803309314118)*cj1))+(((20.0160128102482)*cj0*py))+(((-42.7008273285295)*x413))))+IKsqr(((8.86642647451294)+(((-20.0160128102482)*x413))+(((0.800640512409928)*cj1))+(((20.0160128102482)*x412))+(((-1.0)*cj0*x410))+(((42.7008273285295)*px*sj0))+(((-1.0)*cj1*py*x411))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((11.3594875900721)+(((-1.0)*cj1*sj0*x410))+(((-1.0)*px*x411))+(((42.7008273285295)*x412))+(((1.70803309314118)*cj1))+(((20.0160128102482)*cj0*py))+(((-42.7008273285295)*x413))), ((8.86642647451294)+(((-20.0160128102482)*x413))+(((0.800640512409928)*cj1))+(((20.0160128102482)*x412))+(((-1.0)*cj0*x410))+(((42.7008273285295)*px*sj0))+(((-1.0)*cj1*py*x411))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x414=IKsin(j4);
IkReal x415=IKcos(j4);
IkReal x416=((1.0)*cj1);
evalcond[0]=((-0.068)+(((-0.009)*x414))+(((0.0192)*x415))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((-1.0)*cj0*px*x416))+(((-0.009)*x415))+(((0.04)*cj1))+(((-1.0)*py*sj0*x416))+(((-0.0192)*x414))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x417=((75000.0)*cj1);
IkReal x418=(py*sj0);
IkReal x419=(pz*sj1);
IkReal x420=((160000.0)*px);
IkReal x421=(sj0*sj3);
IkReal x422=(cj0*py*sj3);
CheckValue<IkReal> x423=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x423.valid){
continue;
}
CheckValue<IkReal> x424 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+((cj0*cj1*x420))+(((-75000.0)*px*x421))+(((75000.0)*x422))+(((-6400.0)*cj1))+(((-2796.0)*sj3))+(((-160000.0)*x419))+(((160000.0)*cj1*x418)))),IkReal(((-21262.5)+((x420*x421))+(((-160000.0)*x422))+(((-3000.0)*cj1))+((x417*x418))+(((11960.0)*sj3))+((cj0*px*x417))+(((-75000.0)*x419))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x423.value)))+(x424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x425=IKsin(j4);
IkReal x426=IKcos(j4);
IkReal x427=(cj0*px);
IkReal x428=((1.0)*cj1);
IkReal x429=(py*sj0);
IkReal x430=((0.0192)*x425);
IkReal x431=((0.009)*x426);
evalcond[0]=((-0.068)+(((0.0192)*x426))+(((-0.009)*x425))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+(((-1.0)*cj3*x430))+(((-1.0)*cj3*x431))+((cj1*pz))+(((0.3862)*sj3))+(((-0.04)*sj1))+(((0.0144)*cj3))+((sj1*x427))+((sj1*x429)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x427*x428))+(((-0.0144)*sj3))+((sj3*x431))+((sj3*x430))+(((-1.0)*x428*x429))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x432=((160000.0)*cj3);
IkReal x433=(px*sj0);
IkReal x434=(cj1*pz);
IkReal x435=(cj0*py);
IkReal x436=((75000.0)*cj3);
IkReal x437=(cj0*px*sj1);
IkReal x438=(py*sj0*sj1);
CheckValue<IkReal> x439=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x439.valid){
continue;
}
CheckValue<IkReal> x440 = IKatan2WithCheck(IkReal(((4448.0)+(((-6400.0)*sj1))+(((-1.0)*x433*x436))+(((61792.0)*sj3))+(((-2796.0)*cj3))+(((160000.0)*x434))+(((160000.0)*x437))+(((160000.0)*x438))+((x435*x436)))),IkReal(((2085.0)+(((75000.0)*x438))+(((75000.0)*x437))+(((75000.0)*x434))+(((-1.0)*x432*x435))+(((11960.0)*cj3))+(((-3000.0)*sj1))+(((28965.0)*sj3))+((x432*x433)))),IKFAST_ATAN2_MAGTHRESH);
if(!x440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x439.value)))+(x440.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x441=IKsin(j4);
IkReal x442=IKcos(j4);
IkReal x443=(cj0*px);
IkReal x444=((1.0)*cj1);
IkReal x445=(py*sj0);
IkReal x446=((0.0192)*x441);
IkReal x447=((0.009)*x442);
evalcond[0]=((-0.068)+(((0.0192)*x442))+(((-1.0)*px*sj0))+(((-0.009)*x441))+((cj0*py)));
evalcond[1]=((0.0278)+((sj1*x443))+((sj1*x445))+(((-1.0)*cj3*x447))+(((-1.0)*cj3*x446))+((cj1*pz))+(((0.3862)*sj3))+(((-0.04)*sj1))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*x444*x445))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x443*x444))+((sj3*x446))+((sj3*x447))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x448=((1.0)*cj1);
IkReal x449=(r01*sj0);
IkReal x450=((1.0)*sj1);
IkReal x451=(cj0*r00);
if( IKabs(((((-1.0)*r02*x448))+(((-1.0)*x450*x451))+(((-1.0)*x449*x450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*x448*x449))+(((-1.0)*x448*x451)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x448))+(((-1.0)*x450*x451))+(((-1.0)*x449*x450))))+IKsqr((((r02*sj1))+(((-1.0)*x448*x449))+(((-1.0)*x448*x451))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r02*x448))+(((-1.0)*x450*x451))+(((-1.0)*x449*x450))), (((r02*sj1))+(((-1.0)*x448*x449))+(((-1.0)*x448*x451))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x452=((1.0)*cj1);
IkReal x453=(cj0*r00);
IkReal x454=(r01*sj0);
evalcond[0]=(((cj1*r02))+(IKsin(j3))+((sj1*x453))+((sj1*x454)));
evalcond[1]=(((r02*sj1))+(((-1.0)*x452*x453))+(((-1.0)*x452*x454))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x455=((20.0160128102482)*px);
IkReal x456=(cj0*sj1);
IkReal x457=(cj1*pz);
IkReal x458=((42.7008273285295)*py);
IkReal x459=(sj0*sj1);
IkReal x460=((20.0160128102482)*py);
IkReal x461=((42.7008273285295)*px);
if( IKabs(((3.56338404056579)+(((-1.0)*cj0*x460))+(((-42.7008273285295)*x457))+(((-1.0)*x456*x461))+((sj0*x455))+(((1.70803309314118)*sj1))+(((-1.0)*x458*x459)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.91299706431812)+(((-1.0)*x459*x460))+(((-1.0)*x455*x456))+((cj0*x458))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x457))+(((-1.0)*sj0*x461)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.56338404056579)+(((-1.0)*cj0*x460))+(((-42.7008273285295)*x457))+(((-1.0)*x456*x461))+((sj0*x455))+(((1.70803309314118)*sj1))+(((-1.0)*x458*x459))))+IKsqr(((-2.91299706431812)+(((-1.0)*x459*x460))+(((-1.0)*x455*x456))+((cj0*x458))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x457))+(((-1.0)*sj0*x461))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.56338404056579)+(((-1.0)*cj0*x460))+(((-42.7008273285295)*x457))+(((-1.0)*x456*x461))+((sj0*x455))+(((1.70803309314118)*sj1))+(((-1.0)*x458*x459))), ((-2.91299706431812)+(((-1.0)*x459*x460))+(((-1.0)*x455*x456))+((cj0*x458))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x457))+(((-1.0)*sj0*x461))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x462=IKsin(j4);
IkReal x463=IKcos(j4);
evalcond[0]=((-0.088)+(((-0.0192)*x463))+(((-1.0)*px*sj0))+((cj0*py))+(((0.009)*x462)));
evalcond[1]=((-0.0422)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1))+(((0.0192)*x462))+(((0.009)*x463)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x464=((20.0160128102482)*px);
IkReal x465=(cj0*sj1);
IkReal x466=(cj1*pz);
IkReal x467=((42.7008273285295)*py);
IkReal x468=(sj0*sj1);
IkReal x469=((20.0160128102482)*py);
IkReal x470=((42.7008273285295)*px);
if( IKabs(((1.18921804109955)+(((-1.0)*cj0*x469))+(((42.7008273285295)*x466))+(((-1.70803309314118)*sj1))+((x465*x470))+((sj0*x464))+((x467*x468)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.02588737656792)+((x468*x469))+(((-1.0)*sj0*x470))+((cj0*x467))+((x464*x465))+(((20.0160128102482)*x466))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.18921804109955)+(((-1.0)*cj0*x469))+(((42.7008273285295)*x466))+(((-1.70803309314118)*sj1))+((x465*x470))+((sj0*x464))+((x467*x468))))+IKsqr(((-4.02588737656792)+((x468*x469))+(((-1.0)*sj0*x470))+((cj0*x467))+((x464*x465))+(((20.0160128102482)*x466))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.18921804109955)+(((-1.0)*cj0*x469))+(((42.7008273285295)*x466))+(((-1.70803309314118)*sj1))+((x465*x470))+((sj0*x464))+((x467*x468))), ((-4.02588737656792)+((x468*x469))+(((-1.0)*sj0*x470))+((cj0*x467))+((x464*x465))+(((20.0160128102482)*x466))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x471=IKsin(j4);
IkReal x472=IKcos(j4);
evalcond[0]=((-0.088)+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0192)*x472))+(((0.009)*x471)));
evalcond[1]=((-0.0134)+((cj1*pz))+(((-0.009)*x472))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1))+(((-0.0192)*x471)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x473=((42.7008273285295)*cj0);
IkReal x474=(cj1*px);
IkReal x475=((20.0160128102482)*sj0);
IkReal x476=((20.0160128102482)*cj0);
IkReal x477=(pz*sj1);
IkReal x478=(cj1*py);
IkReal x479=((42.7008273285295)*sj0);
if( IKabs(((-9.72938350680544)+(((-1.70803309314118)*cj1))+((x473*x474))+((x478*x479))+(((-42.7008273285295)*x477))+(((-1.0)*py*x476))+((px*x475)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.14398185214839)+(((-0.800640512409928)*cj1))+(((-1.0)*px*x479))+((py*x473))+((x474*x476))+(((-20.0160128102482)*x477))+((x475*x478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.72938350680544)+(((-1.70803309314118)*cj1))+((x473*x474))+((x478*x479))+(((-42.7008273285295)*x477))+(((-1.0)*py*x476))+((px*x475))))+IKsqr(((-9.14398185214839)+(((-0.800640512409928)*cj1))+(((-1.0)*px*x479))+((py*x473))+((x474*x476))+(((-20.0160128102482)*x477))+((x475*x478))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.72938350680544)+(((-1.70803309314118)*cj1))+((x473*x474))+((x478*x479))+(((-42.7008273285295)*x477))+(((-1.0)*py*x476))+((px*x475))), ((-9.14398185214839)+(((-0.800640512409928)*cj1))+(((-1.0)*px*x479))+((py*x473))+((x474*x476))+(((-20.0160128102482)*x477))+((x475*x478))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x480=IKsin(j4);
IkReal x481=IKcos(j4);
IkReal x482=((1.0)*cj1);
evalcond[0]=((-0.088)+(((-0.0192)*x481))+(((0.009)*x480))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((0.009)*x481))+(((-1.0)*py*sj0*x482))+(((-1.0)*cj0*px*x482))+(((0.0192)*x480))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x483=((42.7008273285295)*py);
IkReal x484=((20.0160128102482)*sj0);
IkReal x485=(pz*sj1);
IkReal x486=(cj0*cj1*px);
if( IKabs(((14.4819855884708)+(((42.7008273285295)*x485))+(((-20.0160128102482)*cj0*py))+(((-1.0)*cj1*sj0*x483))+(((1.70803309314118)*cj1))+((px*x484))+(((-42.7008273285295)*x486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x485))+((cj0*x483))+(((-1.0)*cj1*py*x484))+(((-42.7008273285295)*px*sj0))+(((-20.0160128102482)*x486)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((14.4819855884708)+(((42.7008273285295)*x485))+(((-20.0160128102482)*cj0*py))+(((-1.0)*cj1*sj0*x483))+(((1.70803309314118)*cj1))+((px*x484))+(((-42.7008273285295)*x486))))+IKsqr(((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x485))+((cj0*x483))+(((-1.0)*cj1*py*x484))+(((-42.7008273285295)*px*sj0))+(((-20.0160128102482)*x486))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((14.4819855884708)+(((42.7008273285295)*x485))+(((-20.0160128102482)*cj0*py))+(((-1.0)*cj1*sj0*x483))+(((1.70803309314118)*cj1))+((px*x484))+(((-42.7008273285295)*x486))), ((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x485))+((cj0*x483))+(((-1.0)*cj1*py*x484))+(((-42.7008273285295)*px*sj0))+(((-20.0160128102482)*x486))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x487=IKsin(j4);
IkReal x488=IKcos(j4);
IkReal x489=((1.0)*cj1);
evalcond[0]=((-0.088)+(((-0.0192)*x488))+(((0.009)*x487))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-0.0192)*x487))+(((-1.0)*py*sj0*x489))+(((-1.0)*cj0*px*x489))+(((-0.009)*x488))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x490=((75000.0)*cj1);
IkReal x491=(py*sj0);
IkReal x492=(pz*sj1);
IkReal x493=((160000.0)*px);
IkReal x494=(sj0*sj3);
IkReal x495=(cj0*py*sj3);
CheckValue<IkReal> x496=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x496.valid){
continue;
}
CheckValue<IkReal> x497 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((160000.0)*cj1*x491))+(((-6400.0)*cj1))+(((8904.0)*sj3))+(((-75000.0)*x495))+((cj0*cj1*x493))+(((75000.0)*px*x494))+(((-160000.0)*x492)))),IkReal(((-21262.5)+(((-1.0)*x493*x494))+(((-3000.0)*cj1))+((x490*x491))+((cj0*px*x490))+(((-75000.0)*x492))+(((160000.0)*x495))+(((-13000.0)*sj3))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x496.value)))+(x497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x498=IKsin(j4);
IkReal x499=IKcos(j4);
IkReal x500=(cj0*px);
IkReal x501=((1.0)*cj1);
IkReal x502=(py*sj0);
IkReal x503=((0.0192)*x498);
IkReal x504=((0.009)*x499);
evalcond[0]=((-0.088)+(((0.009)*x498))+(((-0.0192)*x499))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0278)+((cj3*x504))+((cj3*x503))+(((-0.3862)*sj3))+((sj1*x502))+((sj1*x500))+((cj1*pz))+(((-0.04)*sj1))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+((sj3*x504))+((sj3*x503))+(((-0.0144)*sj3))+(((-1.0)*x501*x502))+((pz*sj1))+(((-1.0)*x500*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x505=((160000.0)*cj3);
IkReal x506=(cj0*py);
IkReal x507=(px*sj0);
IkReal x508=(cj1*pz);
IkReal x509=((75000.0)*cj3);
IkReal x510=(cj0*px*sj1);
IkReal x511=(py*sj0*sj1);
CheckValue<IkReal> x512 = IKatan2WithCheck(IkReal(((4448.0)+(((-1.0)*x506*x509))+(((-160000.0)*x508))+(((61792.0)*sj3))+(((8904.0)*cj3))+((x507*x509))+(((6400.0)*sj1))+(((-160000.0)*x510))+(((-160000.0)*x511)))),IkReal(((2085.0)+(((-1.0)*x505*x507))+(((-75000.0)*x510))+(((-75000.0)*x511))+((x505*x506))+(((-75000.0)*x508))+(((3000.0)*sj1))+(((28965.0)*sj3))+(((-13000.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x512.valid){
continue;
}
CheckValue<IkReal> x513=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x512.value)+(((1.5707963267949)*(x513.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x514=IKsin(j4);
IkReal x515=IKcos(j4);
IkReal x516=(cj0*px);
IkReal x517=((1.0)*cj1);
IkReal x518=(py*sj0);
IkReal x519=((0.0192)*x514);
IkReal x520=((0.009)*x515);
evalcond[0]=((-0.088)+(((-0.0192)*x515))+(((-1.0)*px*sj0))+((cj0*py))+(((0.009)*x514)));
evalcond[1]=((-0.0278)+(((-0.3862)*sj3))+((cj1*pz))+((cj3*x519))+(((-0.04)*sj1))+((cj3*x520))+((sj1*x516))+((sj1*x518))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+((sj3*x520))+(((-0.0144)*sj3))+(((-1.0)*x517*x518))+(((-1.0)*x516*x517))+((sj3*x519))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x521=((1.0)*cj1);
IkReal x522=(cj0*r00);
IkReal x523=(r01*sj0);
CheckValue<IkReal> x524=IKPowWithIntegerCheck(cj2,-1);
if(!x524.valid){
continue;
}
if( IKabs(((x524.value)*((((sj1*x523))+((sj1*x522))+((cj1*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x521*x522))+(((-1.0)*x521*x523))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x524.value)*((((sj1*x523))+((sj1*x522))+((cj1*r02))))))+IKsqr(((((-1.0)*x521*x522))+(((-1.0)*x521*x523))+((r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x524.value)*((((sj1*x523))+((sj1*x522))+((cj1*r02))))), ((((-1.0)*x521*x522))+(((-1.0)*x521*x523))+((r02*sj1))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x525=IKsin(j3);
IkReal x526=(r01*sj0);
IkReal x527=((1.0)*cj1);
IkReal x528=(cj0*r00);
IkReal x529=((1.0)*x525);
evalcond[0]=((((-1.0)*sj2*x529))+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[1]=(((sj1*x528))+((sj1*x526))+(((-1.0)*cj2*x529))+((cj1*r02)));
evalcond[2]=((((-1.0)*x526*x527))+(((-1.0)*x527*x528))+((r02*sj1))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x530=(cj2*sj3);
j4eval[0]=x530;
j4eval[1]=IKsign(x530);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x531=(sj2*sj3);
j4eval[0]=x531;
j4eval[1]=IKsign(x531);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x532=((20.0160128102482)*px);
IkReal x533=(cj0*sj1);
IkReal x534=(cj1*pz);
IkReal x535=((42.7008273285295)*py);
IkReal x536=(sj0*sj1);
IkReal x537=((20.0160128102482)*py);
IkReal x538=((42.7008273285295)*px);
if( IKabs(((0.440886042167067)+(((-1.0)*sj0*x532))+((cj0*x537))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x534))+((x535*x536))+((x533*x538)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((3.74833199893248)+((sj0*x538))+((x536*x537))+(((-1.0)*cj0*x535))+((x532*x533))+(((20.0160128102482)*x534))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.440886042167067)+(((-1.0)*sj0*x532))+((cj0*x537))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x534))+((x535*x536))+((x533*x538))))+IKsqr(((3.74833199893248)+((sj0*x538))+((x536*x537))+(((-1.0)*cj0*x535))+((x532*x533))+(((20.0160128102482)*x534))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.440886042167067)+(((-1.0)*sj0*x532))+((cj0*x537))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x534))+((x535*x536))+((x533*x538))), ((3.74833199893248)+((sj0*x538))+((x536*x537))+(((-1.0)*cj0*x535))+((x532*x533))+(((20.0160128102482)*x534))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x539=IKsin(j4);
IkReal x540=IKcos(j4);
evalcond[0]=((-0.068)+(((-0.009)*x539))+(((0.0192)*x540))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0422)+(((-0.0192)*x539))+((cj1*pz))+(((-0.009)*x540))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x541=((20.0160128102482)*px);
IkReal x542=(cj0*sj1);
IkReal x543=(cj1*pz);
IkReal x544=((42.7008273285295)*py);
IkReal x545=(sj0*sj1);
IkReal x546=((20.0160128102482)*py);
IkReal x547=((42.7008273285295)*px);
if( IKabs(((-1.93327995729917)+(((-1.0)*sj0*x541))+(((-1.0)*x544*x545))+(((-1.0)*x542*x547))+(((-42.7008273285295)*x543))+((cj0*x546))+(((1.70803309314118)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.63544168668268)+(((-1.0)*x541*x542))+(((-1.0)*x545*x546))+((sj0*x547))+(((-20.0160128102482)*x543))+(((-1.0)*cj0*x544))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.93327995729917)+(((-1.0)*sj0*x541))+(((-1.0)*x544*x545))+(((-1.0)*x542*x547))+(((-42.7008273285295)*x543))+((cj0*x546))+(((1.70803309314118)*sj1))))+IKsqr(((2.63544168668268)+(((-1.0)*x541*x542))+(((-1.0)*x545*x546))+((sj0*x547))+(((-20.0160128102482)*x543))+(((-1.0)*cj0*x544))+(((0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.93327995729917)+(((-1.0)*sj0*x541))+(((-1.0)*x544*x545))+(((-1.0)*x542*x547))+(((-42.7008273285295)*x543))+((cj0*x546))+(((1.70803309314118)*sj1))), ((2.63544168668268)+(((-1.0)*x541*x542))+(((-1.0)*x545*x546))+((sj0*x547))+(((-20.0160128102482)*x543))+(((-1.0)*cj0*x544))+(((0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x548=IKsin(j4);
IkReal x549=IKcos(j4);
evalcond[0]=((-0.068)+(((-0.009)*x548))+(((0.0192)*x549))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0134)+((cj1*pz))+((cj0*px*sj1))+(((0.009)*x549))+(((-0.04)*sj1))+(((0.0192)*x548))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x550=((42.7008273285295)*cj0);
IkReal x551=(cj1*px);
IkReal x552=((20.0160128102482)*sj0);
IkReal x553=((20.0160128102482)*cj0);
IkReal x554=(pz*sj1);
IkReal x555=(cj1*py);
IkReal x556=((42.7008273285295)*sj0);
if( IKabs(((-12.8518815052042)+(((-42.7008273285295)*x554))+(((-1.70803309314118)*cj1))+((py*x553))+((x555*x556))+(((-1.0)*px*x552))+((x550*x551)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.48265278889778)+(((-0.800640512409928)*cj1))+((px*x556))+(((-20.0160128102482)*x554))+((x551*x553))+(((-1.0)*py*x550))+((x552*x555)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-12.8518815052042)+(((-42.7008273285295)*x554))+(((-1.70803309314118)*cj1))+((py*x553))+((x555*x556))+(((-1.0)*px*x552))+((x550*x551))))+IKsqr(((-2.48265278889778)+(((-0.800640512409928)*cj1))+((px*x556))+(((-20.0160128102482)*x554))+((x551*x553))+(((-1.0)*py*x550))+((x552*x555))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-12.8518815052042)+(((-42.7008273285295)*x554))+(((-1.70803309314118)*cj1))+((py*x553))+((x555*x556))+(((-1.0)*px*x552))+((x550*x551))), ((-2.48265278889778)+(((-0.800640512409928)*cj1))+((px*x556))+(((-20.0160128102482)*x554))+((x551*x553))+(((-1.0)*py*x550))+((x552*x555))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x557=IKsin(j4);
IkReal x558=IKcos(j4);
IkReal x559=((1.0)*cj1);
evalcond[0]=((-0.068)+(((-0.009)*x557))+(((0.0192)*x558))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*py*sj0*x559))+(((0.009)*x558))+(((0.0192)*x557))+((pz*sj1))+(((-1.0)*cj0*px*x559)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x560=((42.7008273285295)*py);
IkReal x561=((20.0160128102482)*sj0);
IkReal x562=(pz*sj1);
IkReal x563=(cj0*cj1*px);
if( IKabs(((11.3594875900721)+(((42.7008273285295)*x562))+(((1.70803309314118)*cj1))+(((20.0160128102482)*cj0*py))+(((-42.7008273285295)*x563))+(((-1.0)*cj1*sj0*x560))+(((-1.0)*px*x561)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.86642647451294)+(((-1.0)*cj0*x560))+(((0.800640512409928)*cj1))+(((-20.0160128102482)*x563))+(((20.0160128102482)*x562))+(((-1.0)*cj1*py*x561))+(((42.7008273285295)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((11.3594875900721)+(((42.7008273285295)*x562))+(((1.70803309314118)*cj1))+(((20.0160128102482)*cj0*py))+(((-42.7008273285295)*x563))+(((-1.0)*cj1*sj0*x560))+(((-1.0)*px*x561))))+IKsqr(((8.86642647451294)+(((-1.0)*cj0*x560))+(((0.800640512409928)*cj1))+(((-20.0160128102482)*x563))+(((20.0160128102482)*x562))+(((-1.0)*cj1*py*x561))+(((42.7008273285295)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((11.3594875900721)+(((42.7008273285295)*x562))+(((1.70803309314118)*cj1))+(((20.0160128102482)*cj0*py))+(((-42.7008273285295)*x563))+(((-1.0)*cj1*sj0*x560))+(((-1.0)*px*x561))), ((8.86642647451294)+(((-1.0)*cj0*x560))+(((0.800640512409928)*cj1))+(((-20.0160128102482)*x563))+(((20.0160128102482)*x562))+(((-1.0)*cj1*py*x561))+(((42.7008273285295)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x564=IKsin(j4);
IkReal x565=IKcos(j4);
IkReal x566=((1.0)*cj1);
evalcond[0]=((-0.068)+(((0.0192)*x565))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.009)*x564)));
evalcond[1]=((0.2979)+(((-1.0)*py*sj0*x566))+(((0.04)*cj1))+(((-1.0)*cj0*px*x566))+(((-0.0192)*x564))+((pz*sj1))+(((-0.009)*x565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x567=((75000.0)*cj1);
IkReal x568=(py*sj0);
IkReal x569=(pz*sj1);
IkReal x570=((160000.0)*px);
IkReal x571=(sj0*sj3);
IkReal x572=(cj0*py*sj3);
CheckValue<IkReal> x573=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x573.valid){
continue;
}
CheckValue<IkReal> x574 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((160000.0)*cj1*x568))+(((-6400.0)*cj1))+(((-160000.0)*x569))+(((-2796.0)*sj3))+(((-75000.0)*px*x571))+((cj0*cj1*x570))+(((75000.0)*x572)))),IkReal(((-21262.5)+((cj0*px*x567))+(((-3000.0)*cj1))+((x567*x568))+(((11960.0)*sj3))+(((-160000.0)*x572))+(((-75000.0)*x569))+((x570*x571))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x574.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x573.value)))+(x574.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x575=IKsin(j4);
IkReal x576=IKcos(j4);
IkReal x577=(cj0*px);
IkReal x578=((1.0)*cj1);
IkReal x579=(py*sj0);
IkReal x580=((0.0192)*x575);
IkReal x581=((0.009)*x576);
evalcond[0]=((-0.068)+(((0.0192)*x576))+(((-0.009)*x575))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+((sj1*x577))+((sj1*x579))+((cj1*pz))+(((0.3862)*sj3))+(((-0.04)*sj1))+(((0.0144)*cj3))+(((-1.0)*cj3*x580))+(((-1.0)*cj3*x581)));
evalcond[2]=((0.2835)+(((-1.0)*x578*x579))+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x577*x578))+((sj3*x581))+((sj3*x580))+(((-0.0144)*sj3))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x582=((160000.0)*cj3);
IkReal x583=(px*sj0);
IkReal x584=(cj1*pz);
IkReal x585=(cj0*py);
IkReal x586=((75000.0)*cj3);
IkReal x587=(cj0*px*sj1);
IkReal x588=(py*sj0*sj1);
CheckValue<IkReal> x589=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x589.valid){
continue;
}
CheckValue<IkReal> x590 = IKatan2WithCheck(IkReal(((4448.0)+(((-6400.0)*sj1))+(((61792.0)*sj3))+(((160000.0)*x584))+(((160000.0)*x588))+(((160000.0)*x587))+(((-1.0)*x583*x586))+((x585*x586))+(((-2796.0)*cj3)))),IkReal(((2085.0)+(((-1.0)*x582*x585))+((x582*x583))+(((75000.0)*x588))+(((75000.0)*x587))+(((75000.0)*x584))+(((11960.0)*cj3))+(((-3000.0)*sj1))+(((28965.0)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x589.value)))+(x590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x591=IKsin(j4);
IkReal x592=IKcos(j4);
IkReal x593=(cj0*px);
IkReal x594=((1.0)*cj1);
IkReal x595=(py*sj0);
IkReal x596=((0.0192)*x591);
IkReal x597=((0.009)*x592);
evalcond[0]=((-0.068)+(((-0.009)*x591))+(((0.0192)*x592))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+((cj1*pz))+(((-1.0)*cj3*x597))+(((-1.0)*cj3*x596))+(((0.3862)*sj3))+(((-0.04)*sj1))+((sj1*x593))+((sj1*x595))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x593*x594))+(((-1.0)*x594*x595))+((pz*sj1))+((sj3*x596))+((sj3*x597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x598=((20.0160128102482)*px);
IkReal x599=(cj0*sj1);
IkReal x600=(cj1*pz);
IkReal x601=((42.7008273285295)*py);
IkReal x602=(sj0*sj1);
IkReal x603=((20.0160128102482)*py);
IkReal x604=((42.7008273285295)*px);
if( IKabs(((3.56338404056579)+(((-1.0)*x599*x604))+(((1.70803309314118)*sj1))+((sj0*x598))+(((-1.0)*cj0*x603))+(((-42.7008273285295)*x600))+(((-1.0)*x601*x602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.91299706431812)+(((-1.0)*x602*x603))+(((-1.0)*x598*x599))+(((-1.0)*sj0*x604))+(((-20.0160128102482)*x600))+((cj0*x601))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.56338404056579)+(((-1.0)*x599*x604))+(((1.70803309314118)*sj1))+((sj0*x598))+(((-1.0)*cj0*x603))+(((-42.7008273285295)*x600))+(((-1.0)*x601*x602))))+IKsqr(((-2.91299706431812)+(((-1.0)*x602*x603))+(((-1.0)*x598*x599))+(((-1.0)*sj0*x604))+(((-20.0160128102482)*x600))+((cj0*x601))+(((0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.56338404056579)+(((-1.0)*x599*x604))+(((1.70803309314118)*sj1))+((sj0*x598))+(((-1.0)*cj0*x603))+(((-42.7008273285295)*x600))+(((-1.0)*x601*x602))), ((-2.91299706431812)+(((-1.0)*x602*x603))+(((-1.0)*x598*x599))+(((-1.0)*sj0*x604))+(((-20.0160128102482)*x600))+((cj0*x601))+(((0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x605=IKsin(j4);
IkReal x606=IKcos(j4);
evalcond[0]=((-0.088)+(((0.009)*x605))+(((-0.0192)*x606))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0422)+(((0.009)*x606))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.0192)*x605))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x607=((20.0160128102482)*px);
IkReal x608=(cj0*sj1);
IkReal x609=(cj1*pz);
IkReal x610=((42.7008273285295)*py);
IkReal x611=(sj0*sj1);
IkReal x612=((20.0160128102482)*py);
IkReal x613=((42.7008273285295)*px);
if( IKabs(((1.18921804109955)+((sj0*x607))+(((-1.0)*cj0*x612))+(((42.7008273285295)*x609))+((x608*x613))+(((-1.70803309314118)*sj1))+((x610*x611)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.02588737656792)+(((20.0160128102482)*x609))+((cj0*x610))+((x611*x612))+((x607*x608))+(((-1.0)*sj0*x613))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.18921804109955)+((sj0*x607))+(((-1.0)*cj0*x612))+(((42.7008273285295)*x609))+((x608*x613))+(((-1.70803309314118)*sj1))+((x610*x611))))+IKsqr(((-4.02588737656792)+(((20.0160128102482)*x609))+((cj0*x610))+((x611*x612))+((x607*x608))+(((-1.0)*sj0*x613))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.18921804109955)+((sj0*x607))+(((-1.0)*cj0*x612))+(((42.7008273285295)*x609))+((x608*x613))+(((-1.70803309314118)*sj1))+((x610*x611))), ((-4.02588737656792)+(((20.0160128102482)*x609))+((cj0*x610))+((x611*x612))+((x607*x608))+(((-1.0)*sj0*x613))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x614=IKsin(j4);
IkReal x615=IKcos(j4);
evalcond[0]=((-0.088)+(((0.009)*x614))+(((-0.0192)*x615))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0134)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.0192)*x614))+((py*sj0*sj1))+(((-0.009)*x615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x616=((42.7008273285295)*cj0);
IkReal x617=(cj1*px);
IkReal x618=((20.0160128102482)*sj0);
IkReal x619=((20.0160128102482)*cj0);
IkReal x620=(pz*sj1);
IkReal x621=(cj1*py);
IkReal x622=((42.7008273285295)*sj0);
if( IKabs(((-9.72938350680544)+(((-1.70803309314118)*cj1))+((px*x618))+(((-42.7008273285295)*x620))+((x616*x617))+(((-1.0)*py*x619))+((x621*x622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.14398185214839)+(((-20.0160128102482)*x620))+(((-0.800640512409928)*cj1))+((x618*x621))+((x617*x619))+((py*x616))+(((-1.0)*px*x622)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.72938350680544)+(((-1.70803309314118)*cj1))+((px*x618))+(((-42.7008273285295)*x620))+((x616*x617))+(((-1.0)*py*x619))+((x621*x622))))+IKsqr(((-9.14398185214839)+(((-20.0160128102482)*x620))+(((-0.800640512409928)*cj1))+((x618*x621))+((x617*x619))+((py*x616))+(((-1.0)*px*x622))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.72938350680544)+(((-1.70803309314118)*cj1))+((px*x618))+(((-42.7008273285295)*x620))+((x616*x617))+(((-1.0)*py*x619))+((x621*x622))), ((-9.14398185214839)+(((-20.0160128102482)*x620))+(((-0.800640512409928)*cj1))+((x618*x621))+((x617*x619))+((py*x616))+(((-1.0)*px*x622))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x623=IKsin(j4);
IkReal x624=IKcos(j4);
IkReal x625=((1.0)*cj1);
evalcond[0]=((-0.088)+(((-0.0192)*x624))+(((0.009)*x623))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.0192)*x623))+(((0.04)*cj1))+(((-1.0)*cj0*px*x625))+((pz*sj1))+(((-1.0)*py*sj0*x625))+(((0.009)*x624)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x626=((42.7008273285295)*py);
IkReal x627=((20.0160128102482)*sj0);
IkReal x628=(pz*sj1);
IkReal x629=(cj0*cj1*px);
if( IKabs(((14.4819855884708)+(((-20.0160128102482)*cj0*py))+(((1.70803309314118)*cj1))+(((-1.0)*cj1*sj0*x626))+(((-42.7008273285295)*x629))+(((42.7008273285295)*x628))+((px*x627)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.20509741126234)+(((-20.0160128102482)*x629))+(((0.800640512409928)*cj1))+(((20.0160128102482)*x628))+((cj0*x626))+(((-1.0)*cj1*py*x627))+(((-42.7008273285295)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((14.4819855884708)+(((-20.0160128102482)*cj0*py))+(((1.70803309314118)*cj1))+(((-1.0)*cj1*sj0*x626))+(((-42.7008273285295)*x629))+(((42.7008273285295)*x628))+((px*x627))))+IKsqr(((2.20509741126234)+(((-20.0160128102482)*x629))+(((0.800640512409928)*cj1))+(((20.0160128102482)*x628))+((cj0*x626))+(((-1.0)*cj1*py*x627))+(((-42.7008273285295)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((14.4819855884708)+(((-20.0160128102482)*cj0*py))+(((1.70803309314118)*cj1))+(((-1.0)*cj1*sj0*x626))+(((-42.7008273285295)*x629))+(((42.7008273285295)*x628))+((px*x627))), ((2.20509741126234)+(((-20.0160128102482)*x629))+(((0.800640512409928)*cj1))+(((20.0160128102482)*x628))+((cj0*x626))+(((-1.0)*cj1*py*x627))+(((-42.7008273285295)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x630=IKsin(j4);
IkReal x631=IKcos(j4);
IkReal x632=((1.0)*cj1);
evalcond[0]=((-0.088)+(((-0.0192)*x631))+(((0.009)*x630))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-0.0192)*x630))+(((-0.009)*x631))+((pz*sj1))+(((-1.0)*cj0*px*x632))+(((-1.0)*py*sj0*x632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x633=((75000.0)*cj1);
IkReal x634=(py*sj0);
IkReal x635=(pz*sj1);
IkReal x636=((160000.0)*px);
IkReal x637=(sj0*sj3);
IkReal x638=(cj0*py*sj3);
CheckValue<IkReal> x639 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((-6400.0)*cj1))+(((8904.0)*sj3))+(((160000.0)*cj1*x634))+(((-75000.0)*x638))+(((-160000.0)*x635))+((cj0*cj1*x636))+(((75000.0)*px*x637)))),IkReal(((-21262.5)+((cj0*px*x633))+(((-75000.0)*x635))+(((-3000.0)*cj1))+(((160000.0)*x638))+(((-1.0)*x636*x637))+(((-13000.0)*sj3))+((x633*x634))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x639.valid){
continue;
}
CheckValue<IkReal> x640=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x639.value)+(((1.5707963267949)*(x640.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x641=IKsin(j4);
IkReal x642=IKcos(j4);
IkReal x643=(cj0*px);
IkReal x644=((1.0)*cj1);
IkReal x645=(py*sj0);
IkReal x646=((0.0192)*x641);
IkReal x647=((0.009)*x642);
evalcond[0]=((-0.088)+(((0.009)*x641))+(((-0.0192)*x642))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0278)+((sj1*x643))+((sj1*x645))+(((-0.3862)*sj3))+((cj1*pz))+((cj3*x646))+((cj3*x647))+(((-0.04)*sj1))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x644*x645))+(((-1.0)*x643*x644))+((sj3*x646))+((sj3*x647))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x648=((160000.0)*cj3);
IkReal x649=(cj0*py);
IkReal x650=(px*sj0);
IkReal x651=(cj1*pz);
IkReal x652=((75000.0)*cj3);
IkReal x653=(cj0*px*sj1);
IkReal x654=(py*sj0*sj1);
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(((4448.0)+(((61792.0)*sj3))+(((-160000.0)*x651))+(((-160000.0)*x654))+(((-160000.0)*x653))+(((8904.0)*cj3))+(((6400.0)*sj1))+(((-1.0)*x649*x652))+((x650*x652)))),IkReal(((2085.0)+(((-75000.0)*x651))+(((-75000.0)*x654))+(((-75000.0)*x653))+((x648*x649))+(((3000.0)*sj1))+(((-1.0)*x648*x650))+(((28965.0)*sj3))+(((-13000.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
CheckValue<IkReal> x656=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x655.value)+(((1.5707963267949)*(x656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x657=IKsin(j4);
IkReal x658=IKcos(j4);
IkReal x659=(cj0*px);
IkReal x660=((1.0)*cj1);
IkReal x661=(py*sj0);
IkReal x662=((0.0192)*x657);
IkReal x663=((0.009)*x658);
evalcond[0]=((-0.088)+(((0.009)*x657))+(((-0.0192)*x658))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0278)+((cj3*x663))+((cj3*x662))+((sj1*x661))+(((-0.3862)*sj3))+((sj1*x659))+((cj1*pz))+(((-0.04)*sj1))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x659*x660))+(((-1.0)*x660*x661))+(((-0.0144)*sj3))+((pz*sj1))+((sj3*x662))+((sj3*x663)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x664=(py*sj2);
IkReal x665=((20.0160128102482)*sj1);
IkReal x666=((42.7008273285295)*cj2);
IkReal x667=(px*sj0);
IkReal x668=(cj1*pz);
IkReal x669=(cj2*sj1);
IkReal x670=((42.7008273285295)*cj0);
IkReal x671=((20.0160128102482)*sj2);
IkReal x672=((42.7008273285295)*sj2);
IkReal x673=(cj0*px);
IkReal x674=(sj0*sj1);
IkReal x675=(sj1*sj2);
IkReal x676=((20.0160128102482)*cj2);
IkReal x677=(cj0*py);
if( IKabs(((2.00213504136643)+((x666*x668))+(((-1.0)*sj0*x664*x665))+(((-1.56124899919936)*cj2))+((py*x666*x674))+((x664*x670))+((sj1*x666*x673))+((x676*x677))+(((-1.0)*x668*x671))+(((0.800640512409928)*x675))+(((-1.0)*x667*x672))+(((-1.0)*x667*x676))+(((-1.70803309314118)*x669))+(((-1.0)*sj2*x665*x673))+(((-3.3306645316253)*sj2)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.417667467307179)+((x666*x667))+(((-0.800640512409928)*x669))+(((-1.70803309314118)*x675))+(((42.7008273285295)*x664*x674))+((cj2*x665*x673))+(((-1.0)*x667*x671))+(((-1.0)*x666*x677))+(((-1.56124899919936)*sj2))+((x668*x672))+((x668*x676))+((px*x670*x675))+(((3.3306645316253)*cj2))+((cj2*py*sj0*x665))+(((20.0160128102482)*cj0*x664)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.00213504136643)+((x666*x668))+(((-1.0)*sj0*x664*x665))+(((-1.56124899919936)*cj2))+((py*x666*x674))+((x664*x670))+((sj1*x666*x673))+((x676*x677))+(((-1.0)*x668*x671))+(((0.800640512409928)*x675))+(((-1.0)*x667*x672))+(((-1.0)*x667*x676))+(((-1.70803309314118)*x669))+(((-1.0)*sj2*x665*x673))+(((-3.3306645316253)*sj2))))+IKsqr(((0.417667467307179)+((x666*x667))+(((-0.800640512409928)*x669))+(((-1.70803309314118)*x675))+(((42.7008273285295)*x664*x674))+((cj2*x665*x673))+(((-1.0)*x667*x671))+(((-1.0)*x666*x677))+(((-1.56124899919936)*sj2))+((x668*x672))+((x668*x676))+((px*x670*x675))+(((3.3306645316253)*cj2))+((cj2*py*sj0*x665))+(((20.0160128102482)*cj0*x664))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.00213504136643)+((x666*x668))+(((-1.0)*sj0*x664*x665))+(((-1.56124899919936)*cj2))+((py*x666*x674))+((x664*x670))+((sj1*x666*x673))+((x676*x677))+(((-1.0)*x668*x671))+(((0.800640512409928)*x675))+(((-1.0)*x667*x672))+(((-1.0)*x667*x676))+(((-1.70803309314118)*x669))+(((-1.0)*sj2*x665*x673))+(((-3.3306645316253)*sj2))), ((0.417667467307179)+((x666*x667))+(((-0.800640512409928)*x669))+(((-1.70803309314118)*x675))+(((42.7008273285295)*x664*x674))+((cj2*x665*x673))+(((-1.0)*x667*x671))+(((-1.0)*x666*x677))+(((-1.56124899919936)*sj2))+((x668*x672))+((x668*x676))+((px*x670*x675))+(((3.3306645316253)*cj2))+((cj2*py*sj0*x665))+(((20.0160128102482)*cj0*x664))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x678=IKcos(j4);
IkReal x679=IKsin(j4);
IkReal x680=((0.0192)*cj2);
IkReal x681=((0.009)*cj2);
IkReal x682=(sj2*x679);
IkReal x683=(sj2*x678);
evalcond[0]=((-0.078)+((x678*x680))+(((-0.0192)*x682))+(((0.01)*cj2))+(((-0.009)*x683))+(((-1.0)*x679*x681))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0422)*sj2)));
evalcond[1]=((((-0.0192)*x683))+((cj1*pz))+(((-1.0)*x679*x680))+(((-1.0)*x678*x681))+((cj0*px*sj1))+(((-0.01)*sj2))+(((-0.04)*sj1))+(((0.009)*x682))+(((0.0422)*cj2))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x684=(py*sj2);
IkReal x685=((20.0160128102482)*sj1);
IkReal x686=((42.7008273285295)*cj2);
IkReal x687=(px*sj0);
IkReal x688=(cj1*pz);
IkReal x689=(cj2*sj1);
IkReal x690=((42.7008273285295)*cj0);
IkReal x691=((20.0160128102482)*sj2);
IkReal x692=((42.7008273285295)*sj2);
IkReal x693=(cj0*px);
IkReal x694=(sj0*sj1);
IkReal x695=(sj1*sj2);
IkReal x696=((20.0160128102482)*cj2);
IkReal x697=(cj0*py);
if( IKabs(((-0.372030958099813)+(((-1.0)*x687*x696))+(((-1.0)*x684*x690))+((x687*x692))+((x696*x697))+(((1.70803309314118)*x689))+(((-1.56124899919936)*cj2))+(((3.3306645316253)*sj2))+(((-1.0)*sj0*x684*x685))+(((-1.0)*x686*x688))+(((-1.0)*x688*x691))+(((-1.0)*sj2*x685*x693))+(((-1.0)*sj1*x686*x693))+(((-1.0)*py*x686*x694))+(((0.800640512409928)*x695)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.695222844942621)+(((-1.70803309314118)*x695))+((x686*x687))+((x688*x692))+((x687*x691))+(((42.7008273285295)*x684*x694))+(((-1.0)*cj2*py*sj0*x685))+(((0.800640512409928)*x689))+(((-1.0)*x688*x696))+((px*x690*x695))+(((-1.0)*x686*x697))+(((3.3306645316253)*cj2))+(((1.56124899919936)*sj2))+(((-1.0)*cj2*x685*x693))+(((-20.0160128102482)*cj0*x684)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.372030958099813)+(((-1.0)*x687*x696))+(((-1.0)*x684*x690))+((x687*x692))+((x696*x697))+(((1.70803309314118)*x689))+(((-1.56124899919936)*cj2))+(((3.3306645316253)*sj2))+(((-1.0)*sj0*x684*x685))+(((-1.0)*x686*x688))+(((-1.0)*x688*x691))+(((-1.0)*sj2*x685*x693))+(((-1.0)*sj1*x686*x693))+(((-1.0)*py*x686*x694))+(((0.800640512409928)*x695))))+IKsqr(((-0.695222844942621)+(((-1.70803309314118)*x695))+((x686*x687))+((x688*x692))+((x687*x691))+(((42.7008273285295)*x684*x694))+(((-1.0)*cj2*py*sj0*x685))+(((0.800640512409928)*x689))+(((-1.0)*x688*x696))+((px*x690*x695))+(((-1.0)*x686*x697))+(((3.3306645316253)*cj2))+(((1.56124899919936)*sj2))+(((-1.0)*cj2*x685*x693))+(((-20.0160128102482)*cj0*x684))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.372030958099813)+(((-1.0)*x687*x696))+(((-1.0)*x684*x690))+((x687*x692))+((x696*x697))+(((1.70803309314118)*x689))+(((-1.56124899919936)*cj2))+(((3.3306645316253)*sj2))+(((-1.0)*sj0*x684*x685))+(((-1.0)*x686*x688))+(((-1.0)*x688*x691))+(((-1.0)*sj2*x685*x693))+(((-1.0)*sj1*x686*x693))+(((-1.0)*py*x686*x694))+(((0.800640512409928)*x695))), ((-0.695222844942621)+(((-1.70803309314118)*x695))+((x686*x687))+((x688*x692))+((x687*x691))+(((42.7008273285295)*x684*x694))+(((-1.0)*cj2*py*sj0*x685))+(((0.800640512409928)*x689))+(((-1.0)*x688*x696))+((px*x690*x695))+(((-1.0)*x686*x697))+(((3.3306645316253)*cj2))+(((1.56124899919936)*sj2))+(((-1.0)*cj2*x685*x693))+(((-20.0160128102482)*cj0*x684))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x698=IKcos(j4);
IkReal x699=IKsin(j4);
IkReal x700=((0.0192)*sj2);
IkReal x701=((0.0192)*cj2);
IkReal x702=((0.009)*sj2);
IkReal x703=((0.009)*cj2);
evalcond[0]=((-0.078)+(((0.01)*cj2))+(((-1.0)*x699*x703))+((x698*x701))+((x698*x702))+(((-1.0)*px*sj0))+((cj0*py))+((x699*x700))+(((0.0134)*sj2)));
evalcond[1]=((((0.0134)*cj2))+((cj1*pz))+((cj0*px*sj1))+(((-0.01)*sj2))+(((-0.04)*sj1))+((x698*x703))+(((-1.0)*x698*x700))+((py*sj0*sj1))+((x699*x701))+((x699*x702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=cj2;
j4eval[1]=IKsign(cj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x704=(cj0*px);
IkReal x705=((42.7008273285295)*cj1);
IkReal x706=((20.0160128102482)*sj1);
IkReal x707=((20.0160128102482)*cj1);
IkReal x708=((42.7008273285295)*sj1);
IkReal x709=(py*sj0);
if( IKabs(((-11.2906325060048)+(((-1.0)*pz*x707))+(((-1.0)*pz*x708))+(((-1.0)*x706*x709))+(((-1.70803309314118)*cj1))+(((-1.0)*x704*x706))+((x704*x705))+(((0.800640512409928)*sj1))+((x705*x709)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+(((-1.0)*pz*x706))+(((-0.800640512409928)*cj1))+((x707*x709))+(((-1.70803309314118)*sj1))+((x704*x708))+((x704*x707))+((x708*x709))+((pz*x705)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-11.2906325060048)+(((-1.0)*pz*x707))+(((-1.0)*pz*x708))+(((-1.0)*x706*x709))+(((-1.70803309314118)*cj1))+(((-1.0)*x704*x706))+((x704*x705))+(((0.800640512409928)*sj1))+((x705*x709))))+IKsqr(((-5.81331732052309)+(((-1.0)*pz*x706))+(((-0.800640512409928)*cj1))+((x707*x709))+(((-1.70803309314118)*sj1))+((x704*x708))+((x704*x707))+((x708*x709))+((pz*x705))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-11.2906325060048)+(((-1.0)*pz*x707))+(((-1.0)*pz*x708))+(((-1.0)*x706*x709))+(((-1.70803309314118)*cj1))+(((-1.0)*x704*x706))+((x704*x705))+(((0.800640512409928)*sj1))+((x705*x709))), ((-5.81331732052309)+(((-1.0)*pz*x706))+(((-0.800640512409928)*cj1))+((x707*x709))+(((-1.70803309314118)*sj1))+((x704*x708))+((x704*x707))+((x708*x709))+((pz*x705))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x710=IKsin(j4);
IkReal x711=IKcos(j4);
IkReal x712=(cj0*px);
IkReal x713=(py*sj0);
IkReal x714=((1.0)*cj1);
evalcond[0]=((-0.01)+((cj1*pz))+(((-0.0192)*x711))+(((-0.04)*sj1))+((sj1*x712))+((sj1*x713))+(((0.009)*x710)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((0.0192)*x710))+(((-1.0)*x712*x714))+(((0.009)*x711))+((pz*sj1))+(((-1.0)*x713*x714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x715=(cj0*px);
IkReal x716=((42.7008273285295)*cj1);
IkReal x717=((20.0160128102482)*sj1);
IkReal x718=((20.0160128102482)*cj1);
IkReal x719=((42.7008273285295)*sj1);
IkReal x720=(py*sj0);
if( IKabs(((-11.2906325060048)+(((-1.0)*pz*x719))+((x715*x717))+((x715*x716))+(((-1.70803309314118)*cj1))+((x717*x720))+((pz*x718))+((x716*x720))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+(((-1.0)*pz*x717))+(((-1.0)*pz*x716))+((x715*x718))+(((-0.800640512409928)*cj1))+((x718*x720))+(((1.70803309314118)*sj1))+(((-1.0)*x719*x720))+(((-1.0)*x715*x719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-11.2906325060048)+(((-1.0)*pz*x719))+((x715*x717))+((x715*x716))+(((-1.70803309314118)*cj1))+((x717*x720))+((pz*x718))+((x716*x720))+(((-0.800640512409928)*sj1))))+IKsqr(((-5.81331732052309)+(((-1.0)*pz*x717))+(((-1.0)*pz*x716))+((x715*x718))+(((-0.800640512409928)*cj1))+((x718*x720))+(((1.70803309314118)*sj1))+(((-1.0)*x719*x720))+(((-1.0)*x715*x719))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-11.2906325060048)+(((-1.0)*pz*x719))+((x715*x717))+((x715*x716))+(((-1.70803309314118)*cj1))+((x717*x720))+((pz*x718))+((x716*x720))+(((-0.800640512409928)*sj1))), ((-5.81331732052309)+(((-1.0)*pz*x717))+(((-1.0)*pz*x716))+((x715*x718))+(((-0.800640512409928)*cj1))+((x718*x720))+(((1.70803309314118)*sj1))+(((-1.0)*x719*x720))+(((-1.0)*x715*x719))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x721=IKsin(j4);
IkReal x722=IKcos(j4);
IkReal x723=(cj0*px);
IkReal x724=(py*sj0);
IkReal x725=((1.0)*cj1);
evalcond[0]=((0.01)+((cj1*pz))+(((0.0192)*x722))+(((-0.04)*sj1))+((sj1*x724))+((sj1*x723))+(((-0.009)*x721)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*x724*x725))+(((-1.0)*x723*x725))+(((0.0192)*x721))+(((0.009)*x722))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x726=(cj1*sj2);
IkReal x727=(py*sj0);
IkReal x728=((75000.0)*pz);
IkReal x729=(cj0*px);
IkReal x730=(sj1*sj2);
IkReal x731=((75000.0)*sj1);
IkReal x732=((160000.0)*sj1);
IkReal x733=((160000.0)*pz);
CheckValue<IkReal> x734 = IKatan2WithCheck(IkReal(((((-1.0)*x727*x731))+(((-6400.0)*x726))+(((-31050.0)*cj2))+(((160000.0)*x726*x729))+(((160000.0)*x726*x727))+(((-1.0)*cj1*x728))+(((-1.0)*x730*x733))+(((3000.0)*sj1))+(((-42306.0)*sj2))+(((-1.0)*x729*x731)))),IkReal(((((-6400.0)*sj1))+(((75000.0)*x726*x727))+(((75000.0)*x726*x729))+((x727*x732))+(((-21782.5)*sj2))+((x729*x732))+(((-3000.0)*x726))+(((-1.0)*x728*x730))+(((66240.0)*cj2))+((cj1*x733)))),IKFAST_ATAN2_MAGTHRESH);
if(!x734.valid){
continue;
}
CheckValue<IkReal> x735=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x734.value)+(((1.5707963267949)*(x735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x736=IKsin(j4);
IkReal x737=IKcos(j4);
IkReal x738=(cj0*px);
IkReal x739=(py*sj0);
IkReal x740=((1.0)*cj1);
IkReal x741=((0.009)*x736);
IkReal x742=((0.0192)*x737);
evalcond[0]=((-0.078)+(((-1.0)*cj2*x741))+(((0.414)*sj2))+(((0.01)*cj2))+((cj2*x742))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((0.0192)*x736))+(((-1.0)*x738*x740))+(((0.009)*x737))+((pz*sj1))+(((-1.0)*x739*x740)));
evalcond[2]=(((cj1*pz))+(((-0.01)*sj2))+(((-0.04)*sj1))+(((0.414)*cj2))+((sj2*x741))+((sj1*x738))+((sj1*x739))+(((-1.0)*sj2*x742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x743=((160000.0)*px);
IkReal x744=(cj0*py);
IkReal x745=(cj1*cj2);
IkReal x746=((75000.0)*px);
IkReal x747=(cj2*pz*sj1);
IkReal x748=(py*sj0*x745);
CheckValue<IkReal> x749=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x749.valid){
continue;
}
CheckValue<IkReal> x750 = IKatan2WithCheck(IkReal(((-5850.0)+(((75000.0)*x744))+(((31050.0)*sj2))+((cj0*x743*x745))+(((-6400.0)*x745))+(((-160000.0)*x747))+(((160000.0)*x748))+(((-42306.0)*cj2))+(((-1.0)*sj0*x746)))),IkReal(((12480.0)+(((75000.0)*x748))+(((-21782.5)*cj2))+(((-3000.0)*x745))+((sj0*x743))+(((-75000.0)*x747))+(((-160000.0)*x744))+((cj0*x745*x746))+(((-66240.0)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x749.value)))+(x750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x751=IKsin(j4);
IkReal x752=IKcos(j4);
IkReal x753=(cj0*px);
IkReal x754=(py*sj0);
IkReal x755=((1.0)*cj1);
IkReal x756=((0.009)*x751);
IkReal x757=((0.0192)*x752);
evalcond[0]=((-0.078)+(((0.414)*sj2))+(((-1.0)*cj2*x756))+(((0.01)*cj2))+((cj2*x757))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*x754*x755))+(((-1.0)*x753*x755))+(((0.0192)*x751))+((pz*sj1))+(((0.009)*x752)));
evalcond[2]=((((-1.0)*sj2*x757))+((sj1*x753))+((sj1*x754))+((cj1*pz))+(((-0.01)*sj2))+(((-0.04)*sj1))+(((0.414)*cj2))+((sj2*x756)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=cj2;
j4eval[1]=IKsign(cj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x758=(cj0*px);
IkReal x759=((42.7008273285295)*cj1);
IkReal x760=((20.0160128102482)*sj1);
IkReal x761=((20.0160128102482)*cj1);
IkReal x762=((42.7008273285295)*sj1);
IkReal x763=(py*sj0);
if( IKabs(((12.9207365892714)+(((-1.0)*x758*x760))+(((1.70803309314118)*cj1))+((pz*x762))+(((-1.0)*x758*x759))+(((0.800640512409928)*sj1))+(((-1.0)*x760*x763))+(((-1.0)*x759*x763))+(((-1.0)*pz*x761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((-1.0)*x758*x761))+(((0.800640512409928)*cj1))+((pz*x759))+(((-1.70803309314118)*sj1))+((x758*x762))+((x762*x763))+((pz*x760))+(((-1.0)*x761*x763)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.9207365892714)+(((-1.0)*x758*x760))+(((1.70803309314118)*cj1))+((pz*x762))+(((-1.0)*x758*x759))+(((0.800640512409928)*sj1))+(((-1.0)*x760*x763))+(((-1.0)*x759*x763))+(((-1.0)*pz*x761))))+IKsqr(((5.53576194288764)+(((-1.0)*x758*x761))+(((0.800640512409928)*cj1))+((pz*x759))+(((-1.70803309314118)*sj1))+((x758*x762))+((x762*x763))+((pz*x760))+(((-1.0)*x761*x763))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((12.9207365892714)+(((-1.0)*x758*x760))+(((1.70803309314118)*cj1))+((pz*x762))+(((-1.0)*x758*x759))+(((0.800640512409928)*sj1))+(((-1.0)*x760*x763))+(((-1.0)*x759*x763))+(((-1.0)*pz*x761))), ((5.53576194288764)+(((-1.0)*x758*x761))+(((0.800640512409928)*cj1))+((pz*x759))+(((-1.70803309314118)*sj1))+((x758*x762))+((x762*x763))+((pz*x760))+(((-1.0)*x761*x763))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x764=IKsin(j4);
IkReal x765=IKcos(j4);
IkReal x766=(cj0*px);
IkReal x767=(py*sj0);
IkReal x768=((1.0)*cj1);
evalcond[0]=((-0.01)+((sj1*x767))+((sj1*x766))+(((0.009)*x764))+((cj1*pz))+(((-0.04)*sj1))+(((-0.0192)*x765)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-0.009)*x765))+(((-1.0)*x766*x768))+(((-1.0)*x767*x768))+(((-0.0192)*x764))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x769=(cj0*px);
IkReal x770=((42.7008273285295)*cj1);
IkReal x771=((20.0160128102482)*sj1);
IkReal x772=((20.0160128102482)*cj1);
IkReal x773=((42.7008273285295)*sj1);
IkReal x774=(py*sj0);
if( IKabs(((12.9207365892714)+((pz*x772))+((pz*x773))+((x771*x774))+(((1.70803309314118)*cj1))+((x769*x771))+(((-1.0)*x769*x770))+(((-1.0)*x770*x774))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+((pz*x771))+(((0.800640512409928)*cj1))+(((-1.0)*pz*x770))+(((-1.0)*x769*x773))+(((-1.0)*x769*x772))+(((1.70803309314118)*sj1))+(((-1.0)*x772*x774))+(((-1.0)*x773*x774)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.9207365892714)+((pz*x772))+((pz*x773))+((x771*x774))+(((1.70803309314118)*cj1))+((x769*x771))+(((-1.0)*x769*x770))+(((-1.0)*x770*x774))+(((-0.800640512409928)*sj1))))+IKsqr(((5.53576194288764)+((pz*x771))+(((0.800640512409928)*cj1))+(((-1.0)*pz*x770))+(((-1.0)*x769*x773))+(((-1.0)*x769*x772))+(((1.70803309314118)*sj1))+(((-1.0)*x772*x774))+(((-1.0)*x773*x774))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((12.9207365892714)+((pz*x772))+((pz*x773))+((x771*x774))+(((1.70803309314118)*cj1))+((x769*x771))+(((-1.0)*x769*x770))+(((-1.0)*x770*x774))+(((-0.800640512409928)*sj1))), ((5.53576194288764)+((pz*x771))+(((0.800640512409928)*cj1))+(((-1.0)*pz*x770))+(((-1.0)*x769*x773))+(((-1.0)*x769*x772))+(((1.70803309314118)*sj1))+(((-1.0)*x772*x774))+(((-1.0)*x773*x774))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x775=IKsin(j4);
IkReal x776=IKcos(j4);
IkReal x777=(cj0*px);
IkReal x778=(py*sj0);
IkReal x779=((1.0)*cj1);
evalcond[0]=((0.01)+((cj1*pz))+((sj1*x778))+((sj1*x777))+(((-0.04)*sj1))+(((-0.009)*x775))+(((0.0192)*x776)));
evalcond[1]=((0.2979)+(((-0.0192)*x775))+(((-1.0)*x778*x779))+(((0.04)*cj1))+(((-0.009)*x776))+((pz*sj1))+(((-1.0)*x777*x779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x780=(cj1*sj2);
IkReal x781=(py*sj0);
IkReal x782=(cj1*pz);
IkReal x783=(cj0*px);
IkReal x784=((75000.0)*sj1);
IkReal x785=(pz*sj2);
IkReal x786=((160000.0)*sj1);
CheckValue<IkReal> x787 = IKatan2WithCheck(IkReal(((((-160000.0)*x780*x783))+(((-160000.0)*x780*x781))+(((48414.0)*sj2))+(((-75000.0)*x782))+((x785*x786))+(((-1.0)*x781*x784))+(((26880.0)*cj2))+(((6400.0)*x780))+(((3000.0)*sj1))+(((-1.0)*x783*x784)))),IkReal((((x781*x786))+(((3000.0)*x780))+(((-6400.0)*sj1))+(((160000.0)*x782))+((x783*x786))+((x784*x785))+(((-57344.0)*cj2))+(((-75000.0)*x780*x781))+(((-75000.0)*x780*x783))+(((20742.5)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x787.valid){
continue;
}
CheckValue<IkReal> x788=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x787.value)+(((1.5707963267949)*(x788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x789=IKsin(j4);
IkReal x790=IKcos(j4);
IkReal x791=(cj0*px);
IkReal x792=(py*sj0);
IkReal x793=((1.0)*cj1);
IkReal x794=((0.009)*x789);
IkReal x795=((0.0192)*x790);
evalcond[0]=((-0.078)+(((-0.3584)*sj2))+(((-1.0)*cj2*x794))+(((0.01)*cj2))+(((-1.0)*px*sj0))+((cj0*py))+((cj2*x795)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-1.0)*x792*x793))+(((-0.009)*x790))+(((-1.0)*x791*x793))+((pz*sj1))+(((-0.0192)*x789)));
evalcond[2]=(((sj1*x792))+((sj1*x791))+((cj1*pz))+(((-0.01)*sj2))+(((-0.3584)*cj2))+(((-0.04)*sj1))+(((-1.0)*sj2*x795))+((sj2*x794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x796=((160000.0)*cj0);
IkReal x797=(cj1*cj2);
IkReal x798=(px*sj0);
IkReal x799=((75000.0)*cj0);
IkReal x800=(cj2*pz*sj1);
IkReal x801=(py*sj0*x797);
CheckValue<IkReal> x802=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x802.valid){
continue;
}
CheckValue<IkReal> x803 = IKatan2WithCheck(IkReal(((-5850.0)+(((-160000.0)*x801))+(((-75000.0)*x798))+((py*x799))+(((6400.0)*x797))+(((-1.0)*px*x796*x797))+(((160000.0)*x800))+(((-26880.0)*sj2))+(((48414.0)*cj2)))),IkReal(((12480.0)+(((3000.0)*x797))+(((160000.0)*x798))+(((75000.0)*x800))+(((20742.5)*cj2))+(((57344.0)*sj2))+(((-75000.0)*x801))+(((-1.0)*py*x796))+(((-1.0)*px*x797*x799)))),IKFAST_ATAN2_MAGTHRESH);
if(!x803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x802.value)))+(x803.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x804=IKsin(j4);
IkReal x805=IKcos(j4);
IkReal x806=(cj0*px);
IkReal x807=(py*sj0);
IkReal x808=((1.0)*cj1);
IkReal x809=((0.009)*x804);
IkReal x810=((0.0192)*x805);
evalcond[0]=((-0.078)+(((-0.3584)*sj2))+(((0.01)*cj2))+(((-1.0)*cj2*x809))+(((-1.0)*px*sj0))+((cj0*py))+((cj2*x810)));
evalcond[1]=((0.2979)+(((-0.0192)*x804))+(((0.04)*cj1))+(((-1.0)*x807*x808))+(((-1.0)*x806*x808))+(((-0.009)*x805))+((pz*sj1)));
evalcond[2]=(((sj2*x809))+((cj1*pz))+(((-0.01)*sj2))+(((-0.3584)*cj2))+(((-0.04)*sj1))+((sj1*x806))+((sj1*x807))+(((-1.0)*sj2*x810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x811=((20.0160128102482)*px);
IkReal x812=(cj0*sj1);
IkReal x813=(cj1*pz);
IkReal x814=((42.7008273285295)*py);
IkReal x815=(sj0*sj1);
IkReal x816=((20.0160128102482)*py);
IkReal x817=((42.7008273285295)*px);
if( IKabs(((-1.32852949025887)+((cj0*x814))+(((-20.0160128102482)*x813))+(((-1.0)*x811*x812))+(((-1.0)*sj0*x817))+(((-1.0)*x815*x816))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14358153189218)+((cj0*x816))+((x812*x817))+(((-1.70803309314118)*sj1))+(((-1.0)*sj0*x811))+((x814*x815))+(((42.7008273285295)*x813)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.32852949025887)+((cj0*x814))+(((-20.0160128102482)*x813))+(((-1.0)*x811*x812))+(((-1.0)*sj0*x817))+(((-1.0)*x815*x816))+(((0.800640512409928)*sj1))))+IKsqr(((-1.14358153189218)+((cj0*x816))+((x812*x817))+(((-1.70803309314118)*sj1))+(((-1.0)*sj0*x811))+((x814*x815))+(((42.7008273285295)*x813))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.32852949025887)+((cj0*x814))+(((-20.0160128102482)*x813))+(((-1.0)*x811*x812))+(((-1.0)*sj0*x817))+(((-1.0)*x815*x816))+(((0.800640512409928)*sj1))), ((-1.14358153189218)+((cj0*x816))+((x812*x817))+(((-1.70803309314118)*sj1))+(((-1.0)*sj0*x811))+((x814*x815))+(((42.7008273285295)*x813))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x818=IKsin(j4);
IkReal x819=IKcos(j4);
evalcond[0]=((-0.0358)+(((-0.009)*x819))+(((-0.0192)*x818))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.0192)*x819))+(((-0.04)*sj1))+(((0.009)*x818))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x820=((20.0160128102482)*px);
IkReal x821=(cj0*sj1);
IkReal x822=(cj1*pz);
IkReal x823=((42.7008273285295)*py);
IkReal x824=(sj0*sj1);
IkReal x825=((20.0160128102482)*py);
IkReal x826=((42.7008273285295)*px);
if( IKabs(((2.95863357352549)+(((-20.0160128102482)*x822))+((sj0*x826))+(((-1.0)*cj0*x823))+(((-1.0)*x824*x825))+(((-1.0)*x820*x821))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.866026154256739)+((x821*x826))+(((-1.70803309314118)*sj1))+((sj0*x820))+(((-1.0)*cj0*x825))+(((42.7008273285295)*x822))+((x823*x824)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.95863357352549)+(((-20.0160128102482)*x822))+((sj0*x826))+(((-1.0)*cj0*x823))+(((-1.0)*x824*x825))+(((-1.0)*x820*x821))+(((0.800640512409928)*sj1))))+IKsqr(((0.866026154256739)+((x821*x826))+(((-1.70803309314118)*sj1))+((sj0*x820))+(((-1.0)*cj0*x825))+(((42.7008273285295)*x822))+((x823*x824))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.95863357352549)+(((-20.0160128102482)*x822))+((sj0*x826))+(((-1.0)*cj0*x823))+(((-1.0)*x824*x825))+(((-1.0)*x820*x821))+(((0.800640512409928)*sj1))), ((0.866026154256739)+((x821*x826))+(((-1.70803309314118)*sj1))+((sj0*x820))+(((-1.0)*cj0*x825))+(((42.7008273285295)*x822))+((x823*x824))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x827=IKsin(j4);
IkReal x828=IKcos(j4);
evalcond[0]=((-0.0646)+(((0.0192)*x827))+(((0.009)*x828))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.0192)*x828))+(((0.009)*x827))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x829=(py*sj0);
IkReal x830=((75000.0)*cj1);
IkReal x831=(pz*sj1);
IkReal x832=((160000.0)*cj1);
IkReal x833=(pz*sj3);
IkReal x834=(cj0*px);
IkReal x835=(sj1*sj3);
CheckValue<IkReal> x836=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x836.valid){
continue;
}
CheckValue<IkReal> x837 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((-75000.0)*x829*x835))+((x832*x834))+(((-6400.0)*cj1))+(((-160000.0)*x831))+(((3054.0)*sj3))+(((-1.0)*x830*x833))+(((3000.0)*x835))+((x829*x832))+(((-75000.0)*x834*x835)))),IkReal(((-21262.5)+(((-75000.0)*x831))+((x832*x833))+(((160000.0)*x834*x835))+(((-3000.0)*cj1))+(((-6400.0)*x835))+(((160000.0)*x829*x835))+((x829*x830))+((x830*x834))+(((-520.0)*sj3))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x837.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x836.value)))+(x837.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x838=IKsin(j4);
IkReal x839=IKcos(j4);
IkReal x840=(cj0*px);
IkReal x841=((1.0)*cj1);
IkReal x842=(py*sj0);
IkReal x843=((0.0192)*x838);
IkReal x844=((0.009)*x839);
evalcond[0]=((-0.01)+(((0.009)*x838))+((cj1*pz))+(((-0.04)*sj1))+(((-0.0192)*x839))+((sj1*x842))+((sj1*x840)));
evalcond[1]=((-0.0502)+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3))+(((-1.0)*cj3*x843))+(((-1.0)*cj3*x844)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x841*x842))+(((-1.0)*x840*x841))+(((-0.0144)*sj3))+((pz*sj1))+((sj3*x843))+((sj3*x844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x845=(px*sj0);
IkReal x846=((160000.0)*cj0);
IkReal x847=((160000.0)*cj3);
IkReal x848=(cj1*pz);
IkReal x849=(cj3*sj1);
IkReal x850=((75000.0)*cj0);
IkReal x851=(py*sj0);
CheckValue<IkReal> x852 = IKatan2WithCheck(IkReal(((-8032.0)+(((3054.0)*cj3))+(((-75000.0)*cj3*x848))+(((61792.0)*sj3))+(((-160000.0)*x845))+(((-75000.0)*x849*x851))+(((3000.0)*x849))+((py*x846))+(((-1.0)*px*x849*x850)))),IkReal(((-3765.0)+((px*x846*x849))+(((-6400.0)*x849))+((sj1*x847*x851))+((x847*x848))+(((-520.0)*cj3))+(((28965.0)*sj3))+((py*x850))+(((-75000.0)*x845)))),IKFAST_ATAN2_MAGTHRESH);
if(!x852.valid){
continue;
}
CheckValue<IkReal> x853=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x852.value)+(((1.5707963267949)*(x853.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x854=IKsin(j4);
IkReal x855=IKcos(j4);
IkReal x856=(cj0*px);
IkReal x857=((1.0)*cj1);
IkReal x858=(py*sj0);
IkReal x859=((0.0192)*x854);
IkReal x860=((0.009)*x855);
evalcond[0]=((-0.01)+(((-0.0192)*x855))+((sj1*x858))+((sj1*x856))+((cj1*pz))+(((0.009)*x854))+(((-0.04)*sj1)));
evalcond[1]=((-0.0502)+(((-1.0)*cj3*x860))+(((-1.0)*cj3*x859))+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+((sj3*x860))+(((0.04)*cj1))+((sj3*x859))+(((-0.0144)*sj3))+(((-1.0)*x856*x857))+((pz*sj1))+(((-1.0)*x857*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x861=((20.0160128102482)*px);
IkReal x862=(cj0*sj1);
IkReal x863=(cj1*pz);
IkReal x864=((42.7008273285295)*py);
IkReal x865=(sj0*sj1);
IkReal x866=((20.0160128102482)*py);
IkReal x867=((42.7008273285295)*px);
if( IKabs(((5.33279957299173)+(((-1.0)*cj0*x864))+(((20.0160128102482)*x863))+((sj0*x867))+((x861*x862))+((x865*x866))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.97891646650654)+(((-1.0)*cj0*x866))+(((-1.0)*x862*x867))+(((-42.7008273285295)*x863))+(((-1.0)*x864*x865))+((sj0*x861))+(((1.70803309314118)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.33279957299173)+(((-1.0)*cj0*x864))+(((20.0160128102482)*x863))+((sj0*x867))+((x861*x862))+((x865*x866))+(((-0.800640512409928)*sj1))))+IKsqr(((1.97891646650654)+(((-1.0)*cj0*x866))+(((-1.0)*x862*x867))+(((-42.7008273285295)*x863))+(((-1.0)*x864*x865))+((sj0*x861))+(((1.70803309314118)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((5.33279957299173)+(((-1.0)*cj0*x864))+(((20.0160128102482)*x863))+((sj0*x867))+((x861*x862))+((x865*x866))+(((-0.800640512409928)*sj1))), ((1.97891646650654)+(((-1.0)*cj0*x866))+(((-1.0)*x862*x867))+(((-42.7008273285295)*x863))+(((-1.0)*x864*x865))+((sj0*x861))+(((1.70803309314118)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x868=IKcos(j4);
IkReal x869=IKsin(j4);
evalcond[0]=((-0.1202)+(((0.009)*x868))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0192)*x869)));
evalcond[1]=((0.01)+((cj1*pz))+(((-0.009)*x869))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1))+(((0.0192)*x868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x870=((20.0160128102482)*px);
IkReal x871=(cj0*sj1);
IkReal x872=(cj1*pz);
IkReal x873=((42.7008273285295)*py);
IkReal x874=(sj0*sj1);
IkReal x875=((20.0160128102482)*py);
IkReal x876=((42.7008273285295)*px);
if( IKabs(((-3.70269548972511)+((x870*x871))+((x874*x875))+(((20.0160128102482)*x872))+(((-1.0)*sj0*x876))+((cj0*x873))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.25647184414198)+(((-1.0)*x871*x876))+(((-42.7008273285295)*x872))+(((-1.0)*x873*x874))+(((1.70803309314118)*sj1))+(((-1.0)*sj0*x870))+((cj0*x875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.70269548972511)+((x870*x871))+((x874*x875))+(((20.0160128102482)*x872))+(((-1.0)*sj0*x876))+((cj0*x873))+(((-0.800640512409928)*sj1))))+IKsqr(((-2.25647184414198)+(((-1.0)*x871*x876))+(((-42.7008273285295)*x872))+(((-1.0)*x873*x874))+(((1.70803309314118)*sj1))+(((-1.0)*sj0*x870))+((cj0*x875))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.70269548972511)+((x870*x871))+((x874*x875))+(((20.0160128102482)*x872))+(((-1.0)*sj0*x876))+((cj0*x873))+(((-0.800640512409928)*sj1))), ((-2.25647184414198)+(((-1.0)*x871*x876))+(((-42.7008273285295)*x872))+(((-1.0)*x873*x874))+(((1.70803309314118)*sj1))+(((-1.0)*sj0*x870))+((cj0*x875))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x877=IKcos(j4);
IkReal x878=IKsin(j4);
evalcond[0]=((-0.0914)+(((-0.0192)*x878))+(((-0.009)*x877))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.009)*x878))+(((-0.04)*sj1))+((py*sj0*sj1))+(((0.0192)*x877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x879=(py*sj0);
IkReal x880=((75000.0)*cj1);
IkReal x881=(pz*sj1);
IkReal x882=((160000.0)*cj1);
IkReal x883=(pz*sj3);
IkReal x884=(cj0*px);
IkReal x885=(sj1*sj3);
CheckValue<IkReal> x886=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x886.valid){
continue;
}
CheckValue<IkReal> x887 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+((x879*x882))+(((75000.0)*x884*x885))+((x880*x883))+(((-3000.0)*x885))+(((-6400.0)*cj1))+((x882*x884))+(((3054.0)*sj3))+(((-160000.0)*x881))+(((75000.0)*x879*x885)))),IkReal(((-21262.5)+((x879*x880))+(((-1.0)*x882*x883))+((x880*x884))+(((-75000.0)*x881))+(((-3000.0)*cj1))+(((-160000.0)*x884*x885))+(((-160000.0)*x879*x885))+(((-520.0)*sj3))+(((6400.0)*x885))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x886.value)))+(x887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x888=IKsin(j4);
IkReal x889=IKcos(j4);
IkReal x890=(cj0*px);
IkReal x891=((1.0)*cj1);
IkReal x892=(py*sj0);
IkReal x893=((0.0192)*x888);
IkReal x894=((0.009)*x889);
evalcond[0]=((0.01)+(((-0.009)*x888))+((sj1*x890))+((sj1*x892))+((cj1*pz))+(((-0.04)*sj1))+(((0.0192)*x889)));
evalcond[1]=((-0.1058)+((cj3*x894))+((cj3*x893))+(((-0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+((sj3*x893))+((sj3*x894))+((pz*sj1))+(((-1.0)*x890*x891))+(((-1.0)*x891*x892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x895=(px*sj0);
IkReal x896=((160000.0)*cj0);
IkReal x897=(cj3*sj1);
IkReal x898=((75000.0)*cj0);
IkReal x899=(py*sj0);
IkReal x900=(cj1*cj3*pz);
CheckValue<IkReal> x901=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x901.valid){
continue;
}
CheckValue<IkReal> x902 = IKatan2WithCheck(IkReal(((16928.0)+(((3054.0)*cj3))+(((61792.0)*sj3))+(((75000.0)*x897*x899))+(((-1.0)*py*x896))+(((160000.0)*x895))+(((-3000.0)*x897))+(((75000.0)*x900))+((px*x897*x898)))),IkReal(((7935.0)+(((-160000.0)*x897*x899))+(((-1.0)*px*x896*x897))+(((-1.0)*py*x898))+(((6400.0)*x897))+(((-520.0)*cj3))+(((28965.0)*sj3))+(((75000.0)*x895))+(((-160000.0)*x900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x901.value)))+(x902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x903=IKsin(j4);
IkReal x904=IKcos(j4);
IkReal x905=(cj0*px);
IkReal x906=((1.0)*cj1);
IkReal x907=(py*sj0);
IkReal x908=((0.0192)*x903);
IkReal x909=((0.009)*x904);
evalcond[0]=((0.01)+((cj1*pz))+(((0.0192)*x904))+(((-0.04)*sj1))+(((-0.009)*x903))+((sj1*x907))+((sj1*x905)));
evalcond[1]=((-0.1058)+((cj3*x908))+((cj3*x909))+(((-0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+((sj3*x908))+((sj3*x909))+(((-0.0144)*sj3))+((pz*sj1))+(((-1.0)*x905*x906))+(((-1.0)*x906*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x910=(cj2*cj3);
IkReal x911=(cj0*px);
IkReal x912=(sj2*sj3);
IkReal x913=((96.0)*cj1);
IkReal x914=((45.0)*cj1);
IkReal x915=(py*sj0);
IkReal x916=((3.84)*cj1);
IkReal x917=(cj2*sj3);
IkReal x918=((96.0)*sj1);
IkReal x919=(sj1*sj3);
IkReal x920=((1.8)*cj1);
IkReal x921=(cj3*sj2);
IkReal x922=(pz*sj3);
IkReal x923=((45.0)*pz*sj1);
IkReal x924=((45.0)*x919);
IkReal x925=(cj1*sj2*x915);
CheckValue<IkReal> x926 = IKatan2WithCheck(IkReal(((((37.0752)*x921))+(((-1.0)*x910*x914*x915))+((x915*x924))+(((-1.8324)*x912))+(((1.251)*x917))+(((-1.0)*sj2*x911*x913))+((sj2*x916))+((x911*x924))+(((-1.0)*x910*x911*x914))+(((12.7575)*x910))+(((17.379)*cj2))+((x914*x922))+((pz*sj2*x918))+(((-1.0)*sj2*x913*x915))+(((-1.8)*x919))+((x910*x923))+((x910*x920))+(((27.216)*sj2)))),IkReal(((((-1.0)*sj3*x911*x918))+(((-1.0)*sj3*x915*x918))+(((-2.6688)*x917))+(((-1.0)*sj2*x911*x914))+(((0.312)*x912))+(((-1.0)*sj2*x914*x915))+(((12.7575)*sj2))+((x910*x913*x915))+(((-37.0752)*cj2))+(((-27.216)*x910))+(((-1.0)*x910*x916))+((x910*x911*x913))+(((-1.0)*x913*x922))+(((3.84)*x919))+(((-1.0)*pz*x910*x918))+(((17.379)*x921))+((sj2*x920))+((sj2*x923)))),IKFAST_ATAN2_MAGTHRESH);
if(!x926.valid){
continue;
}
CheckValue<IkReal> x927=IKPowWithIntegerCheck(IKsign(x912),-1);
if(!x927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x926.value)+(((-1.5707963267949)*(x927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x928=IKcos(j4);
IkReal x929=IKsin(j4);
IkReal x930=(cj0*px);
IkReal x931=((0.0144)*cj3);
IkReal x932=(py*sj0);
IkReal x933=((0.3862)*sj3);
IkReal x934=((1.0)*cj1);
IkReal x935=(cj2*cj3);
IkReal x936=(sj2*x929);
IkReal x937=((0.0192)*x929);
IkReal x938=((0.0192)*x928);
IkReal x939=((0.009)*x928);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*x930*x934))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x932*x934))+((pz*sj1))+((sj3*x939))+((sj3*x937)));
evalcond[1]=((-0.078)+(((-0.0192)*cj3*x936))+(((-0.009)*cj2*x929))+(((0.01)*cj2))+((cj2*x938))+(((0.0278)*sj2))+(((-1.0)*cj3*sj2*x939))+(((-1.0)*px*sj0))+((cj0*py))+((sj2*x931))+((sj2*x933)));
evalcond[2]=((((-1.0)*x935*x939))+(((-1.0)*x935*x937))+(((-1.0)*sj2*x938))+(((0.0278)*cj2))+((sj1*x932))+((sj1*x930))+((cj1*pz))+((cj2*x933))+((cj2*x931))+(((-0.01)*sj2))+(((-0.04)*sj1))+(((0.009)*x936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x940=(sj1*sj2);
IkReal x941=(cj2*sj1);
IkReal x942=(cj2*py);
IkReal x943=(cj2*px);
IkReal x944=((0.0192)*cj3);
IkReal x945=((0.009)*sj2);
IkReal x946=(cj0*py);
IkReal x947=(cj1*pz);
IkReal x948=((0.0192)*sj2);
IkReal x949=(px*sj0);
IkReal x950=(py*sj0);
IkReal x951=(cj2*cj3);
IkReal x952=(cj0*px);
IkReal x953=((0.009)*cj0*cj3);
IkReal x954=((0.009)*cj3*sj0);
CheckValue<IkReal> x955=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x955.valid){
continue;
}
CheckValue<IkReal> x956 = IKatan2WithCheck(IkReal(((-0.00053376)+(((-0.0192)*x941*x950))+(((-0.0192)*x941*x952))+((cj3*x945*x947))+(((-0.00036)*cj3*x940))+(((-0.00036648)*cj3))+((x948*x949))+(((-0.0192)*cj2*x947))+(((-1.0)*x946*x948))+((x943*x954))+(((-0.00741504)*sj3))+(((-1.0)*x942*x953))+(((0.000702)*x951))+(((0.000768)*x941))+(((0.0014976)*sj2))+(((0.009)*cj3*x940*x950))+(((0.009)*cj3*x940*x952)))),IkReal(((-0.0002502)+(((-1.0)*x940*x944*x952))+(((-1.0)*x940*x944*x950))+(((-0.009)*cj2*x947))+((x945*x949))+(((-1.0)*x945*x946))+(((-1.0)*sj0*x943*x944))+(((0.000702)*sj2))+((cj0*x942*x944))+(((-1.0)*sj2*x944*x947))+(((-0.0014976)*x951))+(((6.24e-5)*cj3))+(((0.00036)*x941))+(((-0.009)*x941*x950))+(((-0.009)*x941*x952))+(((-0.0034758)*sj3))+(((0.000768)*cj3*x940)))),IKFAST_ATAN2_MAGTHRESH);
if(!x956.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x955.value)))+(x956.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x957=IKcos(j4);
IkReal x958=IKsin(j4);
IkReal x959=(cj0*px);
IkReal x960=((0.0144)*cj3);
IkReal x961=(py*sj0);
IkReal x962=((0.3862)*sj3);
IkReal x963=((1.0)*cj1);
IkReal x964=(cj2*cj3);
IkReal x965=(sj2*x958);
IkReal x966=((0.0192)*x958);
IkReal x967=((0.0192)*x957);
IkReal x968=((0.009)*x957);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x961*x963))+(((-0.0144)*sj3))+(((-1.0)*x959*x963))+((sj3*x966))+((sj3*x968))+((pz*sj1)));
evalcond[1]=((-0.078)+(((-1.0)*cj3*sj2*x968))+(((-0.009)*cj2*x958))+(((0.01)*cj2))+(((0.0278)*sj2))+(((-0.0192)*cj3*x965))+((cj2*x967))+((sj2*x962))+((sj2*x960))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=((((0.0278)*cj2))+(((-1.0)*x964*x968))+(((-1.0)*x964*x966))+((cj1*pz))+(((0.009)*x965))+(((-0.01)*sj2))+((sj1*x961))+(((-1.0)*sj2*x967))+((cj2*x960))+((cj2*x962))+(((-0.04)*sj1))+((sj1*x959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x969=((45.0)*py);
IkReal x970=(cj0*sj3);
IkReal x971=(cj3*sj2);
IkReal x972=((1.8)*cj1);
IkReal x973=(cj1*cj2);
IkReal x974=((96.0)*py);
IkReal x975=(cj2*cj3);
IkReal x976=(sj2*sj3);
IkReal x977=(cj2*sj3);
IkReal x978=(cj1*sj0);
IkReal x979=((45.0)*pz*sj1);
IkReal x980=((96.0)*cj0*px);
IkReal x981=((45.0)*cj0*px);
IkReal x982=((96.0)*pz*sj1);
IkReal x983=(px*sj0*sj3);
CheckValue<IkReal> x984=IKPowWithIntegerCheck(IKsign(x977),-1);
if(!x984.valid){
continue;
}
CheckValue<IkReal> x985 = IKatan2WithCheck(IkReal((((x969*x970))+(((-1.0)*cj2*x982))+(((-3.84)*x973))+((x973*x980))+(((1.251)*x976))+(((1.8324)*x977))+(((-45.0)*x983))+(((-27.216)*cj2))+(((-37.0752)*x975))+(((17.379)*sj2))+((x971*x979))+((x971*x972))+(((-1.0)*x969*x971*x978))+(((12.7575)*x971))+((sj0*x973*x974))+(((-1.0)*cj1*x971*x981))+(((-3.51)*sj3)))),IkReal((((cj1*x971*x980))+(((-12.7575)*cj2))+(((-1.0)*cj2*x972))+(((-1.0)*cj2*x979))+((x971*x974*x978))+((x973*x981))+((sj0*x969*x973))+(((-1.0)*x971*x982))+(((-1.0)*x970*x974))+(((-2.6688)*x976))+(((7.488)*sj3))+(((-37.0752)*sj2))+(((-0.312)*x977))+(((96.0)*x983))+(((-17.379)*x975))+(((-27.216)*x971))+(((-3.84)*cj1*x971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x984.value)))+(x985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x986=IKcos(j4);
IkReal x987=IKsin(j4);
IkReal x988=(cj0*px);
IkReal x989=((0.0144)*cj3);
IkReal x990=(py*sj0);
IkReal x991=((0.3862)*sj3);
IkReal x992=((1.0)*cj1);
IkReal x993=(cj2*cj3);
IkReal x994=(sj2*x987);
IkReal x995=((0.0192)*x987);
IkReal x996=((0.0192)*x986);
IkReal x997=((0.009)*x986);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x990*x992))+(((-0.0144)*sj3))+((sj3*x995))+((sj3*x997))+((pz*sj1))+(((-1.0)*x988*x992)));
evalcond[1]=((-0.078)+(((0.01)*cj2))+(((-0.0192)*cj3*x994))+((sj2*x991))+(((-0.009)*cj2*x987))+(((0.0278)*sj2))+(((-1.0)*px*sj0))+(((-1.0)*cj3*sj2*x997))+((cj0*py))+((cj2*x996))+((sj2*x989)));
evalcond[2]=((((0.009)*x994))+(((0.0278)*cj2))+(((-1.0)*sj2*x996))+((sj1*x988))+((cj1*pz))+(((-0.01)*sj2))+(((-0.04)*sj1))+((cj2*x989))+(((-1.0)*x993*x995))+(((-1.0)*x993*x997))+((cj2*x991))+((sj1*x990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x998=((1.0)*cj1);
CheckValue<IkReal> x999=IKPowWithIntegerCheck(sj2,-1);
if(!x999.valid){
continue;
}
if( IKabs(((x999.value)*(((((-1.0)*r00*sj0))+((cj0*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x998))+((r02*sj1))+(((-1.0)*r01*sj0*x998)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x999.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))))+IKsqr(((((-1.0)*cj0*r00*x998))+((r02*sj1))+(((-1.0)*r01*sj0*x998))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x999.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))), ((((-1.0)*cj0*r00*x998))+((r02*sj1))+(((-1.0)*r01*sj0*x998))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1000=IKsin(j3);
IkReal x1001=(r01*sj0);
IkReal x1002=((1.0)*cj1);
IkReal x1003=(cj0*r00);
IkReal x1004=((1.0)*x1000);
evalcond[0]=((((-1.0)*r00*sj0))+(((-1.0)*sj2*x1004))+((cj0*r01)));
evalcond[1]=(((sj1*x1001))+((sj1*x1003))+((cj1*r02))+(((-1.0)*cj2*x1004)));
evalcond[2]=(((r02*sj1))+(((-1.0)*x1002*x1003))+(((-1.0)*(IKcos(j3))))+(((-1.0)*x1001*x1002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1005=(cj2*sj3);
j4eval[0]=x1005;
j4eval[1]=IKsign(x1005);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1006=(sj2*sj3);
j4eval[0]=x1006;
j4eval[1]=IKsign(x1006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1007=((20.0160128102482)*px);
IkReal x1008=(cj0*sj1);
IkReal x1009=(cj1*pz);
IkReal x1010=((42.7008273285295)*py);
IkReal x1011=(sj0*sj1);
IkReal x1012=((20.0160128102482)*py);
IkReal x1013=((42.7008273285295)*px);
if( IKabs(((0.440886042167067)+(((-1.70803309314118)*sj1))+((cj0*x1012))+(((-1.0)*sj0*x1007))+(((42.7008273285295)*x1009))+((x1008*x1013))+((x1010*x1011)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((3.74833199893248)+((sj0*x1013))+((x1007*x1008))+(((-1.0)*cj0*x1010))+(((20.0160128102482)*x1009))+((x1011*x1012))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.440886042167067)+(((-1.70803309314118)*sj1))+((cj0*x1012))+(((-1.0)*sj0*x1007))+(((42.7008273285295)*x1009))+((x1008*x1013))+((x1010*x1011))))+IKsqr(((3.74833199893248)+((sj0*x1013))+((x1007*x1008))+(((-1.0)*cj0*x1010))+(((20.0160128102482)*x1009))+((x1011*x1012))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.440886042167067)+(((-1.70803309314118)*sj1))+((cj0*x1012))+(((-1.0)*sj0*x1007))+(((42.7008273285295)*x1009))+((x1008*x1013))+((x1010*x1011))), ((3.74833199893248)+((sj0*x1013))+((x1007*x1008))+(((-1.0)*cj0*x1010))+(((20.0160128102482)*x1009))+((x1011*x1012))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1014=IKsin(j4);
IkReal x1015=IKcos(j4);
evalcond[0]=((-0.068)+(((-0.009)*x1014))+(((0.0192)*x1015))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0422)+(((-0.009)*x1015))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.0192)*x1014))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1016=((20.0160128102482)*px);
IkReal x1017=(cj0*sj1);
IkReal x1018=(cj1*pz);
IkReal x1019=((42.7008273285295)*py);
IkReal x1020=(sj0*sj1);
IkReal x1021=((20.0160128102482)*py);
IkReal x1022=((42.7008273285295)*px);
if( IKabs(((-1.93327995729917)+(((-1.0)*sj0*x1016))+(((-1.0)*x1019*x1020))+((cj0*x1021))+(((1.70803309314118)*sj1))+(((-1.0)*x1017*x1022))+(((-42.7008273285295)*x1018)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.63544168668268)+((sj0*x1022))+(((-1.0)*x1020*x1021))+(((-1.0)*x1016*x1017))+(((-20.0160128102482)*x1018))+(((-1.0)*cj0*x1019))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.93327995729917)+(((-1.0)*sj0*x1016))+(((-1.0)*x1019*x1020))+((cj0*x1021))+(((1.70803309314118)*sj1))+(((-1.0)*x1017*x1022))+(((-42.7008273285295)*x1018))))+IKsqr(((2.63544168668268)+((sj0*x1022))+(((-1.0)*x1020*x1021))+(((-1.0)*x1016*x1017))+(((-20.0160128102482)*x1018))+(((-1.0)*cj0*x1019))+(((0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.93327995729917)+(((-1.0)*sj0*x1016))+(((-1.0)*x1019*x1020))+((cj0*x1021))+(((1.70803309314118)*sj1))+(((-1.0)*x1017*x1022))+(((-42.7008273285295)*x1018))), ((2.63544168668268)+((sj0*x1022))+(((-1.0)*x1020*x1021))+(((-1.0)*x1016*x1017))+(((-20.0160128102482)*x1018))+(((-1.0)*cj0*x1019))+(((0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1023=IKsin(j4);
IkReal x1024=IKcos(j4);
evalcond[0]=((-0.068)+(((0.0192)*x1024))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.009)*x1023)));
evalcond[1]=((0.0134)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.0192)*x1023))+(((0.009)*x1024))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1025=((42.7008273285295)*cj0);
IkReal x1026=(cj1*px);
IkReal x1027=((20.0160128102482)*sj0);
IkReal x1028=((20.0160128102482)*cj0);
IkReal x1029=(pz*sj1);
IkReal x1030=(cj1*py);
IkReal x1031=((42.7008273285295)*sj0);
if( IKabs(((-12.8518815052042)+((py*x1028))+((x1030*x1031))+(((-1.70803309314118)*cj1))+((x1025*x1026))+(((-1.0)*px*x1027))+(((-42.7008273285295)*x1029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.48265278889778)+((px*x1031))+(((-0.800640512409928)*cj1))+(((-1.0)*py*x1025))+((x1026*x1028))+((x1027*x1030))+(((-20.0160128102482)*x1029)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-12.8518815052042)+((py*x1028))+((x1030*x1031))+(((-1.70803309314118)*cj1))+((x1025*x1026))+(((-1.0)*px*x1027))+(((-42.7008273285295)*x1029))))+IKsqr(((-2.48265278889778)+((px*x1031))+(((-0.800640512409928)*cj1))+(((-1.0)*py*x1025))+((x1026*x1028))+((x1027*x1030))+(((-20.0160128102482)*x1029))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-12.8518815052042)+((py*x1028))+((x1030*x1031))+(((-1.70803309314118)*cj1))+((x1025*x1026))+(((-1.0)*px*x1027))+(((-42.7008273285295)*x1029))), ((-2.48265278889778)+((px*x1031))+(((-0.800640512409928)*cj1))+(((-1.0)*py*x1025))+((x1026*x1028))+((x1027*x1030))+(((-20.0160128102482)*x1029))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1032=IKsin(j4);
IkReal x1033=IKcos(j4);
IkReal x1034=((1.0)*cj1);
evalcond[0]=((-0.068)+(((-0.009)*x1032))+(((0.0192)*x1033))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*cj0*px*x1034))+(((0.009)*x1033))+(((-1.0)*py*sj0*x1034))+(((0.0192)*x1032))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1035=((42.7008273285295)*py);
IkReal x1036=((20.0160128102482)*sj0);
IkReal x1037=(pz*sj1);
IkReal x1038=(cj0*cj1*px);
if( IKabs(((11.3594875900721)+(((-42.7008273285295)*x1038))+(((1.70803309314118)*cj1))+(((20.0160128102482)*cj0*py))+(((42.7008273285295)*x1037))+(((-1.0)*cj1*sj0*x1035))+(((-1.0)*px*x1036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.86642647451294)+(((-1.0)*cj0*x1035))+(((-1.0)*cj1*py*x1036))+(((0.800640512409928)*cj1))+(((-20.0160128102482)*x1038))+(((20.0160128102482)*x1037))+(((42.7008273285295)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((11.3594875900721)+(((-42.7008273285295)*x1038))+(((1.70803309314118)*cj1))+(((20.0160128102482)*cj0*py))+(((42.7008273285295)*x1037))+(((-1.0)*cj1*sj0*x1035))+(((-1.0)*px*x1036))))+IKsqr(((8.86642647451294)+(((-1.0)*cj0*x1035))+(((-1.0)*cj1*py*x1036))+(((0.800640512409928)*cj1))+(((-20.0160128102482)*x1038))+(((20.0160128102482)*x1037))+(((42.7008273285295)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((11.3594875900721)+(((-42.7008273285295)*x1038))+(((1.70803309314118)*cj1))+(((20.0160128102482)*cj0*py))+(((42.7008273285295)*x1037))+(((-1.0)*cj1*sj0*x1035))+(((-1.0)*px*x1036))), ((8.86642647451294)+(((-1.0)*cj0*x1035))+(((-1.0)*cj1*py*x1036))+(((0.800640512409928)*cj1))+(((-20.0160128102482)*x1038))+(((20.0160128102482)*x1037))+(((42.7008273285295)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1039=IKsin(j4);
IkReal x1040=IKcos(j4);
IkReal x1041=((1.0)*cj1);
evalcond[0]=((-0.068)+(((0.0192)*x1040))+(((-0.009)*x1039))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-0.009)*x1040))+(((-1.0)*py*sj0*x1041))+(((-1.0)*cj0*px*x1041))+((pz*sj1))+(((-0.0192)*x1039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1042=((75000.0)*cj1);
IkReal x1043=(py*sj0);
IkReal x1044=(pz*sj1);
IkReal x1045=((160000.0)*px);
IkReal x1046=(sj0*sj3);
IkReal x1047=(cj0*py*sj3);
CheckValue<IkReal> x1048=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1048.valid){
continue;
}
CheckValue<IkReal> x1049 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((-6400.0)*cj1))+(((-2796.0)*sj3))+(((-160000.0)*x1044))+(((75000.0)*x1047))+(((-75000.0)*px*x1046))+((cj0*cj1*x1045))+(((160000.0)*cj1*x1043)))),IkReal(((-21262.5)+((x1042*x1043))+(((-3000.0)*cj1))+(((-160000.0)*x1047))+(((11960.0)*sj3))+((cj0*px*x1042))+((x1045*x1046))+(((-75000.0)*x1044))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1048.value)))+(x1049.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1050=IKsin(j4);
IkReal x1051=IKcos(j4);
IkReal x1052=(cj0*px);
IkReal x1053=((1.0)*cj1);
IkReal x1054=(py*sj0);
IkReal x1055=((0.0192)*x1050);
IkReal x1056=((0.009)*x1051);
evalcond[0]=((-0.068)+(((0.0192)*x1051))+(((-0.009)*x1050))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+((sj1*x1054))+((sj1*x1052))+((cj1*pz))+(((0.3862)*sj3))+(((-0.04)*sj1))+(((0.0144)*cj3))+(((-1.0)*cj3*x1055))+(((-1.0)*cj3*x1056)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*x1052*x1053))+(((0.04)*cj1))+((sj3*x1056))+((sj3*x1055))+(((-0.0144)*sj3))+((pz*sj1))+(((-1.0)*x1053*x1054)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1057=((160000.0)*cj3);
IkReal x1058=(px*sj0);
IkReal x1059=(cj1*pz);
IkReal x1060=(cj0*py);
IkReal x1061=((75000.0)*cj3);
IkReal x1062=(cj0*px*sj1);
IkReal x1063=(py*sj0*sj1);
CheckValue<IkReal> x1064 = IKatan2WithCheck(IkReal(((4448.0)+(((-6400.0)*sj1))+(((160000.0)*x1062))+(((160000.0)*x1063))+((x1060*x1061))+(((61792.0)*sj3))+(((160000.0)*x1059))+(((-1.0)*x1058*x1061))+(((-2796.0)*cj3)))),IkReal(((2085.0)+(((75000.0)*x1062))+(((75000.0)*x1063))+((x1057*x1058))+(((75000.0)*x1059))+(((-1.0)*x1057*x1060))+(((11960.0)*cj3))+(((-3000.0)*sj1))+(((28965.0)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1064.valid){
continue;
}
CheckValue<IkReal> x1065=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1064.value)+(((1.5707963267949)*(x1065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1066=IKsin(j4);
IkReal x1067=IKcos(j4);
IkReal x1068=(cj0*px);
IkReal x1069=((1.0)*cj1);
IkReal x1070=(py*sj0);
IkReal x1071=((0.0192)*x1066);
IkReal x1072=((0.009)*x1067);
evalcond[0]=((-0.068)+(((0.0192)*x1067))+(((-0.009)*x1066))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+((cj1*pz))+((sj1*x1070))+(((0.3862)*sj3))+(((-0.04)*sj1))+((sj1*x1068))+(((-1.0)*cj3*x1071))+(((-1.0)*cj3*x1072))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+((sj3*x1071))+((sj3*x1072))+(((-0.0144)*sj3))+(((-1.0)*x1068*x1069))+((pz*sj1))+(((-1.0)*x1069*x1070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1073=((20.0160128102482)*px);
IkReal x1074=(cj0*sj1);
IkReal x1075=(cj1*pz);
IkReal x1076=((42.7008273285295)*py);
IkReal x1077=(sj0*sj1);
IkReal x1078=((20.0160128102482)*py);
IkReal x1079=((42.7008273285295)*px);
if( IKabs(((3.56338404056579)+(((-1.0)*x1074*x1079))+(((-1.0)*x1076*x1077))+(((-42.7008273285295)*x1075))+((sj0*x1073))+(((1.70803309314118)*sj1))+(((-1.0)*cj0*x1078)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.91299706431812)+(((-1.0)*x1077*x1078))+(((-1.0)*x1073*x1074))+(((-20.0160128102482)*x1075))+((cj0*x1076))+(((-1.0)*sj0*x1079))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.56338404056579)+(((-1.0)*x1074*x1079))+(((-1.0)*x1076*x1077))+(((-42.7008273285295)*x1075))+((sj0*x1073))+(((1.70803309314118)*sj1))+(((-1.0)*cj0*x1078))))+IKsqr(((-2.91299706431812)+(((-1.0)*x1077*x1078))+(((-1.0)*x1073*x1074))+(((-20.0160128102482)*x1075))+((cj0*x1076))+(((-1.0)*sj0*x1079))+(((0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.56338404056579)+(((-1.0)*x1074*x1079))+(((-1.0)*x1076*x1077))+(((-42.7008273285295)*x1075))+((sj0*x1073))+(((1.70803309314118)*sj1))+(((-1.0)*cj0*x1078))), ((-2.91299706431812)+(((-1.0)*x1077*x1078))+(((-1.0)*x1073*x1074))+(((-20.0160128102482)*x1075))+((cj0*x1076))+(((-1.0)*sj0*x1079))+(((0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1080=IKsin(j4);
IkReal x1081=IKcos(j4);
evalcond[0]=((-0.088)+(((0.009)*x1080))+(((-0.0192)*x1081))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0422)+(((0.0192)*x1080))+(((0.009)*x1081))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1082=((20.0160128102482)*px);
IkReal x1083=(cj0*sj1);
IkReal x1084=(cj1*pz);
IkReal x1085=((42.7008273285295)*py);
IkReal x1086=(sj0*sj1);
IkReal x1087=((20.0160128102482)*py);
IkReal x1088=((42.7008273285295)*px);
if( IKabs(((1.18921804109955)+(((-1.0)*cj0*x1087))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x1084))+((sj0*x1082))+((x1085*x1086))+((x1083*x1088)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.02588737656792)+((x1082*x1083))+(((20.0160128102482)*x1084))+(((-1.0)*sj0*x1088))+((x1086*x1087))+((cj0*x1085))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.18921804109955)+(((-1.0)*cj0*x1087))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x1084))+((sj0*x1082))+((x1085*x1086))+((x1083*x1088))))+IKsqr(((-4.02588737656792)+((x1082*x1083))+(((20.0160128102482)*x1084))+(((-1.0)*sj0*x1088))+((x1086*x1087))+((cj0*x1085))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.18921804109955)+(((-1.0)*cj0*x1087))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x1084))+((sj0*x1082))+((x1085*x1086))+((x1083*x1088))), ((-4.02588737656792)+((x1082*x1083))+(((20.0160128102482)*x1084))+(((-1.0)*sj0*x1088))+((x1086*x1087))+((cj0*x1085))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1089=IKsin(j4);
IkReal x1090=IKcos(j4);
evalcond[0]=((-0.088)+(((0.009)*x1089))+(((-0.0192)*x1090))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0134)+(((-0.009)*x1090))+(((-0.0192)*x1089))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1091=((42.7008273285295)*cj0);
IkReal x1092=(cj1*px);
IkReal x1093=((20.0160128102482)*sj0);
IkReal x1094=((20.0160128102482)*cj0);
IkReal x1095=(pz*sj1);
IkReal x1096=(cj1*py);
IkReal x1097=((42.7008273285295)*sj0);
if( IKabs(((-9.72938350680544)+(((-1.70803309314118)*cj1))+(((-1.0)*py*x1094))+((x1091*x1092))+((x1096*x1097))+((px*x1093))+(((-42.7008273285295)*x1095)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.14398185214839)+(((-0.800640512409928)*cj1))+((x1092*x1094))+((x1093*x1096))+((py*x1091))+(((-20.0160128102482)*x1095))+(((-1.0)*px*x1097)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.72938350680544)+(((-1.70803309314118)*cj1))+(((-1.0)*py*x1094))+((x1091*x1092))+((x1096*x1097))+((px*x1093))+(((-42.7008273285295)*x1095))))+IKsqr(((-9.14398185214839)+(((-0.800640512409928)*cj1))+((x1092*x1094))+((x1093*x1096))+((py*x1091))+(((-20.0160128102482)*x1095))+(((-1.0)*px*x1097))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-9.72938350680544)+(((-1.70803309314118)*cj1))+(((-1.0)*py*x1094))+((x1091*x1092))+((x1096*x1097))+((px*x1093))+(((-42.7008273285295)*x1095))), ((-9.14398185214839)+(((-0.800640512409928)*cj1))+((x1092*x1094))+((x1093*x1096))+((py*x1091))+(((-20.0160128102482)*x1095))+(((-1.0)*px*x1097))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1098=IKsin(j4);
IkReal x1099=IKcos(j4);
IkReal x1100=((1.0)*cj1);
evalcond[0]=((-0.088)+(((-0.0192)*x1099))+(((0.009)*x1098))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*cj0*px*x1100))+(((-1.0)*py*sj0*x1100))+(((0.009)*x1099))+((pz*sj1))+(((0.0192)*x1098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1101=((42.7008273285295)*py);
IkReal x1102=((20.0160128102482)*sj0);
IkReal x1103=(pz*sj1);
IkReal x1104=(cj0*cj1*px);
if( IKabs(((14.4819855884708)+(((-20.0160128102482)*cj0*py))+(((1.70803309314118)*cj1))+(((-1.0)*cj1*sj0*x1101))+(((42.7008273285295)*x1103))+((px*x1102))+(((-42.7008273285295)*x1104)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x1103))+(((-1.0)*cj1*py*x1102))+(((-20.0160128102482)*x1104))+((cj0*x1101))+(((-42.7008273285295)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((14.4819855884708)+(((-20.0160128102482)*cj0*py))+(((1.70803309314118)*cj1))+(((-1.0)*cj1*sj0*x1101))+(((42.7008273285295)*x1103))+((px*x1102))+(((-42.7008273285295)*x1104))))+IKsqr(((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x1103))+(((-1.0)*cj1*py*x1102))+(((-20.0160128102482)*x1104))+((cj0*x1101))+(((-42.7008273285295)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((14.4819855884708)+(((-20.0160128102482)*cj0*py))+(((1.70803309314118)*cj1))+(((-1.0)*cj1*sj0*x1101))+(((42.7008273285295)*x1103))+((px*x1102))+(((-42.7008273285295)*x1104))), ((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x1103))+(((-1.0)*cj1*py*x1102))+(((-20.0160128102482)*x1104))+((cj0*x1101))+(((-42.7008273285295)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1105=IKsin(j4);
IkReal x1106=IKcos(j4);
IkReal x1107=((1.0)*cj1);
evalcond[0]=((-0.088)+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0192)*x1106))+(((0.009)*x1105)));
evalcond[1]=((0.2979)+(((-0.009)*x1106))+(((0.04)*cj1))+(((-1.0)*cj0*px*x1107))+(((-1.0)*py*sj0*x1107))+((pz*sj1))+(((-0.0192)*x1105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1108=((75000.0)*cj1);
IkReal x1109=(py*sj0);
IkReal x1110=(pz*sj1);
IkReal x1111=((160000.0)*px);
IkReal x1112=(sj0*sj3);
IkReal x1113=(cj0*py*sj3);
CheckValue<IkReal> x1114=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1114.valid){
continue;
}
CheckValue<IkReal> x1115 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((-75000.0)*x1113))+(((160000.0)*cj1*x1109))+(((-6400.0)*cj1))+(((8904.0)*sj3))+(((75000.0)*px*x1112))+((cj0*cj1*x1111))+(((-160000.0)*x1110)))),IkReal(((-21262.5)+(((-75000.0)*x1110))+((x1108*x1109))+(((160000.0)*x1113))+(((-3000.0)*cj1))+(((-13000.0)*sj3))+((cj0*px*x1108))+(((-1.0)*x1111*x1112))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1114.value)))+(x1115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1116=IKsin(j4);
IkReal x1117=IKcos(j4);
IkReal x1118=(cj0*px);
IkReal x1119=((1.0)*cj1);
IkReal x1120=(py*sj0);
IkReal x1121=((0.0192)*x1116);
IkReal x1122=((0.009)*x1117);
evalcond[0]=((-0.088)+(((-1.0)*px*sj0))+(((0.009)*x1116))+((cj0*py))+(((-0.0192)*x1117)));
evalcond[1]=((-0.0278)+((sj1*x1120))+(((-0.3862)*sj3))+((cj1*pz))+(((-0.04)*sj1))+((sj1*x1118))+(((-0.0144)*cj3))+((cj3*x1121))+((cj3*x1122)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x1119*x1120))+((sj3*x1122))+((sj3*x1121))+((pz*sj1))+(((-1.0)*x1118*x1119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1123=((160000.0)*cj3);
IkReal x1124=(cj0*py);
IkReal x1125=(px*sj0);
IkReal x1126=(cj1*pz);
IkReal x1127=((75000.0)*cj3);
IkReal x1128=(cj0*px*sj1);
IkReal x1129=(py*sj0*sj1);
CheckValue<IkReal> x1130=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1130.valid){
continue;
}
CheckValue<IkReal> x1131 = IKatan2WithCheck(IkReal(((4448.0)+(((61792.0)*sj3))+(((8904.0)*cj3))+(((6400.0)*sj1))+((x1125*x1127))+(((-160000.0)*x1129))+(((-160000.0)*x1128))+(((-160000.0)*x1126))+(((-1.0)*x1124*x1127)))),IkReal(((2085.0)+(((-75000.0)*x1126))+(((-75000.0)*x1129))+(((-75000.0)*x1128))+(((-1.0)*x1123*x1125))+(((3000.0)*sj1))+((x1123*x1124))+(((28965.0)*sj3))+(((-13000.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1130.value)))+(x1131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1132=IKsin(j4);
IkReal x1133=IKcos(j4);
IkReal x1134=(cj0*px);
IkReal x1135=((1.0)*cj1);
IkReal x1136=(py*sj0);
IkReal x1137=((0.0192)*x1132);
IkReal x1138=((0.009)*x1133);
evalcond[0]=((-0.088)+(((0.009)*x1132))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0192)*x1133)));
evalcond[1]=((-0.0278)+((cj3*x1138))+((cj3*x1137))+(((-0.3862)*sj3))+((sj1*x1134))+((sj1*x1136))+((cj1*pz))+(((-0.04)*sj1))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x1134*x1135))+(((-1.0)*x1135*x1136))+((pz*sj1))+((sj3*x1137))+((sj3*x1138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1139=(py*sj2);
IkReal x1140=((20.0160128102482)*sj1);
IkReal x1141=((42.7008273285295)*cj2);
IkReal x1142=(px*sj0);
IkReal x1143=(cj1*pz);
IkReal x1144=(cj2*sj1);
IkReal x1145=((42.7008273285295)*cj0);
IkReal x1146=((20.0160128102482)*sj2);
IkReal x1147=((42.7008273285295)*sj2);
IkReal x1148=(cj0*px);
IkReal x1149=(sj0*sj1);
IkReal x1150=(sj1*sj2);
IkReal x1151=((20.0160128102482)*cj2);
IkReal x1152=(cj0*py);
if( IKabs(((2.00213504136643)+(((0.800640512409928)*x1150))+((py*x1141*x1149))+(((-1.0)*x1143*x1146))+((x1141*x1143))+(((-1.56124899919936)*cj2))+((x1151*x1152))+(((-1.70803309314118)*x1144))+((x1139*x1145))+(((-1.0)*sj2*x1140*x1148))+(((-3.3306645316253)*sj2))+((sj1*x1141*x1148))+(((-1.0)*x1142*x1147))+(((-1.0)*sj0*x1139*x1140))+(((-1.0)*x1142*x1151)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.417667467307179)+((cj2*py*sj0*x1140))+(((-1.0)*x1141*x1152))+((cj2*x1140*x1148))+((x1143*x1147))+((x1141*x1142))+((x1143*x1151))+(((-1.56124899919936)*sj2))+((px*x1145*x1150))+(((3.3306645316253)*cj2))+(((-0.800640512409928)*x1144))+(((-1.70803309314118)*x1150))+(((42.7008273285295)*x1139*x1149))+(((-1.0)*x1142*x1146))+(((20.0160128102482)*cj0*x1139)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.00213504136643)+(((0.800640512409928)*x1150))+((py*x1141*x1149))+(((-1.0)*x1143*x1146))+((x1141*x1143))+(((-1.56124899919936)*cj2))+((x1151*x1152))+(((-1.70803309314118)*x1144))+((x1139*x1145))+(((-1.0)*sj2*x1140*x1148))+(((-3.3306645316253)*sj2))+((sj1*x1141*x1148))+(((-1.0)*x1142*x1147))+(((-1.0)*sj0*x1139*x1140))+(((-1.0)*x1142*x1151))))+IKsqr(((0.417667467307179)+((cj2*py*sj0*x1140))+(((-1.0)*x1141*x1152))+((cj2*x1140*x1148))+((x1143*x1147))+((x1141*x1142))+((x1143*x1151))+(((-1.56124899919936)*sj2))+((px*x1145*x1150))+(((3.3306645316253)*cj2))+(((-0.800640512409928)*x1144))+(((-1.70803309314118)*x1150))+(((42.7008273285295)*x1139*x1149))+(((-1.0)*x1142*x1146))+(((20.0160128102482)*cj0*x1139))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.00213504136643)+(((0.800640512409928)*x1150))+((py*x1141*x1149))+(((-1.0)*x1143*x1146))+((x1141*x1143))+(((-1.56124899919936)*cj2))+((x1151*x1152))+(((-1.70803309314118)*x1144))+((x1139*x1145))+(((-1.0)*sj2*x1140*x1148))+(((-3.3306645316253)*sj2))+((sj1*x1141*x1148))+(((-1.0)*x1142*x1147))+(((-1.0)*sj0*x1139*x1140))+(((-1.0)*x1142*x1151))), ((0.417667467307179)+((cj2*py*sj0*x1140))+(((-1.0)*x1141*x1152))+((cj2*x1140*x1148))+((x1143*x1147))+((x1141*x1142))+((x1143*x1151))+(((-1.56124899919936)*sj2))+((px*x1145*x1150))+(((3.3306645316253)*cj2))+(((-0.800640512409928)*x1144))+(((-1.70803309314118)*x1150))+(((42.7008273285295)*x1139*x1149))+(((-1.0)*x1142*x1146))+(((20.0160128102482)*cj0*x1139))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1153=IKcos(j4);
IkReal x1154=IKsin(j4);
IkReal x1155=((0.0192)*cj2);
IkReal x1156=((0.009)*cj2);
IkReal x1157=(sj2*x1154);
IkReal x1158=(sj2*x1153);
evalcond[0]=((-0.078)+(((-1.0)*x1154*x1156))+(((0.01)*cj2))+((x1153*x1155))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0192)*x1157))+(((-0.009)*x1158))+(((0.0422)*sj2)));
evalcond[1]=((((-1.0)*x1154*x1155))+((cj1*pz))+((cj0*px*sj1))+(((-0.01)*sj2))+(((-0.04)*sj1))+(((0.0422)*cj2))+(((-1.0)*x1153*x1156))+((py*sj0*sj1))+(((-0.0192)*x1158))+(((0.009)*x1157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1159=(py*sj2);
IkReal x1160=((20.0160128102482)*sj1);
IkReal x1161=((42.7008273285295)*cj2);
IkReal x1162=(px*sj0);
IkReal x1163=(cj1*pz);
IkReal x1164=(cj2*sj1);
IkReal x1165=((42.7008273285295)*cj0);
IkReal x1166=((20.0160128102482)*sj2);
IkReal x1167=((42.7008273285295)*sj2);
IkReal x1168=(cj0*px);
IkReal x1169=(sj0*sj1);
IkReal x1170=(sj1*sj2);
IkReal x1171=((20.0160128102482)*cj2);
IkReal x1172=(cj0*py);
if( IKabs(((-0.372030958099813)+(((-1.0)*x1159*x1165))+(((-1.0)*py*x1161*x1169))+(((-1.0)*x1163*x1166))+((x1162*x1167))+(((-1.56124899919936)*cj2))+(((-1.0)*x1162*x1171))+(((3.3306645316253)*sj2))+(((-1.0)*sj1*x1161*x1168))+(((-1.0)*sj2*x1160*x1168))+(((0.800640512409928)*x1170))+(((-1.0)*sj0*x1159*x1160))+(((1.70803309314118)*x1164))+(((-1.0)*x1161*x1163))+((x1171*x1172)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.695222844942621)+(((-1.70803309314118)*x1170))+((x1163*x1167))+((x1162*x1166))+(((42.7008273285295)*x1159*x1169))+(((-1.0)*x1163*x1171))+(((-1.0)*cj2*x1160*x1168))+(((-20.0160128102482)*cj0*x1159))+(((-1.0)*cj2*py*sj0*x1160))+((px*x1165*x1170))+(((0.800640512409928)*x1164))+(((3.3306645316253)*cj2))+(((-1.0)*x1161*x1172))+(((1.56124899919936)*sj2))+((x1161*x1162)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.372030958099813)+(((-1.0)*x1159*x1165))+(((-1.0)*py*x1161*x1169))+(((-1.0)*x1163*x1166))+((x1162*x1167))+(((-1.56124899919936)*cj2))+(((-1.0)*x1162*x1171))+(((3.3306645316253)*sj2))+(((-1.0)*sj1*x1161*x1168))+(((-1.0)*sj2*x1160*x1168))+(((0.800640512409928)*x1170))+(((-1.0)*sj0*x1159*x1160))+(((1.70803309314118)*x1164))+(((-1.0)*x1161*x1163))+((x1171*x1172))))+IKsqr(((-0.695222844942621)+(((-1.70803309314118)*x1170))+((x1163*x1167))+((x1162*x1166))+(((42.7008273285295)*x1159*x1169))+(((-1.0)*x1163*x1171))+(((-1.0)*cj2*x1160*x1168))+(((-20.0160128102482)*cj0*x1159))+(((-1.0)*cj2*py*sj0*x1160))+((px*x1165*x1170))+(((0.800640512409928)*x1164))+(((3.3306645316253)*cj2))+(((-1.0)*x1161*x1172))+(((1.56124899919936)*sj2))+((x1161*x1162))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.372030958099813)+(((-1.0)*x1159*x1165))+(((-1.0)*py*x1161*x1169))+(((-1.0)*x1163*x1166))+((x1162*x1167))+(((-1.56124899919936)*cj2))+(((-1.0)*x1162*x1171))+(((3.3306645316253)*sj2))+(((-1.0)*sj1*x1161*x1168))+(((-1.0)*sj2*x1160*x1168))+(((0.800640512409928)*x1170))+(((-1.0)*sj0*x1159*x1160))+(((1.70803309314118)*x1164))+(((-1.0)*x1161*x1163))+((x1171*x1172))), ((-0.695222844942621)+(((-1.70803309314118)*x1170))+((x1163*x1167))+((x1162*x1166))+(((42.7008273285295)*x1159*x1169))+(((-1.0)*x1163*x1171))+(((-1.0)*cj2*x1160*x1168))+(((-20.0160128102482)*cj0*x1159))+(((-1.0)*cj2*py*sj0*x1160))+((px*x1165*x1170))+(((0.800640512409928)*x1164))+(((3.3306645316253)*cj2))+(((-1.0)*x1161*x1172))+(((1.56124899919936)*sj2))+((x1161*x1162))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1173=IKcos(j4);
IkReal x1174=IKsin(j4);
IkReal x1175=((0.0192)*sj2);
IkReal x1176=((0.0192)*cj2);
IkReal x1177=((0.009)*sj2);
IkReal x1178=((0.009)*cj2);
evalcond[0]=((-0.078)+((x1173*x1176))+((x1173*x1177))+((x1174*x1175))+(((0.01)*cj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x1174*x1178))+(((0.0134)*sj2)));
evalcond[1]=((((-1.0)*x1173*x1175))+(((0.0134)*cj2))+((x1173*x1178))+((x1174*x1176))+((x1174*x1177))+((cj1*pz))+((cj0*px*sj1))+(((-0.01)*sj2))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=cj2;
j4eval[1]=IKsign(cj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1179=(cj0*px);
IkReal x1180=((42.7008273285295)*cj1);
IkReal x1181=((20.0160128102482)*sj1);
IkReal x1182=((20.0160128102482)*cj1);
IkReal x1183=((42.7008273285295)*sj1);
IkReal x1184=(py*sj0);
if( IKabs(((-11.2906325060048)+(((-1.0)*x1181*x1184))+(((-1.70803309314118)*cj1))+((x1180*x1184))+((x1179*x1180))+(((-1.0)*pz*x1183))+(((-1.0)*pz*x1182))+(((-1.0)*x1179*x1181))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+((x1183*x1184))+((x1182*x1184))+(((-0.800640512409928)*cj1))+((pz*x1180))+((x1179*x1182))+((x1179*x1183))+(((-1.70803309314118)*sj1))+(((-1.0)*pz*x1181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-11.2906325060048)+(((-1.0)*x1181*x1184))+(((-1.70803309314118)*cj1))+((x1180*x1184))+((x1179*x1180))+(((-1.0)*pz*x1183))+(((-1.0)*pz*x1182))+(((-1.0)*x1179*x1181))+(((0.800640512409928)*sj1))))+IKsqr(((-5.81331732052309)+((x1183*x1184))+((x1182*x1184))+(((-0.800640512409928)*cj1))+((pz*x1180))+((x1179*x1182))+((x1179*x1183))+(((-1.70803309314118)*sj1))+(((-1.0)*pz*x1181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-11.2906325060048)+(((-1.0)*x1181*x1184))+(((-1.70803309314118)*cj1))+((x1180*x1184))+((x1179*x1180))+(((-1.0)*pz*x1183))+(((-1.0)*pz*x1182))+(((-1.0)*x1179*x1181))+(((0.800640512409928)*sj1))), ((-5.81331732052309)+((x1183*x1184))+((x1182*x1184))+(((-0.800640512409928)*cj1))+((pz*x1180))+((x1179*x1182))+((x1179*x1183))+(((-1.70803309314118)*sj1))+(((-1.0)*pz*x1181))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1185=IKsin(j4);
IkReal x1186=IKcos(j4);
IkReal x1187=(cj0*px);
IkReal x1188=(py*sj0);
IkReal x1189=((1.0)*cj1);
evalcond[0]=((-0.01)+(((-0.0192)*x1186))+(((0.009)*x1185))+((sj1*x1187))+((sj1*x1188))+((cj1*pz))+(((-0.04)*sj1)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*x1188*x1189))+(((0.009)*x1186))+(((0.0192)*x1185))+(((-1.0)*x1187*x1189))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1190=(cj0*px);
IkReal x1191=((42.7008273285295)*cj1);
IkReal x1192=((20.0160128102482)*sj1);
IkReal x1193=((20.0160128102482)*cj1);
IkReal x1194=((42.7008273285295)*sj1);
IkReal x1195=(py*sj0);
if( IKabs(((-11.2906325060048)+(((-1.70803309314118)*cj1))+((pz*x1193))+(((-1.0)*pz*x1194))+((x1192*x1195))+((x1191*x1195))+((x1190*x1192))+((x1190*x1191))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+(((-1.0)*x1190*x1194))+(((-0.800640512409928)*cj1))+(((-1.0)*x1194*x1195))+(((-1.0)*pz*x1192))+(((-1.0)*pz*x1191))+(((1.70803309314118)*sj1))+((x1193*x1195))+((x1190*x1193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-11.2906325060048)+(((-1.70803309314118)*cj1))+((pz*x1193))+(((-1.0)*pz*x1194))+((x1192*x1195))+((x1191*x1195))+((x1190*x1192))+((x1190*x1191))+(((-0.800640512409928)*sj1))))+IKsqr(((-5.81331732052309)+(((-1.0)*x1190*x1194))+(((-0.800640512409928)*cj1))+(((-1.0)*x1194*x1195))+(((-1.0)*pz*x1192))+(((-1.0)*pz*x1191))+(((1.70803309314118)*sj1))+((x1193*x1195))+((x1190*x1193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-11.2906325060048)+(((-1.70803309314118)*cj1))+((pz*x1193))+(((-1.0)*pz*x1194))+((x1192*x1195))+((x1191*x1195))+((x1190*x1192))+((x1190*x1191))+(((-0.800640512409928)*sj1))), ((-5.81331732052309)+(((-1.0)*x1190*x1194))+(((-0.800640512409928)*cj1))+(((-1.0)*x1194*x1195))+(((-1.0)*pz*x1192))+(((-1.0)*pz*x1191))+(((1.70803309314118)*sj1))+((x1193*x1195))+((x1190*x1193))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1196=IKsin(j4);
IkReal x1197=IKcos(j4);
IkReal x1198=(cj0*px);
IkReal x1199=(py*sj0);
IkReal x1200=((1.0)*cj1);
evalcond[0]=((0.01)+(((0.0192)*x1197))+((cj1*pz))+((sj1*x1198))+((sj1*x1199))+(((-0.009)*x1196))+(((-0.04)*sj1)));
evalcond[1]=((0.2691)+(((-1.0)*x1199*x1200))+(((0.04)*cj1))+(((0.009)*x1197))+(((0.0192)*x1196))+((pz*sj1))+(((-1.0)*x1198*x1200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1201=(cj1*sj2);
IkReal x1202=(py*sj0);
IkReal x1203=((75000.0)*pz);
IkReal x1204=(cj0*px);
IkReal x1205=(sj1*sj2);
IkReal x1206=((75000.0)*sj1);
IkReal x1207=((160000.0)*sj1);
IkReal x1208=((160000.0)*pz);
CheckValue<IkReal> x1209=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x1209.valid){
continue;
}
CheckValue<IkReal> x1210 = IKatan2WithCheck(IkReal(((((-1.0)*x1204*x1206))+(((160000.0)*x1201*x1204))+(((160000.0)*x1201*x1202))+(((-1.0)*cj1*x1203))+(((-1.0)*x1202*x1206))+(((-31050.0)*cj2))+(((-1.0)*x1205*x1208))+(((3000.0)*sj1))+(((-42306.0)*sj2))+(((-6400.0)*x1201)))),IkReal((((x1204*x1207))+(((-6400.0)*sj1))+(((-21782.5)*sj2))+((cj1*x1208))+((x1202*x1207))+(((-3000.0)*x1201))+(((-1.0)*x1203*x1205))+(((66240.0)*cj2))+(((75000.0)*x1201*x1202))+(((75000.0)*x1201*x1204)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1209.value)))+(x1210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1211=IKsin(j4);
IkReal x1212=IKcos(j4);
IkReal x1213=(cj0*px);
IkReal x1214=(py*sj0);
IkReal x1215=((1.0)*cj1);
IkReal x1216=((0.009)*x1211);
IkReal x1217=((0.0192)*x1212);
evalcond[0]=((-0.078)+(((0.414)*sj2))+(((-1.0)*cj2*x1216))+(((0.01)*cj2))+((cj2*x1217))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.009)*x1212))+(((0.0192)*x1211))+(((0.04)*cj1))+(((-1.0)*x1214*x1215))+(((-1.0)*x1213*x1215))+((pz*sj1)));
evalcond[2]=(((cj1*pz))+(((-0.01)*sj2))+(((-0.04)*sj1))+(((0.414)*cj2))+((sj2*x1216))+((sj1*x1214))+((sj1*x1213))+(((-1.0)*sj2*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1218=((160000.0)*px);
IkReal x1219=(cj0*py);
IkReal x1220=(cj1*cj2);
IkReal x1221=((75000.0)*px);
IkReal x1222=(cj2*pz*sj1);
IkReal x1223=(py*sj0*x1220);
CheckValue<IkReal> x1224=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1224.valid){
continue;
}
CheckValue<IkReal> x1225 = IKatan2WithCheck(IkReal(((-5850.0)+((cj0*x1218*x1220))+(((31050.0)*sj2))+(((-160000.0)*x1222))+(((-6400.0)*x1220))+(((75000.0)*x1219))+(((-1.0)*sj0*x1221))+(((160000.0)*x1223))+(((-42306.0)*cj2)))),IkReal(((12480.0)+(((-160000.0)*x1219))+(((-21782.5)*cj2))+((cj0*x1220*x1221))+(((-75000.0)*x1222))+(((75000.0)*x1223))+((sj0*x1218))+(((-3000.0)*x1220))+(((-66240.0)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1224.value)))+(x1225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1226=IKsin(j4);
IkReal x1227=IKcos(j4);
IkReal x1228=(cj0*px);
IkReal x1229=(py*sj0);
IkReal x1230=((1.0)*cj1);
IkReal x1231=((0.009)*x1226);
IkReal x1232=((0.0192)*x1227);
evalcond[0]=((-0.078)+((cj2*x1232))+(((0.414)*sj2))+(((0.01)*cj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj2*x1231)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*x1228*x1230))+(((0.009)*x1227))+(((-1.0)*x1229*x1230))+(((0.0192)*x1226))+((pz*sj1)));
evalcond[2]=(((sj1*x1228))+((sj1*x1229))+((sj2*x1231))+((cj1*pz))+(((-0.01)*sj2))+(((-0.04)*sj1))+(((0.414)*cj2))+(((-1.0)*sj2*x1232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=cj2;
j4eval[1]=IKsign(cj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1233=(cj0*px);
IkReal x1234=((42.7008273285295)*cj1);
IkReal x1235=((20.0160128102482)*sj1);
IkReal x1236=((20.0160128102482)*cj1);
IkReal x1237=((42.7008273285295)*sj1);
IkReal x1238=(py*sj0);
if( IKabs(((12.9207365892714)+((pz*x1237))+(((1.70803309314118)*cj1))+(((-1.0)*pz*x1236))+(((-1.0)*x1235*x1238))+(((-1.0)*x1233*x1235))+(((-1.0)*x1233*x1234))+(((-1.0)*x1234*x1238))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((0.800640512409928)*cj1))+((pz*x1235))+((pz*x1234))+(((-1.70803309314118)*sj1))+(((-1.0)*x1236*x1238))+((x1233*x1237))+(((-1.0)*x1233*x1236))+((x1237*x1238)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.9207365892714)+((pz*x1237))+(((1.70803309314118)*cj1))+(((-1.0)*pz*x1236))+(((-1.0)*x1235*x1238))+(((-1.0)*x1233*x1235))+(((-1.0)*x1233*x1234))+(((-1.0)*x1234*x1238))+(((0.800640512409928)*sj1))))+IKsqr(((5.53576194288764)+(((0.800640512409928)*cj1))+((pz*x1235))+((pz*x1234))+(((-1.70803309314118)*sj1))+(((-1.0)*x1236*x1238))+((x1233*x1237))+(((-1.0)*x1233*x1236))+((x1237*x1238))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((12.9207365892714)+((pz*x1237))+(((1.70803309314118)*cj1))+(((-1.0)*pz*x1236))+(((-1.0)*x1235*x1238))+(((-1.0)*x1233*x1235))+(((-1.0)*x1233*x1234))+(((-1.0)*x1234*x1238))+(((0.800640512409928)*sj1))), ((5.53576194288764)+(((0.800640512409928)*cj1))+((pz*x1235))+((pz*x1234))+(((-1.70803309314118)*sj1))+(((-1.0)*x1236*x1238))+((x1233*x1237))+(((-1.0)*x1233*x1236))+((x1237*x1238))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1239=IKsin(j4);
IkReal x1240=IKcos(j4);
IkReal x1241=(cj0*px);
IkReal x1242=(py*sj0);
IkReal x1243=((1.0)*cj1);
evalcond[0]=((-0.01)+((cj1*pz))+(((-0.04)*sj1))+(((0.009)*x1239))+((sj1*x1242))+((sj1*x1241))+(((-0.0192)*x1240)));
evalcond[1]=((0.2979)+(((-0.009)*x1240))+(((0.04)*cj1))+(((-1.0)*x1242*x1243))+(((-0.0192)*x1239))+((pz*sj1))+(((-1.0)*x1241*x1243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1244=(cj0*px);
IkReal x1245=((42.7008273285295)*cj1);
IkReal x1246=((20.0160128102482)*sj1);
IkReal x1247=((20.0160128102482)*cj1);
IkReal x1248=((42.7008273285295)*sj1);
IkReal x1249=(py*sj0);
if( IKabs(((12.9207365892714)+(((-1.0)*x1244*x1245))+(((-1.0)*x1245*x1249))+(((1.70803309314118)*cj1))+((pz*x1248))+((pz*x1247))+((x1246*x1249))+((x1244*x1246))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((0.800640512409928)*cj1))+(((-1.0)*x1244*x1247))+(((-1.0)*x1244*x1248))+(((-1.0)*pz*x1245))+((pz*x1246))+(((1.70803309314118)*sj1))+(((-1.0)*x1248*x1249))+(((-1.0)*x1247*x1249)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.9207365892714)+(((-1.0)*x1244*x1245))+(((-1.0)*x1245*x1249))+(((1.70803309314118)*cj1))+((pz*x1248))+((pz*x1247))+((x1246*x1249))+((x1244*x1246))+(((-0.800640512409928)*sj1))))+IKsqr(((5.53576194288764)+(((0.800640512409928)*cj1))+(((-1.0)*x1244*x1247))+(((-1.0)*x1244*x1248))+(((-1.0)*pz*x1245))+((pz*x1246))+(((1.70803309314118)*sj1))+(((-1.0)*x1248*x1249))+(((-1.0)*x1247*x1249))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((12.9207365892714)+(((-1.0)*x1244*x1245))+(((-1.0)*x1245*x1249))+(((1.70803309314118)*cj1))+((pz*x1248))+((pz*x1247))+((x1246*x1249))+((x1244*x1246))+(((-0.800640512409928)*sj1))), ((5.53576194288764)+(((0.800640512409928)*cj1))+(((-1.0)*x1244*x1247))+(((-1.0)*x1244*x1248))+(((-1.0)*pz*x1245))+((pz*x1246))+(((1.70803309314118)*sj1))+(((-1.0)*x1248*x1249))+(((-1.0)*x1247*x1249))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1250=IKsin(j4);
IkReal x1251=IKcos(j4);
IkReal x1252=(cj0*px);
IkReal x1253=(py*sj0);
IkReal x1254=((1.0)*cj1);
evalcond[0]=((0.01)+((sj1*x1253))+((sj1*x1252))+(((-0.009)*x1250))+(((0.0192)*x1251))+((cj1*pz))+(((-0.04)*sj1)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-1.0)*x1253*x1254))+(((-0.009)*x1251))+(((-0.0192)*x1250))+(((-1.0)*x1252*x1254))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1255=(cj1*sj2);
IkReal x1256=(py*sj0);
IkReal x1257=(cj1*pz);
IkReal x1258=(cj0*px);
IkReal x1259=((75000.0)*sj1);
IkReal x1260=(pz*sj2);
IkReal x1261=((160000.0)*sj1);
CheckValue<IkReal> x1262 = IKatan2WithCheck(IkReal(((((48414.0)*sj2))+(((-1.0)*x1258*x1259))+(((-160000.0)*x1255*x1256))+(((-160000.0)*x1255*x1258))+(((6400.0)*x1255))+(((26880.0)*cj2))+(((-1.0)*x1256*x1259))+((x1260*x1261))+(((-75000.0)*x1257))+(((3000.0)*sj1)))),IkReal(((((-6400.0)*sj1))+(((-75000.0)*x1255*x1256))+(((-75000.0)*x1255*x1258))+(((3000.0)*x1255))+((x1258*x1261))+((x1256*x1261))+((x1259*x1260))+(((-57344.0)*cj2))+(((160000.0)*x1257))+(((20742.5)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1262.valid){
continue;
}
CheckValue<IkReal> x1263=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x1263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1262.value)+(((1.5707963267949)*(x1263.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1264=IKsin(j4);
IkReal x1265=IKcos(j4);
IkReal x1266=(cj0*px);
IkReal x1267=(py*sj0);
IkReal x1268=((1.0)*cj1);
IkReal x1269=((0.009)*x1264);
IkReal x1270=((0.0192)*x1265);
evalcond[0]=((-0.078)+(((-0.3584)*sj2))+(((-1.0)*cj2*x1269))+(((0.01)*cj2))+((cj2*x1270))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-0.0192)*x1264))+(((-1.0)*x1267*x1268))+(((-1.0)*x1266*x1268))+(((-0.009)*x1265))+((pz*sj1)));
evalcond[2]=(((sj1*x1266))+((sj1*x1267))+((cj1*pz))+(((-1.0)*sj2*x1270))+(((-0.01)*sj2))+(((-0.3584)*cj2))+(((-0.04)*sj1))+((sj2*x1269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1271=((160000.0)*cj0);
IkReal x1272=(cj1*cj2);
IkReal x1273=(px*sj0);
IkReal x1274=((75000.0)*cj0);
IkReal x1275=(cj2*pz*sj1);
IkReal x1276=(py*sj0*x1272);
CheckValue<IkReal> x1277=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1277.valid){
continue;
}
CheckValue<IkReal> x1278 = IKatan2WithCheck(IkReal(((-5850.0)+((py*x1274))+(((-1.0)*px*x1271*x1272))+(((-160000.0)*x1276))+(((6400.0)*x1272))+(((-75000.0)*x1273))+(((-26880.0)*sj2))+(((48414.0)*cj2))+(((160000.0)*x1275)))),IkReal(((12480.0)+(((3000.0)*x1272))+(((-1.0)*py*x1271))+(((75000.0)*x1275))+(((20742.5)*cj2))+(((-1.0)*px*x1272*x1274))+(((-75000.0)*x1276))+(((57344.0)*sj2))+(((160000.0)*x1273)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1277.value)))+(x1278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1279=IKsin(j4);
IkReal x1280=IKcos(j4);
IkReal x1281=(cj0*px);
IkReal x1282=(py*sj0);
IkReal x1283=((1.0)*cj1);
IkReal x1284=((0.009)*x1279);
IkReal x1285=((0.0192)*x1280);
evalcond[0]=((-0.078)+(((-0.3584)*sj2))+(((-1.0)*cj2*x1284))+(((0.01)*cj2))+((cj2*x1285))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-0.0192)*x1279))+((pz*sj1))+(((-0.009)*x1280))+(((-1.0)*x1281*x1283))+(((-1.0)*x1282*x1283)));
evalcond[2]=(((cj1*pz))+(((-0.01)*sj2))+((sj2*x1284))+(((-0.3584)*cj2))+(((-0.04)*sj1))+((sj1*x1282))+((sj1*x1281))+(((-1.0)*sj2*x1285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1286=((20.0160128102482)*px);
IkReal x1287=(cj0*sj1);
IkReal x1288=(cj1*pz);
IkReal x1289=((42.7008273285295)*py);
IkReal x1290=(sj0*sj1);
IkReal x1291=((20.0160128102482)*py);
IkReal x1292=((42.7008273285295)*px);
if( IKabs(((-1.32852949025887)+(((-1.0)*sj0*x1292))+((cj0*x1289))+(((-20.0160128102482)*x1288))+(((-1.0)*x1290*x1291))+(((-1.0)*x1286*x1287))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14358153189218)+((x1287*x1292))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x1288))+((cj0*x1291))+(((-1.0)*sj0*x1286))+((x1289*x1290)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.32852949025887)+(((-1.0)*sj0*x1292))+((cj0*x1289))+(((-20.0160128102482)*x1288))+(((-1.0)*x1290*x1291))+(((-1.0)*x1286*x1287))+(((0.800640512409928)*sj1))))+IKsqr(((-1.14358153189218)+((x1287*x1292))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x1288))+((cj0*x1291))+(((-1.0)*sj0*x1286))+((x1289*x1290))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.32852949025887)+(((-1.0)*sj0*x1292))+((cj0*x1289))+(((-20.0160128102482)*x1288))+(((-1.0)*x1290*x1291))+(((-1.0)*x1286*x1287))+(((0.800640512409928)*sj1))), ((-1.14358153189218)+((x1287*x1292))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x1288))+((cj0*x1291))+(((-1.0)*sj0*x1286))+((x1289*x1290))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1293=IKsin(j4);
IkReal x1294=IKcos(j4);
evalcond[0]=((-0.0358)+(((-0.009)*x1294))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0192)*x1293)));
evalcond[1]=((-0.01)+(((0.009)*x1293))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1))+(((-0.0192)*x1294)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1295=((20.0160128102482)*px);
IkReal x1296=(cj0*sj1);
IkReal x1297=(cj1*pz);
IkReal x1298=((42.7008273285295)*py);
IkReal x1299=(sj0*sj1);
IkReal x1300=((20.0160128102482)*py);
IkReal x1301=((42.7008273285295)*px);
if( IKabs(((2.95863357352549)+(((-20.0160128102482)*x1297))+(((-1.0)*x1299*x1300))+(((-1.0)*cj0*x1298))+(((-1.0)*x1295*x1296))+((sj0*x1301))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.866026154256739)+(((42.7008273285295)*x1297))+((sj0*x1295))+(((-1.0)*cj0*x1300))+(((-1.70803309314118)*sj1))+((x1296*x1301))+((x1298*x1299)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((2.95863357352549)+(((-20.0160128102482)*x1297))+(((-1.0)*x1299*x1300))+(((-1.0)*cj0*x1298))+(((-1.0)*x1295*x1296))+((sj0*x1301))+(((0.800640512409928)*sj1))))+IKsqr(((0.866026154256739)+(((42.7008273285295)*x1297))+((sj0*x1295))+(((-1.0)*cj0*x1300))+(((-1.70803309314118)*sj1))+((x1296*x1301))+((x1298*x1299))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((2.95863357352549)+(((-20.0160128102482)*x1297))+(((-1.0)*x1299*x1300))+(((-1.0)*cj0*x1298))+(((-1.0)*x1295*x1296))+((sj0*x1301))+(((0.800640512409928)*sj1))), ((0.866026154256739)+(((42.7008273285295)*x1297))+((sj0*x1295))+(((-1.0)*cj0*x1300))+(((-1.70803309314118)*sj1))+((x1296*x1301))+((x1298*x1299))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1302=IKsin(j4);
IkReal x1303=IKcos(j4);
evalcond[0]=((-0.0646)+(((0.0192)*x1302))+(((0.009)*x1303))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.01)+(((-0.0192)*x1303))+((cj1*pz))+((cj0*px*sj1))+(((0.009)*x1302))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1304=(py*sj0);
IkReal x1305=((75000.0)*cj1);
IkReal x1306=(pz*sj1);
IkReal x1307=((160000.0)*cj1);
IkReal x1308=(pz*sj3);
IkReal x1309=(cj0*px);
IkReal x1310=(sj1*sj3);
CheckValue<IkReal> x1311=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1311.valid){
continue;
}
CheckValue<IkReal> x1312 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((-6400.0)*cj1))+((x1307*x1309))+(((3054.0)*sj3))+(((-75000.0)*x1309*x1310))+(((-160000.0)*x1306))+(((3000.0)*x1310))+((x1304*x1307))+(((-1.0)*x1305*x1308))+(((-75000.0)*x1304*x1310)))),IkReal(((-21262.5)+(((-75000.0)*x1306))+(((-6400.0)*x1310))+(((160000.0)*x1304*x1310))+((x1305*x1309))+(((160000.0)*x1309*x1310))+(((-3000.0)*cj1))+((x1307*x1308))+((x1304*x1305))+(((-520.0)*sj3))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1311.value)))+(x1312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1313=IKsin(j4);
IkReal x1314=IKcos(j4);
IkReal x1315=(cj0*px);
IkReal x1316=((1.0)*cj1);
IkReal x1317=(py*sj0);
IkReal x1318=((0.0192)*x1313);
IkReal x1319=((0.009)*x1314);
evalcond[0]=((-0.01)+(((-0.0192)*x1314))+((cj1*pz))+(((0.009)*x1313))+(((-0.04)*sj1))+((sj1*x1315))+((sj1*x1317)));
evalcond[1]=((-0.0502)+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3))+(((-1.0)*cj3*x1319))+(((-1.0)*cj3*x1318)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*x1315*x1316))+((sj3*x1318))+((sj3*x1319))+(((0.04)*cj1))+(((-0.0144)*sj3))+((pz*sj1))+(((-1.0)*x1316*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1320=(px*sj0);
IkReal x1321=((160000.0)*cj0);
IkReal x1322=((160000.0)*cj3);
IkReal x1323=(cj1*pz);
IkReal x1324=(cj3*sj1);
IkReal x1325=((75000.0)*cj0);
IkReal x1326=(py*sj0);
CheckValue<IkReal> x1327=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1327.valid){
continue;
}
CheckValue<IkReal> x1328 = IKatan2WithCheck(IkReal(((-8032.0)+(((3054.0)*cj3))+((py*x1321))+(((-75000.0)*cj3*x1323))+(((61792.0)*sj3))+(((-75000.0)*x1324*x1326))+(((-1.0)*px*x1324*x1325))+(((3000.0)*x1324))+(((-160000.0)*x1320)))),IkReal(((-3765.0)+(((-6400.0)*x1324))+((py*x1325))+(((-75000.0)*x1320))+((x1322*x1323))+((sj1*x1322*x1326))+((px*x1321*x1324))+(((-520.0)*cj3))+(((28965.0)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1327.value)))+(x1328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1329=IKsin(j4);
IkReal x1330=IKcos(j4);
IkReal x1331=(cj0*px);
IkReal x1332=((1.0)*cj1);
IkReal x1333=(py*sj0);
IkReal x1334=((0.0192)*x1329);
IkReal x1335=((0.009)*x1330);
evalcond[0]=((-0.01)+(((-0.0192)*x1330))+((cj1*pz))+(((0.009)*x1329))+((sj1*x1333))+((sj1*x1331))+(((-0.04)*sj1)));
evalcond[1]=((-0.0502)+(((-1.0)*cj3*x1335))+(((-1.0)*cj3*x1334))+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+((sj3*x1335))+((sj3*x1334))+(((-1.0)*x1331*x1332))+(((-1.0)*x1332*x1333))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1336=((20.0160128102482)*px);
IkReal x1337=(cj0*sj1);
IkReal x1338=(cj1*pz);
IkReal x1339=((42.7008273285295)*py);
IkReal x1340=(sj0*sj1);
IkReal x1341=((20.0160128102482)*py);
IkReal x1342=((42.7008273285295)*px);
if( IKabs(((5.33279957299173)+((x1336*x1337))+((sj0*x1342))+((x1340*x1341))+(((-1.0)*cj0*x1339))+(((20.0160128102482)*x1338))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.97891646650654)+(((-1.0)*cj0*x1341))+(((-1.0)*x1339*x1340))+((sj0*x1336))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x1338))+(((-1.0)*x1337*x1342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((5.33279957299173)+((x1336*x1337))+((sj0*x1342))+((x1340*x1341))+(((-1.0)*cj0*x1339))+(((20.0160128102482)*x1338))+(((-0.800640512409928)*sj1))))+IKsqr(((1.97891646650654)+(((-1.0)*cj0*x1341))+(((-1.0)*x1339*x1340))+((sj0*x1336))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x1338))+(((-1.0)*x1337*x1342))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((5.33279957299173)+((x1336*x1337))+((sj0*x1342))+((x1340*x1341))+(((-1.0)*cj0*x1339))+(((20.0160128102482)*x1338))+(((-0.800640512409928)*sj1))), ((1.97891646650654)+(((-1.0)*cj0*x1341))+(((-1.0)*x1339*x1340))+((sj0*x1336))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x1338))+(((-1.0)*x1337*x1342))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1343=IKcos(j4);
IkReal x1344=IKsin(j4);
evalcond[0]=((-0.1202)+(((0.009)*x1343))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0192)*x1344)));
evalcond[1]=((0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.009)*x1344))+((py*sj0*sj1))+(((0.0192)*x1343)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1345=((20.0160128102482)*px);
IkReal x1346=(cj0*sj1);
IkReal x1347=(cj1*pz);
IkReal x1348=((42.7008273285295)*py);
IkReal x1349=(sj0*sj1);
IkReal x1350=((20.0160128102482)*py);
IkReal x1351=((42.7008273285295)*px);
if( IKabs(((-3.70269548972511)+((x1345*x1346))+(((20.0160128102482)*x1347))+((cj0*x1348))+((x1349*x1350))+(((-1.0)*sj0*x1351))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.25647184414198)+(((-42.7008273285295)*x1347))+(((-1.0)*x1346*x1351))+(((-1.0)*x1348*x1349))+(((-1.0)*sj0*x1345))+(((1.70803309314118)*sj1))+((cj0*x1350)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.70269548972511)+((x1345*x1346))+(((20.0160128102482)*x1347))+((cj0*x1348))+((x1349*x1350))+(((-1.0)*sj0*x1351))+(((-0.800640512409928)*sj1))))+IKsqr(((-2.25647184414198)+(((-42.7008273285295)*x1347))+(((-1.0)*x1346*x1351))+(((-1.0)*x1348*x1349))+(((-1.0)*sj0*x1345))+(((1.70803309314118)*sj1))+((cj0*x1350))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.70269548972511)+((x1345*x1346))+(((20.0160128102482)*x1347))+((cj0*x1348))+((x1349*x1350))+(((-1.0)*sj0*x1351))+(((-0.800640512409928)*sj1))), ((-2.25647184414198)+(((-42.7008273285295)*x1347))+(((-1.0)*x1346*x1351))+(((-1.0)*x1348*x1349))+(((-1.0)*sj0*x1345))+(((1.70803309314118)*sj1))+((cj0*x1350))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1352=IKcos(j4);
IkReal x1353=IKsin(j4);
evalcond[0]=((-0.0914)+(((-1.0)*px*sj0))+(((-0.009)*x1352))+((cj0*py))+(((-0.0192)*x1353)));
evalcond[1]=((0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.009)*x1353))+((py*sj0*sj1))+(((0.0192)*x1352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1354=(py*sj0);
IkReal x1355=((75000.0)*cj1);
IkReal x1356=(pz*sj1);
IkReal x1357=((160000.0)*cj1);
IkReal x1358=(pz*sj3);
IkReal x1359=(cj0*px);
IkReal x1360=(sj1*sj3);
CheckValue<IkReal> x1361=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1361.valid){
continue;
}
CheckValue<IkReal> x1362 = IKatan2WithCheck(IkReal(((-45360.0)+(((-61792.0)*cj3))+(((-160000.0)*x1356))+((x1357*x1359))+((x1355*x1358))+(((75000.0)*x1359*x1360))+(((-6400.0)*cj1))+(((-3000.0)*x1360))+((x1354*x1357))+(((3054.0)*sj3))+(((75000.0)*x1354*x1360)))),IkReal(((-21262.5)+((x1355*x1359))+(((-3000.0)*cj1))+((x1354*x1355))+(((-75000.0)*x1356))+(((-520.0)*sj3))+(((-1.0)*x1357*x1358))+(((6400.0)*x1360))+(((-160000.0)*x1354*x1360))+(((-160000.0)*x1359*x1360))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1361.value)))+(x1362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1363=IKsin(j4);
IkReal x1364=IKcos(j4);
IkReal x1365=(cj0*px);
IkReal x1366=((1.0)*cj1);
IkReal x1367=(py*sj0);
IkReal x1368=((0.0192)*x1363);
IkReal x1369=((0.009)*x1364);
evalcond[0]=((0.01)+(((0.0192)*x1364))+((sj1*x1367))+((sj1*x1365))+((cj1*pz))+(((-0.04)*sj1))+(((-0.009)*x1363)));
evalcond[1]=((-0.1058)+(((-0.3862)*sj3))+((cj3*x1369))+((cj3*x1368))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((-1.0)*x1366*x1367))+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x1365*x1366))+((pz*sj1))+((sj3*x1369))+((sj3*x1368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1370=(px*sj0);
IkReal x1371=((160000.0)*cj0);
IkReal x1372=(cj3*sj1);
IkReal x1373=((75000.0)*cj0);
IkReal x1374=(py*sj0);
IkReal x1375=(cj1*cj3*pz);
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1376.valid){
continue;
}
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal(((16928.0)+(((3054.0)*cj3))+((px*x1372*x1373))+(((61792.0)*sj3))+(((75000.0)*x1375))+(((160000.0)*x1370))+(((75000.0)*x1372*x1374))+(((-1.0)*py*x1371))+(((-3000.0)*x1372)))),IkReal(((7935.0)+(((75000.0)*x1370))+(((-160000.0)*x1372*x1374))+(((-160000.0)*x1375))+(((-1.0)*px*x1371*x1372))+(((6400.0)*x1372))+(((-520.0)*cj3))+(((28965.0)*sj3))+(((-1.0)*py*x1373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1376.value)))+(x1377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1378=IKsin(j4);
IkReal x1379=IKcos(j4);
IkReal x1380=(cj0*px);
IkReal x1381=((1.0)*cj1);
IkReal x1382=(py*sj0);
IkReal x1383=((0.0192)*x1378);
IkReal x1384=((0.009)*x1379);
evalcond[0]=((0.01)+(((0.0192)*x1379))+(((-0.009)*x1378))+((cj1*pz))+((sj1*x1382))+((sj1*x1380))+(((-0.04)*sj1)));
evalcond[1]=((-0.1058)+((cj3*x1384))+((cj3*x1383))+(((-0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+((sj3*x1384))+((sj3*x1383))+(((-1.0)*x1380*x1381))+(((-1.0)*x1381*x1382))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1385=(cj2*cj3);
IkReal x1386=(cj0*px);
IkReal x1387=(sj2*sj3);
IkReal x1388=((96.0)*cj1);
IkReal x1389=((45.0)*cj1);
IkReal x1390=(py*sj0);
IkReal x1391=((3.84)*cj1);
IkReal x1392=(cj2*sj3);
IkReal x1393=((96.0)*sj1);
IkReal x1394=(sj1*sj3);
IkReal x1395=((1.8)*cj1);
IkReal x1396=(cj3*sj2);
IkReal x1397=(pz*sj3);
IkReal x1398=((45.0)*pz*sj1);
IkReal x1399=((45.0)*x1394);
IkReal x1400=(cj1*sj2*x1390);
CheckValue<IkReal> x1401 = IKatan2WithCheck(IkReal(((((-1.0)*sj2*x1388*x1390))+(((-1.8)*x1394))+((x1390*x1399))+(((37.0752)*x1396))+(((17.379)*cj2))+((pz*sj2*x1393))+((sj2*x1391))+(((-1.0)*x1385*x1389*x1390))+((x1386*x1399))+((x1389*x1397))+((x1385*x1395))+((x1385*x1398))+(((-1.8324)*x1387))+(((-1.0)*x1385*x1386*x1389))+(((1.251)*x1392))+(((27.216)*sj2))+(((12.7575)*x1385))+(((-1.0)*sj2*x1386*x1388)))),IkReal(((((-1.0)*pz*x1385*x1393))+(((-1.0)*x1385*x1391))+(((-1.0)*sj2*x1389*x1390))+((x1385*x1386*x1388))+(((12.7575)*sj2))+(((-2.6688)*x1392))+(((-37.0752)*cj2))+(((17.379)*x1396))+(((-1.0)*sj3*x1386*x1393))+(((-1.0)*sj3*x1390*x1393))+((sj2*x1395))+((sj2*x1398))+(((-27.216)*x1385))+(((-1.0)*x1388*x1397))+(((0.312)*x1387))+(((3.84)*x1394))+(((-1.0)*sj2*x1386*x1389))+((x1385*x1388*x1390)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1401.valid){
continue;
}
CheckValue<IkReal> x1402=IKPowWithIntegerCheck(IKsign(x1387),-1);
if(!x1402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1401.value)+(((-1.5707963267949)*(x1402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1403=IKcos(j4);
IkReal x1404=IKsin(j4);
IkReal x1405=(cj0*px);
IkReal x1406=((0.0144)*cj3);
IkReal x1407=(py*sj0);
IkReal x1408=((0.3862)*sj3);
IkReal x1409=((1.0)*cj1);
IkReal x1410=(cj2*cj3);
IkReal x1411=(sj2*x1404);
IkReal x1412=((0.0192)*x1404);
IkReal x1413=((0.0192)*x1403);
IkReal x1414=((0.009)*x1403);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x1405*x1409))+((pz*sj1))+(((-1.0)*x1407*x1409))+((sj3*x1414))+((sj3*x1412)));
evalcond[1]=((-0.078)+((cj2*x1413))+(((-0.0192)*cj3*x1411))+(((0.01)*cj2))+((sj2*x1408))+((sj2*x1406))+(((-0.009)*cj2*x1404))+(((0.0278)*sj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj3*sj2*x1414)));
evalcond[2]=((((0.0278)*cj2))+(((0.009)*x1411))+((cj1*pz))+((sj1*x1405))+((sj1*x1407))+(((-0.01)*sj2))+(((-1.0)*x1410*x1412))+(((-1.0)*x1410*x1414))+(((-0.04)*sj1))+(((-1.0)*sj2*x1413))+((cj2*x1406))+((cj2*x1408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1415=(sj1*sj2);
IkReal x1416=(cj2*sj1);
IkReal x1417=(cj2*py);
IkReal x1418=(cj2*px);
IkReal x1419=((0.0192)*cj3);
IkReal x1420=((0.009)*sj2);
IkReal x1421=(cj0*py);
IkReal x1422=(cj1*pz);
IkReal x1423=((0.0192)*sj2);
IkReal x1424=(px*sj0);
IkReal x1425=(py*sj0);
IkReal x1426=(cj2*cj3);
IkReal x1427=(cj0*px);
IkReal x1428=((0.009)*cj0*cj3);
IkReal x1429=((0.009)*cj3*sj0);
CheckValue<IkReal> x1430 = IKatan2WithCheck(IkReal(((-0.00053376)+(((-1.0)*x1421*x1423))+(((-0.00036648)*cj3))+((x1423*x1424))+(((-0.00036)*cj3*x1415))+(((-1.0)*x1417*x1428))+(((0.000702)*x1426))+(((-0.00741504)*sj3))+(((-0.0192)*x1416*x1427))+(((-0.0192)*x1416*x1425))+((cj3*x1420*x1422))+(((-0.0192)*cj2*x1422))+(((0.000768)*x1416))+(((0.0014976)*sj2))+((x1418*x1429))+(((0.009)*cj3*x1415*x1427))+(((0.009)*cj3*x1415*x1425)))),IkReal(((-0.0002502)+((cj0*x1417*x1419))+(((-1.0)*x1415*x1419*x1427))+(((-1.0)*x1415*x1419*x1425))+((x1420*x1424))+(((-1.0)*sj0*x1418*x1419))+(((-1.0)*x1420*x1421))+(((0.00036)*x1416))+(((0.000702)*sj2))+(((6.24e-5)*cj3))+(((-1.0)*sj2*x1419*x1422))+(((-0.009)*x1416*x1425))+(((-0.009)*x1416*x1427))+(((0.000768)*cj3*x1415))+(((-0.0034758)*sj3))+(((-0.009)*cj2*x1422))+(((-0.0014976)*x1426)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1430.valid){
continue;
}
CheckValue<IkReal> x1431=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1431.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1430.value)+(((-1.5707963267949)*(x1431.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1432=IKcos(j4);
IkReal x1433=IKsin(j4);
IkReal x1434=(cj0*px);
IkReal x1435=((0.0144)*cj3);
IkReal x1436=(py*sj0);
IkReal x1437=((0.3862)*sj3);
IkReal x1438=((1.0)*cj1);
IkReal x1439=(cj2*cj3);
IkReal x1440=(sj2*x1433);
IkReal x1441=((0.0192)*x1433);
IkReal x1442=((0.0192)*x1432);
IkReal x1443=((0.009)*x1432);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*x1436*x1438))+(((0.04)*cj1))+(((-1.0)*x1434*x1438))+(((-0.0144)*sj3))+((sj3*x1441))+((sj3*x1443))+((pz*sj1)));
evalcond[1]=((-0.078)+(((-0.009)*cj2*x1433))+((sj2*x1437))+((sj2*x1435))+(((0.01)*cj2))+(((-1.0)*cj3*sj2*x1443))+(((0.0278)*sj2))+((cj2*x1442))+(((-0.0192)*cj3*x1440))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=((((0.0278)*cj2))+(((-1.0)*sj2*x1442))+(((-1.0)*x1439*x1441))+(((-1.0)*x1439*x1443))+((cj1*pz))+(((-0.01)*sj2))+((sj1*x1434))+((sj1*x1436))+(((-0.04)*sj1))+(((0.009)*x1440))+((cj2*x1437))+((cj2*x1435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1444=((45.0)*py);
IkReal x1445=(cj0*sj3);
IkReal x1446=(cj3*sj2);
IkReal x1447=((1.8)*cj1);
IkReal x1448=(cj1*cj2);
IkReal x1449=((96.0)*py);
IkReal x1450=(cj2*cj3);
IkReal x1451=(sj2*sj3);
IkReal x1452=(cj2*sj3);
IkReal x1453=(cj1*sj0);
IkReal x1454=((45.0)*pz*sj1);
IkReal x1455=((96.0)*cj0*px);
IkReal x1456=((45.0)*cj0*px);
IkReal x1457=((96.0)*pz*sj1);
IkReal x1458=(px*sj0*sj3);
CheckValue<IkReal> x1459 = IKatan2WithCheck(IkReal((((x1444*x1445))+(((12.7575)*x1446))+(((-1.0)*cj2*x1457))+(((-1.0)*x1444*x1446*x1453))+((x1446*x1454))+(((-1.0)*cj1*x1446*x1456))+((x1448*x1455))+(((1.8324)*x1452))+(((1.251)*x1451))+(((-27.216)*cj2))+(((17.379)*sj2))+(((-37.0752)*x1450))+(((-3.84)*x1448))+((x1446*x1447))+((sj0*x1448*x1449))+(((-45.0)*x1458))+(((-3.51)*sj3)))),IkReal(((((-1.0)*cj2*x1447))+(((-1.0)*cj2*x1454))+((x1446*x1449*x1453))+(((-1.0)*x1445*x1449))+((cj1*x1446*x1455))+(((-12.7575)*cj2))+(((-27.216)*x1446))+(((-17.379)*x1450))+((x1448*x1456))+(((-3.84)*cj1*x1446))+((sj0*x1444*x1448))+(((-0.312)*x1452))+(((-1.0)*x1446*x1457))+(((7.488)*sj3))+(((-37.0752)*sj2))+(((96.0)*x1458))+(((-2.6688)*x1451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1459.valid){
continue;
}
CheckValue<IkReal> x1460=IKPowWithIntegerCheck(IKsign(x1452),-1);
if(!x1460.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1459.value)+(((1.5707963267949)*(x1460.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1461=IKcos(j4);
IkReal x1462=IKsin(j4);
IkReal x1463=(cj0*px);
IkReal x1464=((0.0144)*cj3);
IkReal x1465=(py*sj0);
IkReal x1466=((0.3862)*sj3);
IkReal x1467=((1.0)*cj1);
IkReal x1468=(cj2*cj3);
IkReal x1469=(sj2*x1462);
IkReal x1470=((0.0192)*x1462);
IkReal x1471=((0.0192)*x1461);
IkReal x1472=((0.009)*x1461);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x1463*x1467))+((sj3*x1470))+((sj3*x1472))+((pz*sj1))+(((-1.0)*x1465*x1467)));
evalcond[1]=((-0.078)+((sj2*x1466))+((sj2*x1464))+(((-0.0192)*cj3*x1469))+(((0.01)*cj2))+(((-1.0)*cj3*sj2*x1472))+((cj2*x1471))+(((0.0278)*sj2))+(((-0.009)*cj2*x1462))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=(((cj2*x1466))+((cj2*x1464))+(((0.0278)*cj2))+(((0.009)*x1469))+(((-1.0)*sj2*x1471))+((cj1*pz))+(((-0.01)*sj2))+(((-1.0)*x1468*x1472))+(((-1.0)*x1468*x1470))+(((-0.04)*sj1))+((sj1*x1463))+((sj1*x1465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - inmoov (1066af9951381879fcba227d61661f1f)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
