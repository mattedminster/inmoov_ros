/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-06-16 19:06:19.592896
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34;
x0=IKsin(j[1]);
x1=IKsin(j[3]);
x2=IKcos(j[1]);
x3=IKcos(j[2]);
x4=IKcos(j[3]);
x5=IKcos(j[4]);
x6=IKsin(j[2]);
x7=IKsin(j[4]);
x8=IKsin(j[0]);
x9=IKcos(j[0]);
x10=((0.0192)*x3);
x11=((0.2835)*x2);
x12=((0.0278)*x6);
x13=((0.3862)*x0);
x14=((0.0192)*x4);
x15=((0.0278)*x3);
x16=((0.01)*x0);
x17=((0.009)*x3);
x18=((0.01)*x3);
x19=((0.0192)*x0);
x20=((0.0144)*x3);
x21=((0.009)*x4);
x22=(x2*x4);
x23=(x6*x9);
x24=(x0*x9);
x25=(x1*x2);
x26=(x6*x8);
x27=(x2*x6);
x28=(x0*x1);
x29=((1.0)*x26);
x30=((0.009)*x0*x6);
x31=((0.0144)*x25);
x32=(x0*x3*x8);
x33=(x32+x23);
x34=((((-1.0)*x29))+((x24*x3)));
IkReal x35=((1.0)*x22);
eetrans[0]=((((-0.01)*x27))+((x7*((((x1*x19))+(((-1.0)*x10*x35))))))+(((0.0144)*x28))+(((-0.009)*x27*x7))+(((-1.0)*x20*x35))+(((-0.3862)*x25*x3))+(((-0.2835)*x0))+(((-0.0192)*x27*x5))+(((-1.0)*x15*x2))+((x5*(((((-0.009)*x28))+((x17*x22))))))+(((-1.0)*x13*x4)));
IkReal x36=(x25*x8);
IkReal x37=((1.0)*x26);
IkReal x38=((1.0)*x8);
IkReal x39=(x0*x38);
eetrans[1]=((-0.143)+((x18*x9))+(((-0.078)*x9))+(((-1.0)*x12*x9))+((x7*(((((-1.0)*x14*x33))+(((-0.0192)*x36))))))+((x7*((((x17*x9))+(((-0.009)*x0*x26))))))+((x5*((((x21*x33))+(((0.009)*x36))))))+(((0.04)*x8))+(((-1.0)*x31*x38))+(((0.3862)*x22*x8))+((x1*(((((-1.0)*x13*x3*x38))+(((-0.3862)*x23))))))+((x11*x8))+((x5*(((((-1.0)*x19*x37))+((x10*x9))))))+(((-1.0)*x15*x39))+((x4*(((((-0.0144)*x23))+(((-1.0)*x20*x39))))))+(((-1.0)*x16*x37)));
IkReal x40=(x25*x9);
eetrans[2]=((0.298)+((x18*x8))+((x31*x9))+(((-0.078)*x8))+(((-1.0)*x12*x8))+(((-1.0)*x11*x9))+((x7*(((((0.009)*x0*x23))+((x17*x8))))))+((x4*(((((-0.0144)*x26))+((x20*x24))))))+((x5*(((((-0.009)*x40))+(((-1.0)*x21*x34))))))+((x7*(((((0.0192)*x40))+((x14*x34))))))+((x16*x23))+((x5*((((x19*x23))+((x10*x8))))))+(((-0.04)*x9))+((x1*(((((-0.3862)*x26))+((x13*x3*x9))))))+(((-0.3862)*x22*x9))+((x15*x24)));
eerot[0]=(((x0*x4))+((x25*x3)));
eerot[1]=((((-1.0)*x22*x8))+((x1*x33)));
eerot[2]=(((x22*x9))+((x1*(((((-1.0)*x24*x3))+x29)))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=((-1.0)*r02);
new_px=((0.298)+(((-1.0)*pz)));
new_r01=r01;
new_py=((0.143)+py);
new_r02=r00;
new_pz=px;
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
IkReal op[72], zeror[48];
int numroots;;
IkReal x41=(px*r00);
IkReal x42=(pz*r02);
IkReal x43=(py*r01);
IkReal x44=((0.078)*r01);
IkReal x45=((0.0278)*r02);
IkReal x46=((0.0278)*r01);
IkReal x47=((0.3235)*r00);
IkReal x48=((0.567)*r02);
IkReal x49=((0.0556)*r00);
IkReal x50=((0.2435)*r00);
IkReal x51=px*px;
IkReal x52=pz*pz;
IkReal x53=py*py;
IkReal x54=((0.7724)*pz);
IkReal x55=((0.01112256)*r00);
IkReal x56=((0.0288)*px);
IkReal x57=((0.7724)*py);
IkReal x58=((0.0043368)*r02);
IkReal x59=((0.050466)*r00);
IkReal x60=((0.04995163)*r01);
IkReal x61=((0.088452)*r02);
IkReal x62=((0.0086736)*r00);
IkReal x63=((0.004448)*r01);
IkReal x64=((1.5448)*px);
IkReal x65=((0.0576)*pz);
IkReal x66=((0.02224512)*r02);
IkReal x67=((0.09531163)*r01);
IkReal x68=((0.037986)*r00);
IkReal x69=((0.156)*r00);
IkReal x70=((0.0576)*py);
IkReal x71=((0.02224512)*r01);
IkReal x72=((0.100932)*r01);
IkReal x73=((0.09990326)*r00);
IkReal x74=((0.008896)*r00);
IkReal x75=((0.0173472)*r01);
IkReal x76=((3.0896)*py);
IkReal x77=((0.19062326)*r00);
IkReal x78=((0.075972)*r01);
IkReal x79=((0.03934363)*r02);
IkReal x80=((0.13044726)*r00);
IkReal x81=((0.01088)*r01);
IkReal x82=((0.08470363)*r02);
IkReal x83=((0.03622363)*r02);
IkReal x84=((0.01408)*r01);
IkReal x85=((0.12420726)*r00);
IkReal x86=((0.08158363)*r02);
IkReal x87=((0.487)*r01);
IkReal x88=(px*r02);
IkReal x89=((4.0)*r01);
IkReal x90=(px*py);
IkReal x91=((1.0)*r02);
IkReal x92=((1.0)*r01);
IkReal x93=(pz*r00);
IkReal x94=(py*r02);
IkReal x95=(py*r00);
IkReal x96=(pz*r01);
IkReal x97=((2.0)*r00);
IkReal x98=((0.1112)*r01);
IkReal x99=((2.0)*pz);
IkReal x100=((0.647)*r01);
IkReal x101=(px*r01);
IkReal x102=((0.136)*x96);
IkReal x103=((0.136)*x94);
IkReal x104=(r01*x51);
IkReal x105=((0.0556)*x96);
IkReal x106=(r01*x52);
IkReal x107=((0.0556)*x94);
IkReal x108=((0.156)*x41);
IkReal x109=((0.156)*x43);
IkReal x110=((0.156)*x42);
IkReal x111=((0.647)*x95);
IkReal x112=(px*x100);
IkReal x113=((0.647)*x88);
IkReal x114=(pz*x42);
IkReal x115=((0.647)*x93);
IkReal x116=(px*x98);
IkReal x117=((1.134)*x96);
IkReal x118=((1.134)*x94);
IkReal x119=((0.1112)*x95);
IkReal x120=((0.16)*x42);
IkReal x121=((0.16)*x43);
IkReal x122=((0.16)*x41);
IkReal x123=(px*x87);
IkReal x124=((0.487)*x95);
IkReal x125=((0.176)*x94);
IkReal x126=(r02*x53);
IkReal x127=(r02*x51);
IkReal x128=((0.487)*x88);
IkReal x129=((0.487)*x93);
IkReal x130=((0.176)*x96);
IkReal x131=((-0.0556)*r00);
IkReal x132=(x87+(((-1.0)*x69)));
IkReal x133=((0.272)*x88);
IkReal x134=((0.272)*x93);
IkReal x135=((0.1112)*x88);
IkReal x136=((0.1112)*x93);
IkReal x137=((1.294)*x94);
IkReal x138=((1.294)*x96);
IkReal x139=((2.268)*x88);
IkReal x140=((2.268)*x93);
IkReal x141=((0.352)*x93);
IkReal x142=((0.974)*x94);
IkReal x143=((0.352)*x88);
IkReal x144=((0.974)*x96);
IkReal x145=((((-1.0)*x49))+x48);
IkReal x146=((-0.0278)*r01);
IkReal x147=((0.272)*x95);
IkReal x148=((0.272)*x101);
IkReal x149=(py*x43);
IkReal x150=((0.352)*x101);
IkReal x151=((0.352)*x95);
IkReal x152=((-0.0070128)+x82);
IkReal x153=((-0.0093168)+x83);
IkReal x154=(x41*x99);
IkReal x155=(x43*x99);
IkReal x156=((2.0)*py*x41);
IkReal x157=((1.0)*x149);
IkReal x158=((2.0)*py*x42);
IkReal x159=(x53*x91);
IkReal x160=(x51*x91);
IkReal x161=((2.0)*px*x41);
IkReal x162=((4.0)*px*x42);
IkReal x163=((4.0)*px*x43);
IkReal x164=(x52*x97);
IkReal x165=(x53*x97);
IkReal x166=((1.0)*x114);
IkReal x167=((((-1.0)*x100))+(((-1.0)*x69)));
IkReal x168=((8.0)*py*x42);
IkReal x169=((8.0)*py*x41);
IkReal x170=((4.0)*x149);
IkReal x171=(x48+x49);
IkReal x172=(x52*x92);
IkReal x173=(x51*x92);
IkReal x174=(x65+x66);
IkReal x175=(x73+x72);
IkReal x176=((-0.061792)+x150);
IkReal x177=(x55+x56);
IkReal x178=((-0.0602472)+x149);
IkReal x179=(x44+x50);
IkReal x180=(x47+x45);
IkReal x181=(x62+x63);
IkReal x182=(x105+x58);
IkReal x183=(x107+x58);
IkReal x184=(x111+x59);
IkReal x185=(x129+x102);
IkReal x186=(x125+x128);
IkReal x187=(x181+x61);
IkReal x188=(x117+x116);
IkReal x189=(x125+x115);
IkReal x190=(x130+x129);
IkReal x191=(x128+x103);
IkReal x192=(x119+x118);
IkReal x193=(x116+x118);
IkReal x194=(x115+x103);
IkReal x195=(x113+x102);
IkReal x196=(x130+x113);
IkReal x197=(x117+x119);
IkReal x198=((-0.0070128)+x126+x127);
IkReal x199=((0.3862)+x42+x43+x41);
IkReal x200=(x134+x71+x70);
IkReal x201=((-0.0602472)+x104+x106);
IkReal x202=((-0.0093168)+x126+x127);
IkReal x203=(x143+x71+x70);
IkReal x204=(((x51*x89))+((x52*x89)));
IkReal x205=(x164+x165);
IkReal x206=(x160+x159);
IkReal x207=(x199+x44+x45);
IkReal x208=(x156+x158+x57+x60);
IkReal x209=(x151+x122+x120+x121);
IkReal x210=(x155+x154+x114+x54);
IkReal x211=((0.061792)+x147+x122+x120+x121);
IkReal x212=(x157+x110+x108+x109);
IkReal x213=(x162+x163+x161+x64);
IkReal x214=(x166+x155+x154+x54);
IkReal x215=(x156+x158+x57+x67+x68);
IkReal x216=(x170+x168+x169+x76);
IkReal x217=(x173+x172+x124+x110+x108+x109);
IkReal x218=(x173+x172+x112+x110+x108+x109+x59);
op[0]=((((-1.0)*x47))+x207);
op[1]=x46;
op[2]=x171;
op[3]=0;
op[4]=((((-1.0)*x45))+x179+x199);
op[5]=x46;
op[6]=x46;
op[7]=((((-1.0)*x180))+x199+x44);
op[8]=0;
op[9]=x145;
op[10]=x46;
op[11]=(x179+x199+x45);
op[12]=((((-1.0)*x79))+(((-1.0)*x195))+x177+x194+x202+(((-1.0)*x214)));
op[13]=((((-1.0)*x105))+(((-1.0)*x112))+x184+x183+(((-1.0)*x208))+x201+(((-1.0)*x212)));
op[14]=((((-1.0)*x148))+(((-1.0)*x174))+x211+x205+x81+(((-1.0)*x213))+(((-1.0)*x80)));
op[15]=((((-1.0)*x193))+x197+x181+(((-1.0)*x61)));
op[16]=((((-1.0)*x177))+(((-1.0)*x191))+x152+x185+(((-1.0)*x206))+x210);
op[17]=((((-1.0)*x183))+(((-1.0)*x124))+x123+x105+x201+(((-1.0)*x212))+(((-1.0)*x215)));
op[18]=((((-1.0)*x183))+(((-1.0)*x112))+x105+x184+(((-1.0)*x208))+x201+(((-1.0)*x212)));
op[19]=((((-1.0)*x189))+x177+x153+x196+(((-1.0)*x206))+x210);
op[20]=((((-1.0)*x187))+(((-1.0)*x192))+x188);
op[21]=((((-1.0)*x174))+x176+(((-1.0)*x205))+(((-1.0)*x209))+x213+x85+(((-1.0)*x84)));
op[22]=((((-1.0)*x105))+(((-1.0)*x124))+x123+x183+x201+(((-1.0)*x212))+(((-1.0)*x215)));
op[23]=((((-1.0)*x177))+(((-1.0)*x190))+x198+x186+(((-1.0)*x214))+(((-1.0)*x86)));
op[24]=x167;
op[25]=x131;
op[26]=x98;
op[27]=0;
op[28]=x132;
op[29]=x131;
op[30]=x131;
op[31]=x167;
op[32]=0;
op[33]=((-0.1112)*r01);
op[34]=x131;
op[35]=x132;
op[36]=(x138+(((-1.0)*x137))+(((-1.0)*x133))+x200);
op[37]=(x175+x136+(((-1.0)*x205))+(((-1.0)*x135))+x213);
op[38]=((((-0.02176)*r00))+(((-0.26089452)*r01))+x204+(((-1.0)*x216)));
op[39]=((((-1.0)*x140))+(((-1.0)*x74))+x139+x75);
op[40]=((((-1.0)*x142))+x144+x133+(((-1.0)*x200)));
op[41]=((((-1.0)*x78))+x135+(((-1.0)*x205))+(((-1.0)*x136))+x213+x77);
op[42]=(x175+x135+(((-1.0)*x205))+(((-1.0)*x136))+x213);
op[43]=((((-1.0)*x141))+x137+(((-1.0)*x138))+x203);
op[44]=((((-1.0)*x140))+(((-1.0)*x75))+x139+x74);
op[45]=((((0.24841452)*r01))+(((-1.0)*x204))+x216+(((0.02816)*r00)));
op[46]=((((-1.0)*x78))+x136+(((-1.0)*x205))+(((-1.0)*x135))+x213+x77);
op[47]=((((-1.0)*x144))+x141+x142+(((-1.0)*x203)));
op[48]=((((-1.0)*x44))+x199+x180);
op[49]=x146;
op[50]=x145;
op[51]=0;
op[52]=((((-1.0)*x179))+(((-1.0)*x45))+x199);
op[53]=x146;
op[54]=x146;
op[55]=((((-1.0)*x45))+(((-1.0)*x44))+x199+x47);
op[56]=0;
op[57]=x171;
op[58]=x146;
op[59]=((((-1.0)*x179))+x199+x45);
op[60]=((((-1.0)*x79))+(((-1.0)*x177))+(((-1.0)*x194))+x195+x202+(((-1.0)*x214)));
op[61]=((((-1.0)*x107))+x178+x111+x182+x208+(((-1.0)*x218)));
op[62]=((((-1.0)*x148))+(((-1.0)*x174))+(((-1.0)*x205))+x211+x213+x80+(((-1.0)*x81)));
op[63]=((((-1.0)*x187))+(((-1.0)*x188))+x192);
op[64]=((((-1.0)*x185))+x177+x152+x191+(((-1.0)*x206))+x210);
op[65]=((((-1.0)*x182))+x178+x123+x107+x215+(((-1.0)*x217)));
op[66]=((((-1.0)*x182))+x178+x111+x107+x208+(((-1.0)*x218)));
op[67]=((((-1.0)*x177))+(((-1.0)*x196))+x153+x189+(((-1.0)*x206))+x210);
op[68]=((((-1.0)*x197))+x193+x181+(((-1.0)*x61)));
op[69]=((((-1.0)*x174))+x176+(((-1.0)*x209))+x205+x84+(((-1.0)*x213))+(((-1.0)*x85)));
op[70]=((((-1.0)*x107))+x178+x123+x182+x215+(((-1.0)*x217)));
op[71]=((((-1.0)*x186))+x177+x198+x190+(((-1.0)*x214))+(((-1.0)*x86)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j0array[16], cj0array[16], sj0array[16], j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ij0 += 3)
{
IkReal htj0 = zeror[ij0+0], htj1 = zeror[ij0+1], htj2 = zeror[ij0+2];
if(isnan(htj0)||isnan(htj1)||isnan(htj2)){
continue;
}
j0array[numsolutions]=((2.0)*(atan(htj0)));
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
if(isinf(htj0)){
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
}
else{
IkReal x219=htj0*htj0;
CheckValue<IkReal> x220=IKPowWithIntegerCheck(((1.0)+x219),-1);
if(!x220.valid){
continue;
}
cj0array[numsolutions]=((x220.value)*(((1.0)+(((-1.0)*x219)))));
CheckValue<IkReal> x221=IKPowWithIntegerCheck(((1.0)+(htj0*htj0)),-1);
if(!x221.valid){
continue;
}
sj0array[numsolutions]=((2.0)*htj0*(x221.value));
}
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x222=htj1*htj1;
CheckValue<IkReal> x223=IKPowWithIntegerCheck(((1.0)+x222),-1);
if(!x223.valid){
continue;
}
cj1array[numsolutions]=((x223.value)*(((1.0)+(((-1.0)*x222)))));
CheckValue<IkReal> x224=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x224.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x224.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x225=htj2*htj2;
CheckValue<IkReal> x226=IKPowWithIntegerCheck(((1.0)+x225),-1);
if(!x226.valid){
continue;
}
cj2array[numsolutions]=((x226.value)*(((1.0)+(((-1.0)*x225)))));
CheckValue<IkReal> x227=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x227.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x227.value));
}
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j0valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj0 = 16;
_nj1 = 1;
_nj2 = 1;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
_ij1[0] = 0; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( !j0valid[iij0] ) { continue; }
if( IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj1array[ij0]-cj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij0]-sj1array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij0]-cj2array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij0]-sj2array[iij0]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j0valid[iij0]=false; _ij0[1] = iij0; _ij1[1] = 0; _ij2[1] = 0;  break; 
}
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

    j1 = j1array[ij0]; cj1 = cj1array[ij0]; sj1 = sj1array[ij0];

    j2 = j2array[ij0]; cj2 = cj2array[ij0]; sj2 = sj2array[ij0];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j3eval[1];
j3eval[0]=sj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal j3eval[1];
j3eval[0]=cj2;
if( IKabs(j3eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x228=((1.0)*cj1);
if( IKabs(((((-1.0)*r00*sj0))+((cj0*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x228))+((r02*sj1))+(((-1.0)*r01*sj0*x228)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*sj0))+((cj0*r01))))+IKsqr(((((-1.0)*cj0*r00*x228))+((r02*sj1))+(((-1.0)*r01*sj0*x228))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r00*sj0))+((cj0*r01))), ((((-1.0)*cj0*r00*x228))+((r02*sj1))+(((-1.0)*r01*sj0*x228))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x229=((1.0)*cj1);
evalcond[0]=((((-1.0)*r00*sj0))+(((-1.0)*(IKsin(j3))))+((cj0*r01)));
evalcond[1]=((((-1.0)*cj0*r00*x229))+((r02*sj1))+(((-1.0)*r01*sj0*x229))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x230=((20.0160128102482)*px);
IkReal x231=(cj0*sj1);
IkReal x232=(cj1*pz);
IkReal x233=((42.7008273285295)*py);
IkReal x234=(sj0*sj1);
IkReal x235=((20.0160128102482)*py);
IkReal x236=((42.7008273285295)*px);
if( IKabs(((-5.33279957299173)+(((-1.0)*x230*x231))+((sj0*x236))+(((-1.0)*cj0*x233))+(((-20.0160128102482)*x232))+(((-1.0)*x234*x235))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.97891646650654)+(((-1.0)*x233*x234))+(((-42.7008273285295)*x232))+(((-1.0)*x231*x236))+(((1.70803309314118)*sj1))+((cj0*x235))+(((-1.0)*sj0*x230)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.33279957299173)+(((-1.0)*x230*x231))+((sj0*x236))+(((-1.0)*cj0*x233))+(((-20.0160128102482)*x232))+(((-1.0)*x234*x235))+(((0.800640512409928)*sj1))))+IKsqr(((1.97891646650654)+(((-1.0)*x233*x234))+(((-42.7008273285295)*x232))+(((-1.0)*x231*x236))+(((1.70803309314118)*sj1))+((cj0*x235))+(((-1.0)*sj0*x230))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-5.33279957299173)+(((-1.0)*x230*x231))+((sj0*x236))+(((-1.0)*cj0*x233))+(((-20.0160128102482)*x232))+(((-1.0)*x234*x235))+(((0.800640512409928)*sj1))), ((1.97891646650654)+(((-1.0)*x233*x234))+(((-42.7008273285295)*x232))+(((-1.0)*x231*x236))+(((1.70803309314118)*sj1))+((cj0*x235))+(((-1.0)*sj0*x230))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x237=IKsin(j4);
IkReal x238=IKcos(j4);
evalcond[0]=((0.1202)+(((-0.009)*x238))+(((0.0192)*x237))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.01)+((cj1*pz))+(((0.009)*x237))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.0192)*x238))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x239=((20.0160128102482)*px);
IkReal x240=(cj0*sj1);
IkReal x241=(cj1*pz);
IkReal x242=((42.7008273285295)*py);
IkReal x243=(sj0*sj1);
IkReal x244=((20.0160128102482)*py);
IkReal x245=((42.7008273285295)*px);
if( IKabs(((3.70269548972511)+((cj0*x242))+(((-1.0)*x243*x244))+(((-1.0)*sj0*x245))+(((-1.0)*x239*x240))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.25647184414198)+(((-1.0)*x242*x243))+((sj0*x239))+(((-1.0)*cj0*x244))+(((1.70803309314118)*sj1))+(((-1.0)*x240*x245))+(((-42.7008273285295)*x241)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.70269548972511)+((cj0*x242))+(((-1.0)*x243*x244))+(((-1.0)*sj0*x245))+(((-1.0)*x239*x240))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x241))))+IKsqr(((-2.25647184414198)+(((-1.0)*x242*x243))+((sj0*x239))+(((-1.0)*cj0*x244))+(((1.70803309314118)*sj1))+(((-1.0)*x240*x245))+(((-42.7008273285295)*x241))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.70269548972511)+((cj0*x242))+(((-1.0)*x243*x244))+(((-1.0)*sj0*x245))+(((-1.0)*x239*x240))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x241))), ((-2.25647184414198)+(((-1.0)*x242*x243))+((sj0*x239))+(((-1.0)*cj0*x244))+(((1.70803309314118)*sj1))+(((-1.0)*x240*x245))+(((-42.7008273285295)*x241))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x246=IKsin(j4);
IkReal x247=IKcos(j4);
evalcond[0]=((0.0914)+(((0.009)*x247))+(((-0.0192)*x246))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.01)+(((0.0192)*x247))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.009)*x246))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x248=(cj0*px);
IkReal x249=((42.7008273285295)*cj1);
IkReal x250=((20.0160128102482)*sj1);
IkReal x251=((20.0160128102482)*cj1);
IkReal x252=((42.7008273285295)*sj1);
IkReal x253=(py*sj0);
if( IKabs(((11.2906325060048)+(((-1.0)*x248*x249))+(((-1.0)*x250*x253))+((pz*x252))+(((1.70803309314118)*cj1))+(((-1.0)*pz*x251))+(((-1.0)*x248*x250))+(((-1.0)*x249*x253))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+(((-1.0)*x252*x253))+(((-1.0)*pz*x249))+((x248*x251))+(((-0.800640512409928)*cj1))+((x251*x253))+(((-1.0)*pz*x250))+(((-1.0)*x248*x252))+(((1.70803309314118)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((11.2906325060048)+(((-1.0)*x248*x249))+(((-1.0)*x250*x253))+((pz*x252))+(((1.70803309314118)*cj1))+(((-1.0)*pz*x251))+(((-1.0)*x248*x250))+(((-1.0)*x249*x253))+(((0.800640512409928)*sj1))))+IKsqr(((-5.81331732052309)+(((-1.0)*x252*x253))+(((-1.0)*pz*x249))+((x248*x251))+(((-0.800640512409928)*cj1))+((x251*x253))+(((-1.0)*pz*x250))+(((-1.0)*x248*x252))+(((1.70803309314118)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((11.2906325060048)+(((-1.0)*x248*x249))+(((-1.0)*x250*x253))+((pz*x252))+(((1.70803309314118)*cj1))+(((-1.0)*pz*x251))+(((-1.0)*x248*x250))+(((-1.0)*x249*x253))+(((0.800640512409928)*sj1))), ((-5.81331732052309)+(((-1.0)*x252*x253))+(((-1.0)*pz*x249))+((x248*x251))+(((-0.800640512409928)*cj1))+((x251*x253))+(((-1.0)*pz*x250))+(((-1.0)*x248*x252))+(((1.70803309314118)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x254=IKcos(j4);
IkReal x255=IKsin(j4);
IkReal x256=(cj0*px);
IkReal x257=(py*sj0);
IkReal x258=((1.0)*cj1);
evalcond[0]=((0.01)+(((0.009)*x255))+((sj1*x257))+((sj1*x256))+((cj1*pz))+(((-0.04)*sj1))+(((0.0192)*x254)));
evalcond[1]=((0.2691)+(((-0.0192)*x255))+(((0.04)*cj1))+(((0.009)*x254))+(((-1.0)*x256*x258))+(((-1.0)*x257*x258))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x259=(cj0*px);
IkReal x260=((42.7008273285295)*cj1);
IkReal x261=((20.0160128102482)*sj1);
IkReal x262=((20.0160128102482)*cj1);
IkReal x263=((42.7008273285295)*sj1);
IkReal x264=(py*sj0);
if( IKabs(((-12.9207365892714)+(((-1.70803309314118)*cj1))+((x259*x260))+((x260*x264))+(((-1.0)*x259*x261))+(((-1.0)*x261*x264))+(((0.800640512409928)*sj1))+(((-1.0)*pz*x262))+(((-1.0)*pz*x263)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((-1.0)*x262*x264))+(((-1.0)*x263*x264))+(((0.800640512409928)*cj1))+(((-1.0)*x259*x262))+(((-1.0)*x259*x263))+(((1.70803309314118)*sj1))+((pz*x261))+(((-1.0)*pz*x260)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-12.9207365892714)+(((-1.70803309314118)*cj1))+((x259*x260))+((x260*x264))+(((-1.0)*x259*x261))+(((-1.0)*x261*x264))+(((0.800640512409928)*sj1))+(((-1.0)*pz*x262))+(((-1.0)*pz*x263))))+IKsqr(((5.53576194288764)+(((-1.0)*x262*x264))+(((-1.0)*x263*x264))+(((0.800640512409928)*cj1))+(((-1.0)*x259*x262))+(((-1.0)*x259*x263))+(((1.70803309314118)*sj1))+((pz*x261))+(((-1.0)*pz*x260))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-12.9207365892714)+(((-1.70803309314118)*cj1))+((x259*x260))+((x260*x264))+(((-1.0)*x259*x261))+(((-1.0)*x261*x264))+(((0.800640512409928)*sj1))+(((-1.0)*pz*x262))+(((-1.0)*pz*x263))), ((5.53576194288764)+(((-1.0)*x262*x264))+(((-1.0)*x263*x264))+(((0.800640512409928)*cj1))+(((-1.0)*x259*x262))+(((-1.0)*x259*x263))+(((1.70803309314118)*sj1))+((pz*x261))+(((-1.0)*pz*x260))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x265=IKsin(j4);
IkReal x266=IKcos(j4);
IkReal x267=(cj0*px);
IkReal x268=(py*sj0);
IkReal x269=((1.0)*cj1);
evalcond[0]=((0.01)+(((0.0192)*x266))+((cj1*pz))+(((-0.04)*sj1))+(((0.009)*x265))+((sj1*x268))+((sj1*x267)));
evalcond[1]=((0.2979)+(((0.0192)*x265))+(((0.04)*cj1))+(((-0.009)*x266))+(((-1.0)*x268*x269))+(((-1.0)*x267*x269))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x270=(py*sj0);
IkReal x271=((75000.0)*cj1);
IkReal x272=(pz*sj1);
IkReal x273=((160000.0)*cj1);
IkReal x274=(pz*sj3);
IkReal x275=(cj0*px);
IkReal x276=(sj1*sj3);
CheckValue<IkReal> x277=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x277.valid){
continue;
}
CheckValue<IkReal> x278 = IKatan2WithCheck(IkReal(((45360.0)+(((-1.0)*x273*x275))+(((3000.0)*x276))+(((160000.0)*x272))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((-1.0)*x271*x274))+(((-75000.0)*x270*x276))+(((-75000.0)*x275*x276))+(((-1.0)*x270*x273))+(((-3054.0)*sj3)))),IkReal(((-21262.5)+(((-1.0)*x273*x274))+((x271*x275))+(((-160000.0)*x270*x276))+(((-160000.0)*x275*x276))+(((-3000.0)*cj1))+(((6400.0)*x276))+((x270*x271))+(((-75000.0)*x272))+(((-520.0)*sj3))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x277.value)))+(x278.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x279=IKsin(j4);
IkReal x280=IKcos(j4);
IkReal x281=(cj0*px);
IkReal x282=((1.0)*cj1);
IkReal x283=(py*sj0);
IkReal x284=((0.0192)*x279);
IkReal x285=((0.009)*x280);
evalcond[0]=((0.01)+((cj1*pz))+(((0.0192)*x280))+(((-0.04)*sj1))+(((0.009)*x279))+((sj1*x281))+((sj1*x283)));
evalcond[1]=((0.1058)+(((-1.0)*cj3*x285))+((cj3*x284))+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*sj3*x284))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x281*x282))+((sj3*x285))+(((-1.0)*x282*x283))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x286=(px*sj0);
IkReal x287=((160000.0)*cj0);
IkReal x288=(cj3*sj1);
IkReal x289=((75000.0)*cj0);
IkReal x290=(py*sj0);
IkReal x291=(cj1*cj3*pz);
CheckValue<IkReal> x292 = IKatan2WithCheck(IkReal(((-16928.0)+(((-75000.0)*x291))+(((-61792.0)*sj3))+(((-3054.0)*cj3))+(((-1.0)*px*x288*x289))+(((3000.0)*x288))+(((-1.0)*py*x287))+(((160000.0)*x286))+(((-75000.0)*x288*x290)))),IkReal(((7935.0)+(((6400.0)*x288))+(((-160000.0)*x291))+(((-1.0)*px*x287*x288))+(((-75000.0)*x286))+(((-520.0)*cj3))+(((28965.0)*sj3))+((py*x289))+(((-160000.0)*x288*x290)))),IKFAST_ATAN2_MAGTHRESH);
if(!x292.valid){
continue;
}
CheckValue<IkReal> x293=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x293.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x292.value)+(((1.5707963267949)*(x293.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x294=IKsin(j4);
IkReal x295=IKcos(j4);
IkReal x296=(cj0*px);
IkReal x297=((1.0)*cj1);
IkReal x298=(py*sj0);
IkReal x299=((0.0192)*x294);
IkReal x300=((0.009)*x295);
evalcond[0]=((0.01)+(((0.009)*x294))+((sj1*x296))+((sj1*x298))+((cj1*pz))+(((-0.04)*sj1))+(((0.0192)*x295)));
evalcond[1]=((0.1058)+((cj3*x299))+(((-1.0)*cj3*x300))+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+((sj3*x300))+(((-1.0)*x297*x298))+(((-1.0)*x296*x297))+(((-0.0144)*sj3))+(((-1.0)*sj3*x299))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x301=((1.0)*cj0);
if( IKabs((((r00*sj0))+(((-1.0)*r01*x301)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*cj1*r00*x301))+(((-1.0)*cj1*r01*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r00*sj0))+(((-1.0)*r01*x301))))+IKsqr((((r02*sj1))+(((-1.0)*cj1*r00*x301))+(((-1.0)*cj1*r01*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((r00*sj0))+(((-1.0)*r01*x301))), (((r02*sj1))+(((-1.0)*cj1*r00*x301))+(((-1.0)*cj1*r01*sj0))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x302=((1.0)*cj1);
evalcond[0]=((((-1.0)*r00*sj0))+(IKsin(j3))+((cj0*r01)));
evalcond[1]=(((r02*sj1))+(((-1.0)*cj0*r00*x302))+(((-1.0)*r01*sj0*x302))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x303=((20.0160128102482)*px);
IkReal x304=(cj0*sj1);
IkReal x305=(cj1*pz);
IkReal x306=((42.7008273285295)*py);
IkReal x307=(sj0*sj1);
IkReal x308=((20.0160128102482)*py);
IkReal x309=((42.7008273285295)*px);
if( IKabs(((1.32852949025887)+((x303*x304))+(((20.0160128102482)*x305))+((cj0*x306))+(((-1.0)*sj0*x309))+((x307*x308))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14358153189218)+(((-1.0)*cj0*x308))+(((-1.70803309314118)*sj1))+((x304*x309))+((sj0*x303))+(((42.7008273285295)*x305))+((x306*x307)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.32852949025887)+((x303*x304))+(((20.0160128102482)*x305))+((cj0*x306))+(((-1.0)*sj0*x309))+((x307*x308))+(((-0.800640512409928)*sj1))))+IKsqr(((-1.14358153189218)+(((-1.0)*cj0*x308))+(((-1.70803309314118)*sj1))+((x304*x309))+((sj0*x303))+(((42.7008273285295)*x305))+((x306*x307))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.32852949025887)+((x303*x304))+(((20.0160128102482)*x305))+((cj0*x306))+(((-1.0)*sj0*x309))+((x307*x308))+(((-0.800640512409928)*sj1))), ((-1.14358153189218)+(((-1.0)*cj0*x308))+(((-1.70803309314118)*sj1))+((x304*x309))+((sj0*x303))+(((42.7008273285295)*x305))+((x306*x307))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x310=IKsin(j4);
IkReal x311=IKcos(j4);
evalcond[0]=((0.0358)+(((-0.0192)*x310))+(((0.009)*x311))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.01)+(((-0.0192)*x311))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1))+(((-0.009)*x310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x312=((20.0160128102482)*px);
IkReal x313=(cj0*sj1);
IkReal x314=(cj1*pz);
IkReal x315=((42.7008273285295)*py);
IkReal x316=(sj0*sj1);
IkReal x317=((20.0160128102482)*py);
IkReal x318=((42.7008273285295)*px);
if( IKabs(((-2.95863357352549)+(((-1.0)*cj0*x315))+((x312*x313))+((sj0*x318))+(((20.0160128102482)*x314))+((x316*x317))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.866026154256739)+(((-1.70803309314118)*sj1))+((x315*x316))+(((42.7008273285295)*x314))+((cj0*x317))+(((-1.0)*sj0*x312))+((x313*x318)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.95863357352549)+(((-1.0)*cj0*x315))+((x312*x313))+((sj0*x318))+(((20.0160128102482)*x314))+((x316*x317))+(((-0.800640512409928)*sj1))))+IKsqr(((0.866026154256739)+(((-1.70803309314118)*sj1))+((x315*x316))+(((42.7008273285295)*x314))+((cj0*x317))+(((-1.0)*sj0*x312))+((x313*x318))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.95863357352549)+(((-1.0)*cj0*x315))+((x312*x313))+((sj0*x318))+(((20.0160128102482)*x314))+((x316*x317))+(((-0.800640512409928)*sj1))), ((0.866026154256739)+(((-1.70803309314118)*sj1))+((x315*x316))+(((42.7008273285295)*x314))+((cj0*x317))+(((-1.0)*sj0*x312))+((x313*x318))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x319=IKsin(j4);
IkReal x320=IKcos(j4);
evalcond[0]=((0.0646)+(((-0.009)*x320))+(((0.0192)*x319))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.0192)*x320))+(((-0.04)*sj1))+((py*sj0*sj1))+(((-0.009)*x319)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x321=(cj0*px);
IkReal x322=((42.7008273285295)*cj1);
IkReal x323=((20.0160128102482)*sj1);
IkReal x324=((20.0160128102482)*cj1);
IkReal x325=((42.7008273285295)*sj1);
IkReal x326=(py*sj0);
if( IKabs(((11.2906325060048)+((x323*x326))+(((-1.0)*x321*x322))+((pz*x325))+((pz*x324))+(((1.70803309314118)*cj1))+(((-1.0)*x322*x326))+((x321*x323))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+((x325*x326))+(((-0.800640512409928)*cj1))+(((-1.70803309314118)*sj1))+((pz*x322))+((x324*x326))+(((-1.0)*pz*x323))+((x321*x324))+((x321*x325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((11.2906325060048)+((x323*x326))+(((-1.0)*x321*x322))+((pz*x325))+((pz*x324))+(((1.70803309314118)*cj1))+(((-1.0)*x322*x326))+((x321*x323))+(((-0.800640512409928)*sj1))))+IKsqr(((-5.81331732052309)+((x325*x326))+(((-0.800640512409928)*cj1))+(((-1.70803309314118)*sj1))+((pz*x322))+((x324*x326))+(((-1.0)*pz*x323))+((x321*x324))+((x321*x325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((11.2906325060048)+((x323*x326))+(((-1.0)*x321*x322))+((pz*x325))+((pz*x324))+(((1.70803309314118)*cj1))+(((-1.0)*x322*x326))+((x321*x323))+(((-0.800640512409928)*sj1))), ((-5.81331732052309)+((x325*x326))+(((-0.800640512409928)*cj1))+(((-1.70803309314118)*sj1))+((pz*x322))+((x324*x326))+(((-1.0)*pz*x323))+((x321*x324))+((x321*x325))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x327=IKcos(j4);
IkReal x328=IKsin(j4);
IkReal x329=(cj0*px);
IkReal x330=(py*sj0);
IkReal x331=((1.0)*cj1);
evalcond[0]=((-0.01)+(((-0.009)*x328))+((cj1*pz))+((sj1*x329))+(((-0.0192)*x327))+(((-0.04)*sj1))+((sj1*x330)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((0.009)*x327))+(((-1.0)*x329*x331))+(((-1.0)*x330*x331))+(((-0.0192)*x328))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x332=(cj0*px);
IkReal x333=((42.7008273285295)*cj1);
IkReal x334=((20.0160128102482)*sj1);
IkReal x335=((20.0160128102482)*cj1);
IkReal x336=((42.7008273285295)*sj1);
IkReal x337=(py*sj0);
if( IKabs(((-12.9207365892714)+((x334*x337))+(((-1.70803309314118)*cj1))+((x332*x333))+((x332*x334))+(((-1.0)*pz*x336))+((x333*x337))+((pz*x335))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((0.800640512409928)*cj1))+((x336*x337))+(((-1.70803309314118)*sj1))+((x332*x336))+(((-1.0)*x332*x335))+((pz*x334))+((pz*x333))+(((-1.0)*x335*x337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-12.9207365892714)+((x334*x337))+(((-1.70803309314118)*cj1))+((x332*x333))+((x332*x334))+(((-1.0)*pz*x336))+((x333*x337))+((pz*x335))+(((-0.800640512409928)*sj1))))+IKsqr(((5.53576194288764)+(((0.800640512409928)*cj1))+((x336*x337))+(((-1.70803309314118)*sj1))+((x332*x336))+(((-1.0)*x332*x335))+((pz*x334))+((pz*x333))+(((-1.0)*x335*x337))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-12.9207365892714)+((x334*x337))+(((-1.70803309314118)*cj1))+((x332*x333))+((x332*x334))+(((-1.0)*pz*x336))+((x333*x337))+((pz*x335))+(((-0.800640512409928)*sj1))), ((5.53576194288764)+(((0.800640512409928)*cj1))+((x336*x337))+(((-1.70803309314118)*sj1))+((x332*x336))+(((-1.0)*x332*x335))+((pz*x334))+((pz*x333))+(((-1.0)*x335*x337))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x338=IKsin(j4);
IkReal x339=IKcos(j4);
IkReal x340=(cj0*px);
IkReal x341=(py*sj0);
IkReal x342=((1.0)*cj1);
evalcond[0]=((-0.01)+((cj1*pz))+(((-0.04)*sj1))+((sj1*x341))+((sj1*x340))+(((-0.009)*x338))+(((-0.0192)*x339)));
evalcond[1]=((0.2979)+(((0.0192)*x338))+(((0.04)*cj1))+(((-1.0)*x340*x342))+(((-1.0)*x341*x342))+(((-0.009)*x339))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x343=(py*sj0);
IkReal x344=((75000.0)*cj1);
IkReal x345=(pz*sj1);
IkReal x346=((160000.0)*cj1);
IkReal x347=(pz*sj3);
IkReal x348=(cj0*px);
IkReal x349=(sj1*sj3);
CheckValue<IkReal> x350=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x350.valid){
continue;
}
CheckValue<IkReal> x351 = IKatan2WithCheck(IkReal(((45360.0)+(((160000.0)*x345))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((75000.0)*x348*x349))+(((75000.0)*x343*x349))+(((-3000.0)*x349))+((x344*x347))+(((-1.0)*x346*x348))+(((-1.0)*x343*x346))+(((-3054.0)*sj3)))),IkReal(((-21262.5)+(((160000.0)*x348*x349))+(((-75000.0)*x345))+(((160000.0)*x343*x349))+(((-3000.0)*cj1))+((x344*x348))+((x346*x347))+(((-6400.0)*x349))+(((-520.0)*sj3))+((x343*x344))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x350.value)))+(x351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x352=IKcos(j4);
IkReal x353=IKsin(j4);
IkReal x354=(cj0*px);
IkReal x355=((1.0)*cj1);
IkReal x356=(py*sj0);
IkReal x357=((0.0192)*x353);
IkReal x358=((0.009)*x352);
evalcond[0]=((-0.01)+(((-0.009)*x353))+((cj1*pz))+(((-0.04)*sj1))+((sj1*x356))+((sj1*x354))+(((-0.0192)*x352)));
evalcond[1]=((0.0502)+((cj3*x358))+(((-1.0)*cj3*x357))+(((-0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+((sj3*x358))+((pz*sj1))+(((-1.0)*x354*x355))+(((-1.0)*x355*x356))+(((-1.0)*sj3*x357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x359=(px*sj0);
IkReal x360=((160000.0)*cj0);
IkReal x361=((160000.0)*cj3);
IkReal x362=(cj1*pz);
IkReal x363=(cj3*sj1);
IkReal x364=((75000.0)*cj0);
IkReal x365=(py*sj0);
CheckValue<IkReal> x366=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x366.valid){
continue;
}
CheckValue<IkReal> x367 = IKatan2WithCheck(IkReal(((8032.0)+(((-3000.0)*x363))+(((-61792.0)*sj3))+(((-3054.0)*cj3))+(((-160000.0)*x359))+(((75000.0)*cj3*x362))+((py*x360))+(((75000.0)*x363*x365))+((px*x363*x364)))),IkReal(((-3765.0)+((x361*x362))+(((75000.0)*x359))+((sj1*x361*x365))+(((-1.0)*py*x364))+((px*x360*x363))+(((-520.0)*cj3))+(((-6400.0)*x363))+(((28965.0)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x367.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x366.value)))+(x367.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x368=IKcos(j4);
IkReal x369=IKsin(j4);
IkReal x370=(cj0*px);
IkReal x371=((1.0)*cj1);
IkReal x372=(py*sj0);
IkReal x373=((0.0192)*x369);
IkReal x374=((0.009)*x368);
evalcond[0]=((-0.01)+(((-0.009)*x369))+((sj1*x370))+((sj1*x372))+(((-0.0192)*x368))+((cj1*pz))+(((-0.04)*sj1)));
evalcond[1]=((0.0502)+(((-0.3862)*sj3))+(((-1.0)*cj3*x373))+((cj3*x374))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x370*x371))+(((-1.0)*sj3*x373))+(((-0.0144)*sj3))+((sj3*x374))+(((-1.0)*x371*x372))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x375=((1.0)*cj1);
IkReal x376=(cj0*r00);
IkReal x377=(r01*sj0);
if( IKabs((((sj1*x376))+((sj1*x377))+((cj1*r02)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r02*sj1))+(((-1.0)*x375*x377))+(((-1.0)*x375*x376)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((sj1*x376))+((sj1*x377))+((cj1*r02))))+IKsqr((((r02*sj1))+(((-1.0)*x375*x377))+(((-1.0)*x375*x376))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2((((sj1*x376))+((sj1*x377))+((cj1*r02))), (((r02*sj1))+(((-1.0)*x375*x377))+(((-1.0)*x375*x376))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x378=(r01*sj0);
IkReal x379=((1.0)*cj1);
IkReal x380=(cj0*r00);
evalcond[0]=(((sj1*x378))+((cj1*r02))+(((-1.0)*(IKsin(j3))))+((sj1*x380)));
evalcond[1]=((((-1.0)*x378*x379))+(((-1.0)*x379*x380))+((r02*sj1))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x381=((20.0160128102482)*px);
IkReal x382=(cj0*sj1);
IkReal x383=(cj1*pz);
IkReal x384=((42.7008273285295)*py);
IkReal x385=(sj0*sj1);
IkReal x386=((20.0160128102482)*py);
IkReal x387=((42.7008273285295)*px);
if( IKabs(((-0.440886042167067)+(((-1.0)*x384*x385))+(((-42.7008273285295)*x383))+(((1.70803309314118)*sj1))+((cj0*x386))+(((-1.0)*sj0*x381))+(((-1.0)*x382*x387)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((3.74833199893248)+(((20.0160128102482)*x383))+((x385*x386))+((cj0*x384))+(((-1.0)*sj0*x387))+((x381*x382))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.440886042167067)+(((-1.0)*x384*x385))+(((-42.7008273285295)*x383))+(((1.70803309314118)*sj1))+((cj0*x386))+(((-1.0)*sj0*x381))+(((-1.0)*x382*x387))))+IKsqr(((3.74833199893248)+(((20.0160128102482)*x383))+((x385*x386))+((cj0*x384))+(((-1.0)*sj0*x387))+((x381*x382))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.440886042167067)+(((-1.0)*x384*x385))+(((-42.7008273285295)*x383))+(((1.70803309314118)*sj1))+((cj0*x386))+(((-1.0)*sj0*x381))+(((-1.0)*x382*x387))), ((3.74833199893248)+(((20.0160128102482)*x383))+((x385*x386))+((cj0*x384))+(((-1.0)*sj0*x387))+((x381*x382))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x388=IKsin(j4);
IkReal x389=IKcos(j4);
evalcond[0]=((0.068)+(((-0.0192)*x389))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.009)*x388)));
evalcond[1]=((0.0422)+(((0.0192)*x388))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1))+(((-0.009)*x389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x390=((20.0160128102482)*px);
IkReal x391=(cj0*sj1);
IkReal x392=(cj1*pz);
IkReal x393=((42.7008273285295)*py);
IkReal x394=(sj0*sj1);
IkReal x395=((20.0160128102482)*py);
IkReal x396=((42.7008273285295)*px);
if( IKabs(((1.93327995729917)+(((-1.0)*sj0*x390))+((cj0*x395))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x392))+((x391*x396))+((x393*x394)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.63544168668268)+(((-1.0)*sj0*x396))+((cj0*x393))+(((-1.0)*x394*x395))+(((-20.0160128102482)*x392))+(((-1.0)*x390*x391))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.93327995729917)+(((-1.0)*sj0*x390))+((cj0*x395))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x392))+((x391*x396))+((x393*x394))))+IKsqr(((2.63544168668268)+(((-1.0)*sj0*x396))+((cj0*x393))+(((-1.0)*x394*x395))+(((-20.0160128102482)*x392))+(((-1.0)*x390*x391))+(((0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.93327995729917)+(((-1.0)*sj0*x390))+((cj0*x395))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x392))+((x391*x396))+((x393*x394))), ((2.63544168668268)+(((-1.0)*sj0*x396))+((cj0*x393))+(((-1.0)*x394*x395))+(((-20.0160128102482)*x392))+(((-1.0)*x390*x391))+(((0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x397=IKcos(j4);
IkReal x398=IKsin(j4);
evalcond[0]=((0.068)+(((-0.0192)*x397))+(((-0.009)*x398))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0134)+(((-0.0192)*x398))+((cj1*pz))+(((0.009)*x397))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x399=((42.7008273285295)*cj0);
IkReal x400=(cj1*px);
IkReal x401=((20.0160128102482)*sj0);
IkReal x402=((20.0160128102482)*cj0);
IkReal x403=(pz*sj1);
IkReal x404=(cj1*py);
IkReal x405=((42.7008273285295)*sj0);
if( IKabs(((12.8518815052042)+((py*x402))+(((-1.0)*px*x401))+(((42.7008273285295)*x403))+(((1.70803309314118)*cj1))+(((-1.0)*x404*x405))+(((-1.0)*x399*x400)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.48265278889778)+(((-20.0160128102482)*x403))+(((-0.800640512409928)*cj1))+(((-1.0)*px*x405))+((py*x399))+((x400*x402))+((x401*x404)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.8518815052042)+((py*x402))+(((-1.0)*px*x401))+(((42.7008273285295)*x403))+(((1.70803309314118)*cj1))+(((-1.0)*x404*x405))+(((-1.0)*x399*x400))))+IKsqr(((-2.48265278889778)+(((-20.0160128102482)*x403))+(((-0.800640512409928)*cj1))+(((-1.0)*px*x405))+((py*x399))+((x400*x402))+((x401*x404))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((12.8518815052042)+((py*x402))+(((-1.0)*px*x401))+(((42.7008273285295)*x403))+(((1.70803309314118)*cj1))+(((-1.0)*x404*x405))+(((-1.0)*x399*x400))), ((-2.48265278889778)+(((-20.0160128102482)*x403))+(((-0.800640512409928)*cj1))+(((-1.0)*px*x405))+((py*x399))+((x400*x402))+((x401*x404))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x406=IKcos(j4);
IkReal x407=IKsin(j4);
IkReal x408=((1.0)*cj1);
evalcond[0]=((0.068)+(((-0.009)*x407))+(((-0.0192)*x406))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((-1.0)*py*sj0*x408))+(((0.04)*cj1))+(((-0.0192)*x407))+(((0.009)*x406))+((pz*sj1))+(((-1.0)*cj0*px*x408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x409=((42.7008273285295)*py);
IkReal x410=((20.0160128102482)*sj0);
IkReal x411=(pz*sj1);
IkReal x412=(cj0*cj1*px);
if( IKabs(((-11.3594875900721)+(((-1.70803309314118)*cj1))+(((-1.0)*px*x410))+(((42.7008273285295)*x412))+((cj1*sj0*x409))+(((20.0160128102482)*cj0*py))+(((-42.7008273285295)*x411)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.86642647451294)+(((-20.0160128102482)*x412))+(((0.800640512409928)*cj1))+(((20.0160128102482)*x411))+((cj0*x409))+(((-42.7008273285295)*px*sj0))+(((-1.0)*cj1*py*x410)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-11.3594875900721)+(((-1.70803309314118)*cj1))+(((-1.0)*px*x410))+(((42.7008273285295)*x412))+((cj1*sj0*x409))+(((20.0160128102482)*cj0*py))+(((-42.7008273285295)*x411))))+IKsqr(((8.86642647451294)+(((-20.0160128102482)*x412))+(((0.800640512409928)*cj1))+(((20.0160128102482)*x411))+((cj0*x409))+(((-42.7008273285295)*px*sj0))+(((-1.0)*cj1*py*x410))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-11.3594875900721)+(((-1.70803309314118)*cj1))+(((-1.0)*px*x410))+(((42.7008273285295)*x412))+((cj1*sj0*x409))+(((20.0160128102482)*cj0*py))+(((-42.7008273285295)*x411))), ((8.86642647451294)+(((-20.0160128102482)*x412))+(((0.800640512409928)*cj1))+(((20.0160128102482)*x411))+((cj0*x409))+(((-42.7008273285295)*px*sj0))+(((-1.0)*cj1*py*x410))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x413=IKsin(j4);
IkReal x414=IKcos(j4);
IkReal x415=((1.0)*cj1);
evalcond[0]=((0.068)+(((-0.009)*x413))+(((-0.0192)*x414))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((-1.0)*cj0*px*x415))+(((-0.009)*x414))+(((0.04)*cj1))+(((-1.0)*py*sj0*x415))+(((0.0192)*x413))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x416=((75000.0)*cj1);
IkReal x417=(py*sj0);
IkReal x418=(pz*sj1);
IkReal x419=((160000.0)*px);
IkReal x420=(sj0*sj3);
IkReal x421=(cj0*py*sj3);
CheckValue<IkReal> x422=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x422.valid){
continue;
}
CheckValue<IkReal> x423 = IKatan2WithCheck(IkReal(((45360.0)+(((-75000.0)*px*x420))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((75000.0)*x421))+(((-1.0)*cj0*cj1*x419))+(((-160000.0)*cj1*x417))+(((2796.0)*sj3))+(((160000.0)*x418)))),IkReal(((-21262.5)+((x416*x417))+(((-3000.0)*cj1))+(((11960.0)*sj3))+(((-1.0)*x419*x420))+((cj0*px*x416))+(((160000.0)*x421))+(((-75000.0)*x418))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x422.value)))+(x423.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x424=IKsin(j4);
IkReal x425=IKcos(j4);
IkReal x426=(cj0*px);
IkReal x427=((1.0)*cj1);
IkReal x428=(py*sj0);
IkReal x429=((0.0192)*x424);
IkReal x430=((0.009)*x425);
evalcond[0]=((0.068)+(((-0.0192)*x425))+(((-0.009)*x424))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+(((-1.0)*cj3*x430))+((cj1*pz))+(((0.3862)*sj3))+(((-0.04)*sj1))+((cj3*x429))+(((0.0144)*cj3))+((sj1*x426))+((sj1*x428)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*sj3*x429))+(((0.04)*cj1))+(((-1.0)*x427*x428))+(((-0.0144)*sj3))+(((-1.0)*x426*x427))+((sj3*x430))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x431=((160000.0)*cj3);
IkReal x432=(cj0*py);
IkReal x433=(px*sj0);
IkReal x434=(cj1*pz);
IkReal x435=((75000.0)*cj3);
IkReal x436=(cj0*px*sj1);
IkReal x437=(py*sj0*sj1);
CheckValue<IkReal> x438=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x438.valid){
continue;
}
CheckValue<IkReal> x439 = IKatan2WithCheck(IkReal(((-4448.0)+(((-1.0)*x433*x435))+(((-61792.0)*sj3))+(((6400.0)*sj1))+(((-160000.0)*x434))+(((-160000.0)*x436))+(((-160000.0)*x437))+(((2796.0)*cj3))+((x432*x435)))),IkReal(((2085.0)+(((75000.0)*x437))+(((75000.0)*x436))+(((75000.0)*x434))+(((-1.0)*x431*x433))+(((11960.0)*cj3))+(((-3000.0)*sj1))+((x431*x432))+(((28965.0)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x438.value)))+(x439.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x440=IKsin(j4);
IkReal x441=IKcos(j4);
IkReal x442=(cj0*px);
IkReal x443=((1.0)*cj1);
IkReal x444=(py*sj0);
IkReal x445=((0.0192)*x440);
IkReal x446=((0.009)*x441);
evalcond[0]=((0.068)+(((-0.0192)*x441))+(((-1.0)*px*sj0))+(((-0.009)*x440))+((cj0*py)));
evalcond[1]=((0.0278)+((sj1*x442))+((sj1*x444))+(((-1.0)*cj3*x446))+((cj1*pz))+(((0.3862)*sj3))+(((-0.04)*sj1))+((cj3*x445))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*sj3*x445))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x443*x444))+((sj3*x446))+((pz*sj1))+(((-1.0)*x442*x443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x447=((1.0)*cj1);
IkReal x448=(r01*sj0);
IkReal x449=((1.0)*sj1);
IkReal x450=(cj0*r00);
if( IKabs(((((-1.0)*r02*x447))+(((-1.0)*x448*x449))+(((-1.0)*x449*x450)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x447*x450))+((r02*sj1))+(((-1.0)*x447*x448)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r02*x447))+(((-1.0)*x448*x449))+(((-1.0)*x449*x450))))+IKsqr(((((-1.0)*x447*x450))+((r02*sj1))+(((-1.0)*x447*x448))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((((-1.0)*r02*x447))+(((-1.0)*x448*x449))+(((-1.0)*x449*x450))), ((((-1.0)*x447*x450))+((r02*sj1))+(((-1.0)*x447*x448))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[2];
IkReal x451=((1.0)*cj1);
IkReal x452=(cj0*r00);
IkReal x453=(r01*sj0);
evalcond[0]=(((cj1*r02))+(IKsin(j3))+((sj1*x453))+((sj1*x452)));
evalcond[1]=(((r02*sj1))+(((-1.0)*(IKcos(j3))))+(((-1.0)*x451*x452))+(((-1.0)*x451*x453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x454=((20.0160128102482)*px);
IkReal x455=(cj0*sj1);
IkReal x456=(cj1*pz);
IkReal x457=((42.7008273285295)*py);
IkReal x458=(sj0*sj1);
IkReal x459=((20.0160128102482)*py);
IkReal x460=((42.7008273285295)*px);
if( IKabs(((-3.56338404056579)+((x455*x460))+(((-1.0)*cj0*x459))+(((42.7008273285295)*x456))+(((-1.70803309314118)*sj1))+((sj0*x454))+((x457*x458)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.91299706431812)+(((-1.0)*cj0*x457))+(((-1.0)*x454*x455))+((sj0*x460))+(((-1.0)*x458*x459))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x456)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.56338404056579)+((x455*x460))+(((-1.0)*cj0*x459))+(((42.7008273285295)*x456))+(((-1.70803309314118)*sj1))+((sj0*x454))+((x457*x458))))+IKsqr(((-2.91299706431812)+(((-1.0)*cj0*x457))+(((-1.0)*x454*x455))+((sj0*x460))+(((-1.0)*x458*x459))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x456))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.56338404056579)+((x455*x460))+(((-1.0)*cj0*x459))+(((42.7008273285295)*x456))+(((-1.70803309314118)*sj1))+((sj0*x454))+((x457*x458))), ((-2.91299706431812)+(((-1.0)*cj0*x457))+(((-1.0)*x454*x455))+((sj0*x460))+(((-1.0)*x458*x459))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x456))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x461=IKcos(j4);
IkReal x462=IKsin(j4);
evalcond[0]=((0.088)+(((-1.0)*px*sj0))+((cj0*py))+(((0.0192)*x461))+(((0.009)*x462)));
evalcond[1]=((-0.0422)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.0192)*x462))+((py*sj0*sj1))+(((0.009)*x461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x463=((20.0160128102482)*px);
IkReal x464=(cj0*sj1);
IkReal x465=(cj1*pz);
IkReal x466=((42.7008273285295)*py);
IkReal x467=(sj0*sj1);
IkReal x468=((20.0160128102482)*py);
IkReal x469=((42.7008273285295)*px);
if( IKabs(((-1.18921804109955)+(((-1.0)*cj0*x468))+(((-1.0)*x466*x467))+(((-42.7008273285295)*x465))+(((-1.0)*x464*x469))+((sj0*x463))+(((1.70803309314118)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.02588737656792)+(((-1.0)*cj0*x466))+((x463*x464))+((sj0*x469))+((x467*x468))+(((20.0160128102482)*x465))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.18921804109955)+(((-1.0)*cj0*x468))+(((-1.0)*x466*x467))+(((-42.7008273285295)*x465))+(((-1.0)*x464*x469))+((sj0*x463))+(((1.70803309314118)*sj1))))+IKsqr(((-4.02588737656792)+(((-1.0)*cj0*x466))+((x463*x464))+((sj0*x469))+((x467*x468))+(((20.0160128102482)*x465))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.18921804109955)+(((-1.0)*cj0*x468))+(((-1.0)*x466*x467))+(((-42.7008273285295)*x465))+(((-1.0)*x464*x469))+((sj0*x463))+(((1.70803309314118)*sj1))), ((-4.02588737656792)+(((-1.0)*cj0*x466))+((x463*x464))+((sj0*x469))+((x467*x468))+(((20.0160128102482)*x465))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x470=IKsin(j4);
IkReal x471=IKcos(j4);
evalcond[0]=((0.088)+(((-1.0)*px*sj0))+((cj0*py))+(((0.009)*x470))+(((0.0192)*x471)));
evalcond[1]=((-0.0134)+((cj1*pz))+(((-0.009)*x471))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1))+(((0.0192)*x470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x472=((42.7008273285295)*cj0);
IkReal x473=(cj1*px);
IkReal x474=((20.0160128102482)*sj0);
IkReal x475=((20.0160128102482)*cj0);
IkReal x476=(pz*sj1);
IkReal x477=(cj1*py);
IkReal x478=((42.7008273285295)*sj0);
if( IKabs(((9.72938350680544)+(((-1.0)*x477*x478))+(((1.70803309314118)*cj1))+(((-1.0)*x472*x473))+(((-1.0)*py*x475))+((px*x474))+(((42.7008273285295)*x476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.14398185214839)+((x473*x475))+(((-0.800640512409928)*cj1))+(((-1.0)*py*x472))+((x474*x477))+(((-20.0160128102482)*x476))+((px*x478)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.72938350680544)+(((-1.0)*x477*x478))+(((1.70803309314118)*cj1))+(((-1.0)*x472*x473))+(((-1.0)*py*x475))+((px*x474))+(((42.7008273285295)*x476))))+IKsqr(((-9.14398185214839)+((x473*x475))+(((-0.800640512409928)*cj1))+(((-1.0)*py*x472))+((x474*x477))+(((-20.0160128102482)*x476))+((px*x478))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((9.72938350680544)+(((-1.0)*x477*x478))+(((1.70803309314118)*cj1))+(((-1.0)*x472*x473))+(((-1.0)*py*x475))+((px*x474))+(((42.7008273285295)*x476))), ((-9.14398185214839)+((x473*x475))+(((-0.800640512409928)*cj1))+(((-1.0)*py*x472))+((x474*x477))+(((-20.0160128102482)*x476))+((px*x478))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x479=IKcos(j4);
IkReal x480=IKsin(j4);
IkReal x481=((1.0)*cj1);
evalcond[0]=((0.088)+(((0.009)*x480))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0192)*x479)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-0.0192)*x480))+(((-1.0)*py*sj0*x481))+(((-1.0)*cj0*px*x481))+((pz*sj1))+(((0.009)*x479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x482=((42.7008273285295)*py);
IkReal x483=((20.0160128102482)*sj0);
IkReal x484=(pz*sj1);
IkReal x485=(cj0*cj1*px);
if( IKabs(((-14.4819855884708)+(((42.7008273285295)*x485))+(((-1.70803309314118)*cj1))+(((-20.0160128102482)*cj0*py))+((px*x483))+((cj1*sj0*x482))+(((-42.7008273285295)*x484)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x484))+(((-1.0)*cj0*x482))+(((-1.0)*cj1*py*x483))+(((-20.0160128102482)*x485))+(((42.7008273285295)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-14.4819855884708)+(((42.7008273285295)*x485))+(((-1.70803309314118)*cj1))+(((-20.0160128102482)*cj0*py))+((px*x483))+((cj1*sj0*x482))+(((-42.7008273285295)*x484))))+IKsqr(((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x484))+(((-1.0)*cj0*x482))+(((-1.0)*cj1*py*x483))+(((-20.0160128102482)*x485))+(((42.7008273285295)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-14.4819855884708)+(((42.7008273285295)*x485))+(((-1.70803309314118)*cj1))+(((-20.0160128102482)*cj0*py))+((px*x483))+((cj1*sj0*x482))+(((-42.7008273285295)*x484))), ((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x484))+(((-1.0)*cj0*x482))+(((-1.0)*cj1*py*x483))+(((-20.0160128102482)*x485))+(((42.7008273285295)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x486=IKsin(j4);
IkReal x487=IKcos(j4);
IkReal x488=((1.0)*cj1);
evalcond[0]=((0.088)+(((0.009)*x486))+(((0.0192)*x487))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-1.0)*py*sj0*x488))+(((-1.0)*cj0*px*x488))+(((-0.009)*x487))+(((0.0192)*x486))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x489=((75000.0)*cj1);
IkReal x490=(py*sj0);
IkReal x491=(pz*sj1);
IkReal x492=((160000.0)*px);
IkReal x493=(sj0*sj3);
IkReal x494=(cj0*py*sj3);
CheckValue<IkReal> x495=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x495.valid){
continue;
}
CheckValue<IkReal> x496 = IKatan2WithCheck(IkReal(((45360.0)+(((-160000.0)*cj1*x490))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((-1.0)*cj0*cj1*x492))+(((-75000.0)*x494))+(((160000.0)*x491))+(((-8904.0)*sj3))+(((75000.0)*px*x493)))),IkReal(((-21262.5)+((x489*x490))+(((-3000.0)*cj1))+(((-75000.0)*x491))+(((-13000.0)*sj3))+((cj0*px*x489))+(((-160000.0)*x494))+((x492*x493))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x495.value)))+(x496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x497=IKcos(j4);
IkReal x498=IKsin(j4);
IkReal x499=(cj0*px);
IkReal x500=((1.0)*cj1);
IkReal x501=(py*sj0);
IkReal x502=((0.0192)*x498);
IkReal x503=((0.009)*x497);
evalcond[0]=((0.088)+(((0.009)*x498))+(((0.0192)*x497))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0278)+((cj3*x503))+(((-0.3862)*sj3))+((sj1*x501))+((cj1*pz))+((sj1*x499))+(((-0.04)*sj1))+(((-1.0)*cj3*x502))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*sj3*x502))+(((-1.0)*x499*x500))+(((0.04)*cj1))+((sj3*x503))+(((-0.0144)*sj3))+((pz*sj1))+(((-1.0)*x500*x501)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x504=((160000.0)*cj3);
IkReal x505=(cj0*py);
IkReal x506=(px*sj0);
IkReal x507=(cj1*pz);
IkReal x508=((75000.0)*cj3);
IkReal x509=(cj0*px*sj1);
IkReal x510=(py*sj0*sj1);
CheckValue<IkReal> x511 = IKatan2WithCheck(IkReal(((-4448.0)+(((-6400.0)*sj1))+(((-1.0)*x505*x508))+(((-61792.0)*sj3))+(((160000.0)*x510))+((x506*x508))+(((-8904.0)*cj3))+(((160000.0)*x509))+(((160000.0)*x507)))),IkReal(((2085.0)+(((-75000.0)*x510))+(((-75000.0)*x507))+(((-75000.0)*x509))+(((-1.0)*x504*x505))+(((3000.0)*sj1))+(((28965.0)*sj3))+((x504*x506))+(((-13000.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x511.valid){
continue;
}
CheckValue<IkReal> x512=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x512.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x511.value)+(((1.5707963267949)*(x512.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x513=IKcos(j4);
IkReal x514=IKsin(j4);
IkReal x515=(cj0*px);
IkReal x516=((1.0)*cj1);
IkReal x517=(py*sj0);
IkReal x518=((0.0192)*x514);
IkReal x519=((0.009)*x513);
evalcond[0]=((0.088)+(((-1.0)*px*sj0))+((cj0*py))+(((0.009)*x514))+(((0.0192)*x513)));
evalcond[1]=((-0.0278)+(((-1.0)*cj3*x518))+(((-0.3862)*sj3))+((cj1*pz))+((cj3*x519))+(((-0.04)*sj1))+((sj1*x515))+((sj1*x517))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*sj3*x518))+(((-1.0)*x516*x517))+(((-1.0)*x515*x516))+((sj3*x519))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j3, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x520=((1.0)*cj1);
IkReal x521=(cj0*r00);
IkReal x522=(r01*sj0);
CheckValue<IkReal> x523=IKPowWithIntegerCheck(cj2,-1);
if(!x523.valid){
continue;
}
if( IKabs(((x523.value)*((((sj1*x521))+((sj1*x522))+((cj1*r02)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*x520*x522))+(((-1.0)*x520*x521))+((r02*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x523.value)*((((sj1*x521))+((sj1*x522))+((cj1*r02))))))+IKsqr(((((-1.0)*x520*x522))+(((-1.0)*x520*x521))+((r02*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x523.value)*((((sj1*x521))+((sj1*x522))+((cj1*r02))))), ((((-1.0)*x520*x522))+(((-1.0)*x520*x521))+((r02*sj1))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x524=IKsin(j3);
IkReal x525=(r01*sj0);
IkReal x526=((1.0)*cj1);
IkReal x527=(cj0*r00);
IkReal x528=((1.0)*x524);
evalcond[0]=((((-1.0)*sj2*x528))+(((-1.0)*r00*sj0))+((cj0*r01)));
evalcond[1]=(((sj1*x525))+((sj1*x527))+(((-1.0)*cj2*x528))+((cj1*r02)));
evalcond[2]=((((-1.0)*x525*x526))+(((-1.0)*x526*x527))+((r02*sj1))+(((-1.0)*(IKcos(j3)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x529=(cj2*sj3);
j4eval[0]=x529;
j4eval[1]=IKsign(x529);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x530=(sj2*sj3);
j4eval[0]=x530;
j4eval[1]=IKsign(x530);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x531=((20.0160128102482)*px);
IkReal x532=(cj0*sj1);
IkReal x533=(cj1*pz);
IkReal x534=((42.7008273285295)*py);
IkReal x535=(sj0*sj1);
IkReal x536=((20.0160128102482)*py);
IkReal x537=((42.7008273285295)*px);
if( IKabs(((-0.440886042167067)+(((-1.0)*sj0*x531))+(((-1.0)*x532*x537))+(((-42.7008273285295)*x533))+(((-1.0)*x534*x535))+((cj0*x536))+(((1.70803309314118)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((3.74833199893248)+(((-1.0)*sj0*x537))+((cj0*x534))+((x531*x532))+((x535*x536))+(((20.0160128102482)*x533))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.440886042167067)+(((-1.0)*sj0*x531))+(((-1.0)*x532*x537))+(((-42.7008273285295)*x533))+(((-1.0)*x534*x535))+((cj0*x536))+(((1.70803309314118)*sj1))))+IKsqr(((3.74833199893248)+(((-1.0)*sj0*x537))+((cj0*x534))+((x531*x532))+((x535*x536))+(((20.0160128102482)*x533))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.440886042167067)+(((-1.0)*sj0*x531))+(((-1.0)*x532*x537))+(((-42.7008273285295)*x533))+(((-1.0)*x534*x535))+((cj0*x536))+(((1.70803309314118)*sj1))), ((3.74833199893248)+(((-1.0)*sj0*x537))+((cj0*x534))+((x531*x532))+((x535*x536))+(((20.0160128102482)*x533))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x538=IKsin(j4);
IkReal x539=IKcos(j4);
evalcond[0]=((0.068)+(((-0.0192)*x539))+(((-0.009)*x538))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0422)+((cj1*pz))+((cj0*px*sj1))+(((-0.009)*x539))+(((-0.04)*sj1))+(((0.0192)*x538))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x540=((20.0160128102482)*px);
IkReal x541=(cj0*sj1);
IkReal x542=(cj1*pz);
IkReal x543=((42.7008273285295)*py);
IkReal x544=(sj0*sj1);
IkReal x545=((20.0160128102482)*py);
IkReal x546=((42.7008273285295)*px);
if( IKabs(((1.93327995729917)+(((-1.0)*sj0*x540))+((x541*x546))+((cj0*x545))+(((-1.70803309314118)*sj1))+((x543*x544))+(((42.7008273285295)*x542)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.63544168668268)+(((-1.0)*sj0*x546))+(((-1.0)*x544*x545))+((cj0*x543))+(((-1.0)*x540*x541))+(((-20.0160128102482)*x542))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.93327995729917)+(((-1.0)*sj0*x540))+((x541*x546))+((cj0*x545))+(((-1.70803309314118)*sj1))+((x543*x544))+(((42.7008273285295)*x542))))+IKsqr(((2.63544168668268)+(((-1.0)*sj0*x546))+(((-1.0)*x544*x545))+((cj0*x543))+(((-1.0)*x540*x541))+(((-20.0160128102482)*x542))+(((0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.93327995729917)+(((-1.0)*sj0*x540))+((x541*x546))+((cj0*x545))+(((-1.70803309314118)*sj1))+((x543*x544))+(((42.7008273285295)*x542))), ((2.63544168668268)+(((-1.0)*sj0*x546))+(((-1.0)*x544*x545))+((cj0*x543))+(((-1.0)*x540*x541))+(((-20.0160128102482)*x542))+(((0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x547=IKcos(j4);
IkReal x548=IKsin(j4);
evalcond[0]=((0.068)+(((-0.0192)*x547))+(((-0.009)*x548))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0134)+(((-0.0192)*x548))+((cj1*pz))+((cj0*px*sj1))+(((0.009)*x547))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x549=((42.7008273285295)*cj0);
IkReal x550=(cj1*px);
IkReal x551=((20.0160128102482)*sj0);
IkReal x552=((20.0160128102482)*cj0);
IkReal x553=(pz*sj1);
IkReal x554=(cj1*py);
IkReal x555=((42.7008273285295)*sj0);
if( IKabs(((12.8518815052042)+((py*x552))+(((-1.0)*x554*x555))+(((1.70803309314118)*cj1))+(((-1.0)*px*x551))+(((-1.0)*x549*x550))+(((42.7008273285295)*x553)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.48265278889778)+((py*x549))+(((-0.800640512409928)*cj1))+(((-20.0160128102482)*x553))+(((-1.0)*px*x555))+((x550*x552))+((x551*x554)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.8518815052042)+((py*x552))+(((-1.0)*x554*x555))+(((1.70803309314118)*cj1))+(((-1.0)*px*x551))+(((-1.0)*x549*x550))+(((42.7008273285295)*x553))))+IKsqr(((-2.48265278889778)+((py*x549))+(((-0.800640512409928)*cj1))+(((-20.0160128102482)*x553))+(((-1.0)*px*x555))+((x550*x552))+((x551*x554))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((12.8518815052042)+((py*x552))+(((-1.0)*x554*x555))+(((1.70803309314118)*cj1))+(((-1.0)*px*x551))+(((-1.0)*x549*x550))+(((42.7008273285295)*x553))), ((-2.48265278889778)+((py*x549))+(((-0.800640512409928)*cj1))+(((-20.0160128102482)*x553))+(((-1.0)*px*x555))+((x550*x552))+((x551*x554))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x556=IKcos(j4);
IkReal x557=IKsin(j4);
IkReal x558=((1.0)*cj1);
evalcond[0]=((0.068)+(((-0.009)*x557))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0192)*x556)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*py*sj0*x558))+(((0.009)*x556))+((pz*sj1))+(((-0.0192)*x557))+(((-1.0)*cj0*px*x558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x559=((42.7008273285295)*py);
IkReal x560=((20.0160128102482)*sj0);
IkReal x561=(pz*sj1);
IkReal x562=(cj0*cj1*px);
if( IKabs(((-11.3594875900721)+(((-1.70803309314118)*cj1))+(((42.7008273285295)*x562))+(((20.0160128102482)*cj0*py))+((cj1*sj0*x559))+(((-42.7008273285295)*x561))+(((-1.0)*px*x560)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.86642647451294)+((cj0*x559))+(((0.800640512409928)*cj1))+(((-20.0160128102482)*x562))+(((20.0160128102482)*x561))+(((-1.0)*cj1*py*x560))+(((-42.7008273285295)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-11.3594875900721)+(((-1.70803309314118)*cj1))+(((42.7008273285295)*x562))+(((20.0160128102482)*cj0*py))+((cj1*sj0*x559))+(((-42.7008273285295)*x561))+(((-1.0)*px*x560))))+IKsqr(((8.86642647451294)+((cj0*x559))+(((0.800640512409928)*cj1))+(((-20.0160128102482)*x562))+(((20.0160128102482)*x561))+(((-1.0)*cj1*py*x560))+(((-42.7008273285295)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-11.3594875900721)+(((-1.70803309314118)*cj1))+(((42.7008273285295)*x562))+(((20.0160128102482)*cj0*py))+((cj1*sj0*x559))+(((-42.7008273285295)*x561))+(((-1.0)*px*x560))), ((8.86642647451294)+((cj0*x559))+(((0.800640512409928)*cj1))+(((-20.0160128102482)*x562))+(((20.0160128102482)*x561))+(((-1.0)*cj1*py*x560))+(((-42.7008273285295)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x563=IKsin(j4);
IkReal x564=IKcos(j4);
IkReal x565=((1.0)*cj1);
evalcond[0]=((0.068)+(((-0.0192)*x564))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.009)*x563)));
evalcond[1]=((0.2979)+(((-1.0)*py*sj0*x565))+(((0.04)*cj1))+(((0.0192)*x563))+(((-1.0)*cj0*px*x565))+((pz*sj1))+(((-0.009)*x564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x566=((75000.0)*cj1);
IkReal x567=(py*sj0);
IkReal x568=(pz*sj1);
IkReal x569=((160000.0)*px);
IkReal x570=(sj0*sj3);
IkReal x571=(cj0*py*sj3);
CheckValue<IkReal> x572=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x572.valid){
continue;
}
CheckValue<IkReal> x573 = IKatan2WithCheck(IkReal(((45360.0)+(((160000.0)*x568))+(((-160000.0)*cj1*x567))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((-1.0)*cj0*cj1*x569))+(((-75000.0)*px*x570))+(((2796.0)*sj3))+(((75000.0)*x571)))),IkReal(((-21262.5)+((x566*x567))+(((-1.0)*x569*x570))+((cj0*px*x566))+(((160000.0)*x571))+(((-3000.0)*cj1))+(((11960.0)*sj3))+(((-75000.0)*x568))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x572.value)))+(x573.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x574=IKsin(j4);
IkReal x575=IKcos(j4);
IkReal x576=(cj0*px);
IkReal x577=((1.0)*cj1);
IkReal x578=(py*sj0);
IkReal x579=((0.0192)*x574);
IkReal x580=((0.009)*x575);
evalcond[0]=((0.068)+(((-0.009)*x574))+(((-0.0192)*x575))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+((sj1*x576))+((sj1*x578))+((cj1*pz))+((cj3*x579))+(((0.3862)*sj3))+(((-0.04)*sj1))+(((0.0144)*cj3))+(((-1.0)*cj3*x580)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x577*x578))+((sj3*x580))+(((-1.0)*sj3*x579))+(((-0.0144)*sj3))+(((-1.0)*x576*x577))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x581=((160000.0)*cj3);
IkReal x582=(cj0*py);
IkReal x583=(px*sj0);
IkReal x584=(cj1*pz);
IkReal x585=((75000.0)*cj3);
IkReal x586=(cj0*px*sj1);
IkReal x587=(py*sj0*sj1);
CheckValue<IkReal> x588 = IKatan2WithCheck(IkReal(((-4448.0)+(((-61792.0)*sj3))+((x582*x585))+(((6400.0)*sj1))+(((-1.0)*x583*x585))+(((2796.0)*cj3))+(((-160000.0)*x584))+(((-160000.0)*x586))+(((-160000.0)*x587)))),IkReal(((2085.0)+((x581*x582))+(((75000.0)*x587))+(((75000.0)*x586))+(((75000.0)*x584))+(((11960.0)*cj3))+(((-3000.0)*sj1))+(((28965.0)*sj3))+(((-1.0)*x581*x583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x588.valid){
continue;
}
CheckValue<IkReal> x589=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x588.value)+(((1.5707963267949)*(x589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x590=IKsin(j4);
IkReal x591=IKcos(j4);
IkReal x592=(cj0*px);
IkReal x593=((1.0)*cj1);
IkReal x594=(py*sj0);
IkReal x595=((0.0192)*x590);
IkReal x596=((0.009)*x591);
evalcond[0]=((0.068)+(((-0.009)*x590))+(((-0.0192)*x591))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+((cj1*pz))+(((-1.0)*cj3*x596))+((cj3*x595))+(((0.3862)*sj3))+(((-0.04)*sj1))+((sj1*x592))+((sj1*x594))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x592*x593))+(((-1.0)*sj3*x595))+(((-1.0)*x593*x594))+((pz*sj1))+((sj3*x596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x597=((20.0160128102482)*px);
IkReal x598=(cj0*sj1);
IkReal x599=(cj1*pz);
IkReal x600=((42.7008273285295)*py);
IkReal x601=(sj0*sj1);
IkReal x602=((20.0160128102482)*py);
IkReal x603=((42.7008273285295)*px);
if( IKabs(((-3.56338404056579)+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x599))+((x600*x601))+((sj0*x597))+(((-1.0)*cj0*x602))+((x598*x603)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.91299706431812)+((sj0*x603))+(((-1.0)*x597*x598))+(((-1.0)*cj0*x600))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x599))+(((-1.0)*x601*x602)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.56338404056579)+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x599))+((x600*x601))+((sj0*x597))+(((-1.0)*cj0*x602))+((x598*x603))))+IKsqr(((-2.91299706431812)+((sj0*x603))+(((-1.0)*x597*x598))+(((-1.0)*cj0*x600))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x599))+(((-1.0)*x601*x602))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.56338404056579)+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x599))+((x600*x601))+((sj0*x597))+(((-1.0)*cj0*x602))+((x598*x603))), ((-2.91299706431812)+((sj0*x603))+(((-1.0)*x597*x598))+(((-1.0)*cj0*x600))+(((0.800640512409928)*sj1))+(((-20.0160128102482)*x599))+(((-1.0)*x601*x602))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x604=IKcos(j4);
IkReal x605=IKsin(j4);
evalcond[0]=((0.088)+(((0.009)*x605))+(((0.0192)*x604))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0422)+(((0.009)*x604))+((cj1*pz))+((cj0*px*sj1))+(((-0.0192)*x605))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x606=((20.0160128102482)*px);
IkReal x607=(cj0*sj1);
IkReal x608=(cj1*pz);
IkReal x609=((42.7008273285295)*py);
IkReal x610=(sj0*sj1);
IkReal x611=((20.0160128102482)*py);
IkReal x612=((42.7008273285295)*px);
if( IKabs(((-1.18921804109955)+((sj0*x606))+(((-1.0)*cj0*x611))+(((-1.0)*x609*x610))+(((-1.0)*x607*x612))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x608)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.02588737656792)+(((20.0160128102482)*x608))+((sj0*x612))+((x606*x607))+((x610*x611))+(((-1.0)*cj0*x609))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.18921804109955)+((sj0*x606))+(((-1.0)*cj0*x611))+(((-1.0)*x609*x610))+(((-1.0)*x607*x612))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x608))))+IKsqr(((-4.02588737656792)+(((20.0160128102482)*x608))+((sj0*x612))+((x606*x607))+((x610*x611))+(((-1.0)*cj0*x609))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.18921804109955)+((sj0*x606))+(((-1.0)*cj0*x611))+(((-1.0)*x609*x610))+(((-1.0)*x607*x612))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x608))), ((-4.02588737656792)+(((20.0160128102482)*x608))+((sj0*x612))+((x606*x607))+((x610*x611))+(((-1.0)*cj0*x609))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x613=IKsin(j4);
IkReal x614=IKcos(j4);
evalcond[0]=((0.088)+(((0.009)*x613))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0192)*x614)));
evalcond[1]=((-0.0134)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1))+(((-0.009)*x614))+(((0.0192)*x613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x615=((42.7008273285295)*cj0);
IkReal x616=(cj1*px);
IkReal x617=((20.0160128102482)*sj0);
IkReal x618=((20.0160128102482)*cj0);
IkReal x619=(pz*sj1);
IkReal x620=(cj1*py);
IkReal x621=((42.7008273285295)*sj0);
if( IKabs(((9.72938350680544)+(((42.7008273285295)*x619))+((px*x617))+(((-1.0)*x620*x621))+(((1.70803309314118)*cj1))+(((-1.0)*py*x618))+(((-1.0)*x615*x616)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.14398185214839)+((x617*x620))+(((-0.800640512409928)*cj1))+((x616*x618))+(((-20.0160128102482)*x619))+(((-1.0)*py*x615))+((px*x621)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.72938350680544)+(((42.7008273285295)*x619))+((px*x617))+(((-1.0)*x620*x621))+(((1.70803309314118)*cj1))+(((-1.0)*py*x618))+(((-1.0)*x615*x616))))+IKsqr(((-9.14398185214839)+((x617*x620))+(((-0.800640512409928)*cj1))+((x616*x618))+(((-20.0160128102482)*x619))+(((-1.0)*py*x615))+((px*x621))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((9.72938350680544)+(((42.7008273285295)*x619))+((px*x617))+(((-1.0)*x620*x621))+(((1.70803309314118)*cj1))+(((-1.0)*py*x618))+(((-1.0)*x615*x616))), ((-9.14398185214839)+((x617*x620))+(((-0.800640512409928)*cj1))+((x616*x618))+(((-20.0160128102482)*x619))+(((-1.0)*py*x615))+((px*x621))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x622=IKcos(j4);
IkReal x623=IKsin(j4);
IkReal x624=((1.0)*cj1);
evalcond[0]=((0.088)+(((0.0192)*x622))+(((0.009)*x623))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((-0.0192)*x623))+(((0.04)*cj1))+(((-1.0)*cj0*px*x624))+((pz*sj1))+(((-1.0)*py*sj0*x624))+(((0.009)*x622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x625=((42.7008273285295)*py);
IkReal x626=((20.0160128102482)*sj0);
IkReal x627=(pz*sj1);
IkReal x628=(cj0*cj1*px);
if( IKabs(((-14.4819855884708)+(((-1.70803309314118)*cj1))+(((-20.0160128102482)*cj0*py))+(((-42.7008273285295)*x627))+(((42.7008273285295)*x628))+((cj1*sj0*x625))+((px*x626)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.20509741126234)+(((-20.0160128102482)*x628))+(((0.800640512409928)*cj1))+(((-1.0)*cj0*x625))+(((20.0160128102482)*x627))+(((-1.0)*cj1*py*x626))+(((42.7008273285295)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-14.4819855884708)+(((-1.70803309314118)*cj1))+(((-20.0160128102482)*cj0*py))+(((-42.7008273285295)*x627))+(((42.7008273285295)*x628))+((cj1*sj0*x625))+((px*x626))))+IKsqr(((2.20509741126234)+(((-20.0160128102482)*x628))+(((0.800640512409928)*cj1))+(((-1.0)*cj0*x625))+(((20.0160128102482)*x627))+(((-1.0)*cj1*py*x626))+(((42.7008273285295)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-14.4819855884708)+(((-1.70803309314118)*cj1))+(((-20.0160128102482)*cj0*py))+(((-42.7008273285295)*x627))+(((42.7008273285295)*x628))+((cj1*sj0*x625))+((px*x626))), ((2.20509741126234)+(((-20.0160128102482)*x628))+(((0.800640512409928)*cj1))+(((-1.0)*cj0*x625))+(((20.0160128102482)*x627))+(((-1.0)*cj1*py*x626))+(((42.7008273285295)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x629=IKsin(j4);
IkReal x630=IKcos(j4);
IkReal x631=((1.0)*cj1);
evalcond[0]=((0.088)+(((0.0192)*x630))+(((0.009)*x629))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.0192)*x629))+(((0.04)*cj1))+(((-0.009)*x630))+((pz*sj1))+(((-1.0)*cj0*px*x631))+(((-1.0)*py*sj0*x631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x632=((75000.0)*cj1);
IkReal x633=(py*sj0);
IkReal x634=(pz*sj1);
IkReal x635=((160000.0)*px);
IkReal x636=(sj0*sj3);
IkReal x637=(cj0*py*sj3);
CheckValue<IkReal> x638=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x638.valid){
continue;
}
CheckValue<IkReal> x639 = IKatan2WithCheck(IkReal(((45360.0)+(((-160000.0)*cj1*x633))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((-75000.0)*x637))+(((160000.0)*x634))+(((75000.0)*px*x636))+(((-1.0)*cj0*cj1*x635))+(((-8904.0)*sj3)))),IkReal(((-21262.5)+((cj0*px*x632))+((x635*x636))+(((-75000.0)*x634))+(((-3000.0)*cj1))+(((-160000.0)*x637))+((x632*x633))+(((-13000.0)*sj3))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x638.value)))+(x639.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x640=IKcos(j4);
IkReal x641=IKsin(j4);
IkReal x642=(cj0*px);
IkReal x643=((1.0)*cj1);
IkReal x644=(py*sj0);
IkReal x645=((0.0192)*x641);
IkReal x646=((0.009)*x640);
evalcond[0]=((0.088)+(((0.009)*x641))+(((0.0192)*x640))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0278)+((sj1*x642))+((sj1*x644))+(((-0.3862)*sj3))+(((-1.0)*cj3*x645))+((cj1*pz))+((cj3*x646))+(((-0.04)*sj1))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*x642*x643))+(((0.04)*cj1))+(((-1.0)*sj3*x645))+(((-0.0144)*sj3))+(((-1.0)*x643*x644))+((sj3*x646))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x647=((160000.0)*cj3);
IkReal x648=(cj0*py);
IkReal x649=(px*sj0);
IkReal x650=(cj1*pz);
IkReal x651=((75000.0)*cj3);
IkReal x652=(cj0*px*sj1);
IkReal x653=(py*sj0*sj1);
CheckValue<IkReal> x654=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x654.valid){
continue;
}
CheckValue<IkReal> x655 = IKatan2WithCheck(IkReal(((-4448.0)+(((-6400.0)*sj1))+(((-61792.0)*sj3))+((x649*x651))+(((-8904.0)*cj3))+(((160000.0)*x652))+(((160000.0)*x653))+(((160000.0)*x650))+(((-1.0)*x648*x651)))),IkReal(((2085.0)+(((-75000.0)*x652))+(((-75000.0)*x653))+(((-75000.0)*x650))+(((-1.0)*x647*x648))+(((3000.0)*sj1))+(((28965.0)*sj3))+((x647*x649))+(((-13000.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x654.value)))+(x655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x656=IKcos(j4);
IkReal x657=IKsin(j4);
IkReal x658=(cj0*px);
IkReal x659=((1.0)*cj1);
IkReal x660=(py*sj0);
IkReal x661=((0.0192)*x657);
IkReal x662=((0.009)*x656);
evalcond[0]=((0.088)+(((0.009)*x657))+(((0.0192)*x656))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0278)+(((-1.0)*cj3*x661))+((cj3*x662))+((sj1*x660))+(((-0.3862)*sj3))+((sj1*x658))+((cj1*pz))+(((-0.04)*sj1))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x659*x660))+(((-1.0)*sj3*x661))+(((-0.0144)*sj3))+((pz*sj1))+((sj3*x662))+(((-1.0)*x658*x659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x663=(py*sj2);
IkReal x664=((20.0160128102482)*sj1);
IkReal x665=((42.7008273285295)*cj2);
IkReal x666=(px*sj0);
IkReal x667=(cj1*pz);
IkReal x668=(cj2*sj1);
IkReal x669=((42.7008273285295)*cj0);
IkReal x670=((20.0160128102482)*sj2);
IkReal x671=((42.7008273285295)*sj2);
IkReal x672=(cj0*px);
IkReal x673=(sj0*sj1);
IkReal x674=(sj1*sj2);
IkReal x675=((20.0160128102482)*cj2);
IkReal x676=(cj0*py);
if( IKabs(((-2.00213504136643)+(((-1.0)*x665*x667))+(((-1.0)*x663*x669))+(((-1.0)*py*x665*x673))+(((-1.0)*sj1*x665*x672))+(((0.800640512409928)*x674))+(((1.56124899919936)*cj2))+((x666*x671))+(((-1.0)*x667*x670))+(((-1.0)*x666*x675))+(((-3.3306645316253)*sj2))+((x675*x676))+(((-1.0)*sj2*x664*x672))+(((-1.0)*sj0*x663*x664))+(((1.70803309314118)*x668)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.417667467307179)+(((-1.0)*x665*x666))+(((-42.7008273285295)*x663*x673))+((x665*x676))+(((-0.800640512409928)*x668))+((cj2*x664*x672))+((x667*x675))+(((-1.0)*x667*x671))+(((-1.0)*x666*x670))+(((-1.0)*px*x669*x674))+(((1.70803309314118)*x674))+(((3.3306645316253)*cj2))+(((1.56124899919936)*sj2))+((cj2*py*sj0*x664))+(((20.0160128102482)*cj0*x663)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.00213504136643)+(((-1.0)*x665*x667))+(((-1.0)*x663*x669))+(((-1.0)*py*x665*x673))+(((-1.0)*sj1*x665*x672))+(((0.800640512409928)*x674))+(((1.56124899919936)*cj2))+((x666*x671))+(((-1.0)*x667*x670))+(((-1.0)*x666*x675))+(((-3.3306645316253)*sj2))+((x675*x676))+(((-1.0)*sj2*x664*x672))+(((-1.0)*sj0*x663*x664))+(((1.70803309314118)*x668))))+IKsqr(((0.417667467307179)+(((-1.0)*x665*x666))+(((-42.7008273285295)*x663*x673))+((x665*x676))+(((-0.800640512409928)*x668))+((cj2*x664*x672))+((x667*x675))+(((-1.0)*x667*x671))+(((-1.0)*x666*x670))+(((-1.0)*px*x669*x674))+(((1.70803309314118)*x674))+(((3.3306645316253)*cj2))+(((1.56124899919936)*sj2))+((cj2*py*sj0*x664))+(((20.0160128102482)*cj0*x663))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.00213504136643)+(((-1.0)*x665*x667))+(((-1.0)*x663*x669))+(((-1.0)*py*x665*x673))+(((-1.0)*sj1*x665*x672))+(((0.800640512409928)*x674))+(((1.56124899919936)*cj2))+((x666*x671))+(((-1.0)*x667*x670))+(((-1.0)*x666*x675))+(((-3.3306645316253)*sj2))+((x675*x676))+(((-1.0)*sj2*x664*x672))+(((-1.0)*sj0*x663*x664))+(((1.70803309314118)*x668))), ((0.417667467307179)+(((-1.0)*x665*x666))+(((-42.7008273285295)*x663*x673))+((x665*x676))+(((-0.800640512409928)*x668))+((cj2*x664*x672))+((x667*x675))+(((-1.0)*x667*x671))+(((-1.0)*x666*x670))+(((-1.0)*px*x669*x674))+(((1.70803309314118)*x674))+(((3.3306645316253)*cj2))+(((1.56124899919936)*sj2))+((cj2*py*sj0*x664))+(((20.0160128102482)*cj0*x663))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x677=IKsin(j4);
IkReal x678=IKcos(j4);
IkReal x679=((0.0192)*sj2);
IkReal x680=((0.009)*sj2);
IkReal x681=((0.0192)*cj2);
IkReal x682=((0.009)*cj2);
evalcond[0]=((0.078)+(((-0.01)*cj2))+((x677*x679))+(((-1.0)*x678*x680))+(((-1.0)*x678*x681))+(((-1.0)*x677*x682))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0422)*sj2)));
evalcond[1]=(((x677*x681))+((x677*x680))+((cj1*pz))+(((-1.0)*x678*x682))+((cj0*px*sj1))+((x678*x679))+(((-0.04)*sj1))+(((0.0422)*cj2))+((py*sj0*sj1))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x683=(py*sj2);
IkReal x684=((20.0160128102482)*sj1);
IkReal x685=((42.7008273285295)*cj2);
IkReal x686=(px*sj0);
IkReal x687=(cj1*pz);
IkReal x688=(cj2*sj1);
IkReal x689=((42.7008273285295)*cj0);
IkReal x690=((20.0160128102482)*sj2);
IkReal x691=((42.7008273285295)*sj2);
IkReal x692=(cj0*px);
IkReal x693=(sj0*sj1);
IkReal x694=(sj1*sj2);
IkReal x695=((20.0160128102482)*cj2);
IkReal x696=(cj0*py);
if( IKabs(((0.372030958099813)+(((-1.0)*x687*x690))+((x695*x696))+((sj1*x685*x692))+((py*x685*x693))+((x683*x689))+((x685*x687))+(((3.3306645316253)*sj2))+(((-1.70803309314118)*x688))+(((-1.0)*sj0*x683*x684))+(((1.56124899919936)*cj2))+(((-1.0)*x686*x695))+(((-1.0)*x686*x691))+(((-1.0)*sj2*x684*x692))+(((0.800640512409928)*x694)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.695222844942621)+(((-1.0)*x687*x695))+(((-1.0)*x687*x691))+(((-1.0)*x685*x686))+(((1.70803309314118)*x694))+((x686*x690))+(((-42.7008273285295)*x683*x693))+(((-1.0)*cj2*py*sj0*x684))+(((0.800640512409928)*x688))+(((-1.0)*px*x689*x694))+(((-1.56124899919936)*sj2))+(((3.3306645316253)*cj2))+((x685*x696))+(((-20.0160128102482)*cj0*x683))+(((-1.0)*cj2*x684*x692)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.372030958099813)+(((-1.0)*x687*x690))+((x695*x696))+((sj1*x685*x692))+((py*x685*x693))+((x683*x689))+((x685*x687))+(((3.3306645316253)*sj2))+(((-1.70803309314118)*x688))+(((-1.0)*sj0*x683*x684))+(((1.56124899919936)*cj2))+(((-1.0)*x686*x695))+(((-1.0)*x686*x691))+(((-1.0)*sj2*x684*x692))+(((0.800640512409928)*x694))))+IKsqr(((-0.695222844942621)+(((-1.0)*x687*x695))+(((-1.0)*x687*x691))+(((-1.0)*x685*x686))+(((1.70803309314118)*x694))+((x686*x690))+(((-42.7008273285295)*x683*x693))+(((-1.0)*cj2*py*sj0*x684))+(((0.800640512409928)*x688))+(((-1.0)*px*x689*x694))+(((-1.56124899919936)*sj2))+(((3.3306645316253)*cj2))+((x685*x696))+(((-20.0160128102482)*cj0*x683))+(((-1.0)*cj2*x684*x692))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.372030958099813)+(((-1.0)*x687*x690))+((x695*x696))+((sj1*x685*x692))+((py*x685*x693))+((x683*x689))+((x685*x687))+(((3.3306645316253)*sj2))+(((-1.70803309314118)*x688))+(((-1.0)*sj0*x683*x684))+(((1.56124899919936)*cj2))+(((-1.0)*x686*x695))+(((-1.0)*x686*x691))+(((-1.0)*sj2*x684*x692))+(((0.800640512409928)*x694))), ((-0.695222844942621)+(((-1.0)*x687*x695))+(((-1.0)*x687*x691))+(((-1.0)*x685*x686))+(((1.70803309314118)*x694))+((x686*x690))+(((-42.7008273285295)*x683*x693))+(((-1.0)*cj2*py*sj0*x684))+(((0.800640512409928)*x688))+(((-1.0)*px*x689*x694))+(((-1.56124899919936)*sj2))+(((3.3306645316253)*cj2))+((x685*x696))+(((-20.0160128102482)*cj0*x683))+(((-1.0)*cj2*x684*x692))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x697=IKcos(j4);
IkReal x698=IKsin(j4);
IkReal x699=(sj2*x698);
IkReal x700=((0.0192)*x697);
IkReal x701=((0.009)*x697);
IkReal x702=(cj2*x698);
evalcond[0]=((0.078)+(((-0.01)*cj2))+(((-0.0192)*x699))+(((-1.0)*cj2*x700))+((sj2*x701))+(((-1.0)*px*sj0))+(((-0.009)*x702))+((cj0*py))+(((0.0134)*sj2)));
evalcond[1]=((((0.0134)*cj2))+(((0.009)*x699))+((cj1*pz))+((sj2*x700))+((cj0*px*sj1))+(((-0.0192)*x702))+(((-0.04)*sj1))+((cj2*x701))+((py*sj0*sj1))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=cj2;
j4eval[1]=IKsign(cj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x703=(cj0*px);
IkReal x704=((42.7008273285295)*cj1);
IkReal x705=((20.0160128102482)*sj1);
IkReal x706=((20.0160128102482)*cj1);
IkReal x707=((42.7008273285295)*sj1);
IkReal x708=(py*sj0);
if( IKabs(((11.2906325060048)+(((-1.0)*pz*x706))+(((1.70803309314118)*cj1))+(((-1.0)*x703*x704))+(((-1.0)*x703*x705))+(((-1.0)*x704*x708))+(((-1.0)*x705*x708))+(((0.800640512409928)*sj1))+((pz*x707)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+(((-1.0)*pz*x704))+(((-1.0)*pz*x705))+(((-1.0)*x707*x708))+((x706*x708))+(((-0.800640512409928)*cj1))+((x703*x706))+(((-1.0)*x703*x707))+(((1.70803309314118)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((11.2906325060048)+(((-1.0)*pz*x706))+(((1.70803309314118)*cj1))+(((-1.0)*x703*x704))+(((-1.0)*x703*x705))+(((-1.0)*x704*x708))+(((-1.0)*x705*x708))+(((0.800640512409928)*sj1))+((pz*x707))))+IKsqr(((-5.81331732052309)+(((-1.0)*pz*x704))+(((-1.0)*pz*x705))+(((-1.0)*x707*x708))+((x706*x708))+(((-0.800640512409928)*cj1))+((x703*x706))+(((-1.0)*x703*x707))+(((1.70803309314118)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((11.2906325060048)+(((-1.0)*pz*x706))+(((1.70803309314118)*cj1))+(((-1.0)*x703*x704))+(((-1.0)*x703*x705))+(((-1.0)*x704*x708))+(((-1.0)*x705*x708))+(((0.800640512409928)*sj1))+((pz*x707))), ((-5.81331732052309)+(((-1.0)*pz*x704))+(((-1.0)*pz*x705))+(((-1.0)*x707*x708))+((x706*x708))+(((-0.800640512409928)*cj1))+((x703*x706))+(((-1.0)*x703*x707))+(((1.70803309314118)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x709=IKcos(j4);
IkReal x710=IKsin(j4);
IkReal x711=(cj0*px);
IkReal x712=(py*sj0);
IkReal x713=((1.0)*cj1);
evalcond[0]=((0.01)+(((0.0192)*x709))+((cj1*pz))+(((-0.04)*sj1))+((sj1*x712))+((sj1*x711))+(((0.009)*x710)));
evalcond[1]=((0.2691)+(((-1.0)*x711*x713))+(((0.04)*cj1))+(((-0.0192)*x710))+(((0.009)*x709))+(((-1.0)*x712*x713))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x714=(cj0*px);
IkReal x715=((42.7008273285295)*cj1);
IkReal x716=((20.0160128102482)*sj1);
IkReal x717=((20.0160128102482)*cj1);
IkReal x718=((42.7008273285295)*sj1);
IkReal x719=(py*sj0);
if( IKabs(((11.2906325060048)+(((-1.0)*x714*x715))+((x714*x716))+(((1.70803309314118)*cj1))+((x716*x719))+((pz*x718))+((pz*x717))+(((-0.800640512409928)*sj1))+(((-1.0)*x715*x719)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+(((-1.0)*pz*x716))+((x714*x717))+((x714*x718))+(((-0.800640512409928)*cj1))+(((-1.70803309314118)*sj1))+((x717*x719))+((x718*x719))+((pz*x715)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((11.2906325060048)+(((-1.0)*x714*x715))+((x714*x716))+(((1.70803309314118)*cj1))+((x716*x719))+((pz*x718))+((pz*x717))+(((-0.800640512409928)*sj1))+(((-1.0)*x715*x719))))+IKsqr(((-5.81331732052309)+(((-1.0)*pz*x716))+((x714*x717))+((x714*x718))+(((-0.800640512409928)*cj1))+(((-1.70803309314118)*sj1))+((x717*x719))+((x718*x719))+((pz*x715))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((11.2906325060048)+(((-1.0)*x714*x715))+((x714*x716))+(((1.70803309314118)*cj1))+((x716*x719))+((pz*x718))+((pz*x717))+(((-0.800640512409928)*sj1))+(((-1.0)*x715*x719))), ((-5.81331732052309)+(((-1.0)*pz*x716))+((x714*x717))+((x714*x718))+(((-0.800640512409928)*cj1))+(((-1.70803309314118)*sj1))+((x717*x719))+((x718*x719))+((pz*x715))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x720=IKcos(j4);
IkReal x721=IKsin(j4);
IkReal x722=(cj0*px);
IkReal x723=(py*sj0);
IkReal x724=((1.0)*cj1);
evalcond[0]=((-0.01)+((cj1*pz))+(((-0.04)*sj1))+(((-0.0192)*x720))+((sj1*x723))+((sj1*x722))+(((-0.009)*x721)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*x723*x724))+(((-1.0)*x722*x724))+(((0.009)*x720))+(((-0.0192)*x721))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x725=(cj1*sj2);
IkReal x726=(py*sj0);
IkReal x727=((75000.0)*pz);
IkReal x728=(cj0*px);
IkReal x729=(sj1*sj2);
IkReal x730=((75000.0)*sj1);
IkReal x731=((160000.0)*sj1);
IkReal x732=((160000.0)*pz);
CheckValue<IkReal> x733 = IKatan2WithCheck(IkReal(((((-160000.0)*x725*x726))+(((-160000.0)*x725*x728))+(((42306.0)*sj2))+((x729*x732))+(((-31050.0)*cj2))+(((6400.0)*x725))+(((-1.0)*cj1*x727))+(((3000.0)*sj1))+(((-1.0)*x726*x730))+(((-1.0)*x728*x730)))),IkReal(((((-66240.0)*cj2))+(((-1.0)*x727*x729))+(((-21782.5)*sj2))+(((6400.0)*sj1))+(((75000.0)*x725*x728))+(((75000.0)*x725*x726))+(((-1.0)*cj1*x732))+(((-3000.0)*x725))+(((-1.0)*x726*x731))+(((-1.0)*x728*x731)))),IKFAST_ATAN2_MAGTHRESH);
if(!x733.valid){
continue;
}
CheckValue<IkReal> x734=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x734.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x733.value)+(((1.5707963267949)*(x734.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x735=IKcos(j4);
IkReal x736=IKsin(j4);
IkReal x737=(cj0*px);
IkReal x738=(py*sj0);
IkReal x739=((1.0)*cj1);
IkReal x740=((0.0192)*x735);
IkReal x741=((0.009)*x736);
evalcond[0]=((0.078)+(((-1.0)*cj2*x741))+(((-1.0)*cj2*x740))+(((0.414)*sj2))+(((-0.01)*cj2))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*x737*x739))+(((0.009)*x735))+(((-0.0192)*x736))+((pz*sj1))+(((-1.0)*x738*x739)));
evalcond[2]=(((cj1*pz))+(((-0.04)*sj1))+(((0.414)*cj2))+((sj2*x740))+((sj2*x741))+((sj1*x738))+((sj1*x737))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x742=((160000.0)*px);
IkReal x743=(cj0*py);
IkReal x744=(cj1*cj2);
IkReal x745=((75000.0)*px);
IkReal x746=(cj2*pz*sj1);
IkReal x747=(py*sj0*x744);
CheckValue<IkReal> x748 = IKatan2WithCheck(IkReal(((5850.0)+(((75000.0)*x743))+(((31050.0)*sj2))+(((-1.0)*cj0*x742*x744))+(((6400.0)*x744))+(((42306.0)*cj2))+(((-160000.0)*x747))+(((160000.0)*x746))+(((-1.0)*sj0*x745)))),IkReal(((12480.0)+(((66240.0)*sj2))+(((75000.0)*x747))+(((-21782.5)*cj2))+(((-3000.0)*x744))+(((-75000.0)*x746))+((cj0*x744*x745))+(((160000.0)*x743))+(((-1.0)*sj0*x742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x748.valid){
continue;
}
CheckValue<IkReal> x749=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x748.value)+(((1.5707963267949)*(x749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x750=IKcos(j4);
IkReal x751=IKsin(j4);
IkReal x752=(cj0*px);
IkReal x753=(py*sj0);
IkReal x754=((1.0)*cj1);
IkReal x755=((0.0192)*x750);
IkReal x756=((0.009)*x751);
evalcond[0]=((0.078)+(((0.414)*sj2))+(((-1.0)*cj2*x755))+(((-1.0)*cj2*x756))+(((-0.01)*cj2))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*x753*x754))+(((-1.0)*x752*x754))+((pz*sj1))+(((-0.0192)*x751))+(((0.009)*x750)));
evalcond[2]=(((sj1*x752))+((sj1*x753))+((cj1*pz))+(((-0.04)*sj1))+(((0.414)*cj2))+((sj2*x756))+((sj2*x755))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=cj2;
j4eval[1]=IKsign(cj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x757=(cj0*px);
IkReal x758=((42.7008273285295)*cj1);
IkReal x759=((20.0160128102482)*sj1);
IkReal x760=((20.0160128102482)*cj1);
IkReal x761=((42.7008273285295)*sj1);
IkReal x762=(py*sj0);
if( IKabs(((-12.9207365892714)+(((-1.70803309314118)*cj1))+((x758*x762))+(((0.800640512409928)*sj1))+((x757*x758))+(((-1.0)*x757*x759))+(((-1.0)*x759*x762))+(((-1.0)*pz*x760))+(((-1.0)*pz*x761)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((0.800640512409928)*cj1))+((pz*x759))+(((-1.0)*x757*x760))+(((-1.0)*x757*x761))+(((1.70803309314118)*sj1))+(((-1.0)*pz*x758))+(((-1.0)*x760*x762))+(((-1.0)*x761*x762)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-12.9207365892714)+(((-1.70803309314118)*cj1))+((x758*x762))+(((0.800640512409928)*sj1))+((x757*x758))+(((-1.0)*x757*x759))+(((-1.0)*x759*x762))+(((-1.0)*pz*x760))+(((-1.0)*pz*x761))))+IKsqr(((5.53576194288764)+(((0.800640512409928)*cj1))+((pz*x759))+(((-1.0)*x757*x760))+(((-1.0)*x757*x761))+(((1.70803309314118)*sj1))+(((-1.0)*pz*x758))+(((-1.0)*x760*x762))+(((-1.0)*x761*x762))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-12.9207365892714)+(((-1.70803309314118)*cj1))+((x758*x762))+(((0.800640512409928)*sj1))+((x757*x758))+(((-1.0)*x757*x759))+(((-1.0)*x759*x762))+(((-1.0)*pz*x760))+(((-1.0)*pz*x761))), ((5.53576194288764)+(((0.800640512409928)*cj1))+((pz*x759))+(((-1.0)*x757*x760))+(((-1.0)*x757*x761))+(((1.70803309314118)*sj1))+(((-1.0)*pz*x758))+(((-1.0)*x760*x762))+(((-1.0)*x761*x762))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x763=IKsin(j4);
IkReal x764=IKcos(j4);
IkReal x765=(cj0*px);
IkReal x766=(py*sj0);
IkReal x767=((1.0)*cj1);
evalcond[0]=((0.01)+(((0.0192)*x764))+((sj1*x766))+((sj1*x765))+(((0.009)*x763))+((cj1*pz))+(((-0.04)*sj1)));
evalcond[1]=((0.2979)+(((0.0192)*x763))+(((0.04)*cj1))+(((-1.0)*x765*x767))+(((-0.009)*x764))+(((-1.0)*x766*x767))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x768=(cj0*px);
IkReal x769=((42.7008273285295)*cj1);
IkReal x770=((20.0160128102482)*sj1);
IkReal x771=((20.0160128102482)*cj1);
IkReal x772=((42.7008273285295)*sj1);
IkReal x773=(py*sj0);
if( IKabs(((-12.9207365892714)+((pz*x771))+(((-1.70803309314118)*cj1))+((x770*x773))+((x768*x769))+((x769*x773))+(((-1.0)*pz*x772))+((x768*x770))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+((pz*x770))+(((-1.0)*x768*x771))+(((0.800640512409928)*cj1))+((x772*x773))+(((-1.70803309314118)*sj1))+(((-1.0)*x771*x773))+((pz*x769))+((x768*x772)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-12.9207365892714)+((pz*x771))+(((-1.70803309314118)*cj1))+((x770*x773))+((x768*x769))+((x769*x773))+(((-1.0)*pz*x772))+((x768*x770))+(((-0.800640512409928)*sj1))))+IKsqr(((5.53576194288764)+((pz*x770))+(((-1.0)*x768*x771))+(((0.800640512409928)*cj1))+((x772*x773))+(((-1.70803309314118)*sj1))+(((-1.0)*x771*x773))+((pz*x769))+((x768*x772))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-12.9207365892714)+((pz*x771))+(((-1.70803309314118)*cj1))+((x770*x773))+((x768*x769))+((x769*x773))+(((-1.0)*pz*x772))+((x768*x770))+(((-0.800640512409928)*sj1))), ((5.53576194288764)+((pz*x770))+(((-1.0)*x768*x771))+(((0.800640512409928)*cj1))+((x772*x773))+(((-1.70803309314118)*sj1))+(((-1.0)*x771*x773))+((pz*x769))+((x768*x772))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x774=IKsin(j4);
IkReal x775=IKcos(j4);
IkReal x776=(cj0*px);
IkReal x777=(py*sj0);
IkReal x778=((1.0)*cj1);
evalcond[0]=((-0.01)+(((-0.0192)*x775))+((cj1*pz))+((sj1*x776))+((sj1*x777))+(((-0.04)*sj1))+(((-0.009)*x774)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-0.009)*x775))+(((-1.0)*x776*x778))+((pz*sj1))+(((-1.0)*x777*x778))+(((0.0192)*x774)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x779=(cj1*sj2);
IkReal x780=(py*sj0);
IkReal x781=(cj0*px);
IkReal x782=((75000.0)*pz);
IkReal x783=(sj1*sj2);
IkReal x784=((160000.0)*pz);
IkReal x785=((75000.0)*sj1);
IkReal x786=((160000.0)*sj1);
CheckValue<IkReal> x787=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x787.valid){
continue;
}
CheckValue<IkReal> x788 = IKatan2WithCheck(IkReal(((((-1.0)*x781*x785))+(((26880.0)*cj2))+(((-48414.0)*sj2))+(((-1.0)*cj1*x782))+(((-6400.0)*x779))+(((160000.0)*x779*x781))+(((160000.0)*x779*x780))+(((3000.0)*sj1))+(((-1.0)*x780*x785))+(((-1.0)*x783*x784)))),IkReal(((((3000.0)*x779))+((x782*x783))+(((-1.0)*x781*x786))+(((-75000.0)*x779*x781))+(((-75000.0)*x779*x780))+(((6400.0)*sj1))+(((57344.0)*cj2))+(((-1.0)*cj1*x784))+(((-1.0)*x780*x786))+(((20742.5)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x787.value)))+(x788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x789=IKsin(j4);
IkReal x790=IKcos(j4);
IkReal x791=(cj0*px);
IkReal x792=(py*sj0);
IkReal x793=((1.0)*cj1);
IkReal x794=((0.0192)*x790);
IkReal x795=((0.009)*x789);
evalcond[0]=((0.078)+(((-0.3584)*sj2))+(((-1.0)*cj2*x794))+(((-1.0)*cj2*x795))+(((-0.01)*cj2))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-1.0)*x792*x793))+(((0.0192)*x789))+(((-0.009)*x790))+(((-1.0)*x791*x793))+((pz*sj1)));
evalcond[2]=(((sj1*x792))+((sj1*x791))+((cj1*pz))+(((-0.3584)*cj2))+(((-0.04)*sj1))+(((0.01)*sj2))+((sj2*x795))+((sj2*x794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x796=((160000.0)*py);
IkReal x797=((75000.0)*py);
IkReal x798=(cj1*cj2);
IkReal x799=((160000.0)*px);
IkReal x800=((75000.0)*px);
IkReal x801=(sj0*x798);
IkReal x802=(cj2*pz*sj1);
CheckValue<IkReal> x803=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x803.valid){
continue;
}
CheckValue<IkReal> x804 = IKatan2WithCheck(IkReal(((5850.0)+(((-6400.0)*x798))+(((-160000.0)*x802))+((cj0*x798*x799))+(((-48414.0)*cj2))+(((-1.0)*sj0*x800))+((cj0*x797))+(((-26880.0)*sj2))+((x796*x801)))),IkReal(((12480.0)+(((3000.0)*x798))+(((-1.0)*x797*x801))+(((-1.0)*sj0*x799))+(((75000.0)*x802))+(((20742.5)*cj2))+(((-57344.0)*sj2))+(((-1.0)*cj0*x798*x800))+((cj0*x796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x803.value)))+(x804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x805=IKsin(j4);
IkReal x806=IKcos(j4);
IkReal x807=(cj0*px);
IkReal x808=(py*sj0);
IkReal x809=((1.0)*cj1);
IkReal x810=((0.0192)*x806);
IkReal x811=((0.009)*x805);
evalcond[0]=((0.078)+(((-0.3584)*sj2))+(((-1.0)*cj2*x810))+(((-1.0)*cj2*x811))+(((-0.01)*cj2))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-1.0)*x807*x809))+(((0.0192)*x805))+(((-1.0)*x808*x809))+(((-0.009)*x806))+((pz*sj1)));
evalcond[2]=(((cj1*pz))+((sj2*x811))+((sj2*x810))+(((-0.3584)*cj2))+(((-0.04)*sj1))+((sj1*x807))+((sj1*x808))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x812=((20.0160128102482)*px);
IkReal x813=(cj0*sj1);
IkReal x814=(cj1*pz);
IkReal x815=((42.7008273285295)*py);
IkReal x816=(sj0*sj1);
IkReal x817=((20.0160128102482)*py);
IkReal x818=((42.7008273285295)*px);
if( IKabs(((-5.33279957299173)+(((-1.0)*x812*x813))+((sj0*x818))+(((-20.0160128102482)*x814))+(((-1.0)*cj0*x815))+(((-1.0)*x816*x817))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.97891646650654)+((cj0*x817))+(((-1.0)*sj0*x812))+(((-1.0)*x815*x816))+(((-1.0)*x813*x818))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x814)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.33279957299173)+(((-1.0)*x812*x813))+((sj0*x818))+(((-20.0160128102482)*x814))+(((-1.0)*cj0*x815))+(((-1.0)*x816*x817))+(((0.800640512409928)*sj1))))+IKsqr(((1.97891646650654)+((cj0*x817))+(((-1.0)*sj0*x812))+(((-1.0)*x815*x816))+(((-1.0)*x813*x818))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x814))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-5.33279957299173)+(((-1.0)*x812*x813))+((sj0*x818))+(((-20.0160128102482)*x814))+(((-1.0)*cj0*x815))+(((-1.0)*x816*x817))+(((0.800640512409928)*sj1))), ((1.97891646650654)+((cj0*x817))+(((-1.0)*sj0*x812))+(((-1.0)*x815*x816))+(((-1.0)*x813*x818))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x814))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x819=IKsin(j4);
IkReal x820=IKcos(j4);
evalcond[0]=((0.1202)+(((0.0192)*x819))+(((-0.009)*x820))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.01)+(((0.0192)*x820))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.009)*x819))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x821=((20.0160128102482)*px);
IkReal x822=(cj0*sj1);
IkReal x823=(cj1*pz);
IkReal x824=((42.7008273285295)*py);
IkReal x825=(sj0*sj1);
IkReal x826=((20.0160128102482)*py);
IkReal x827=((42.7008273285295)*px);
if( IKabs(((3.70269548972511)+(((-20.0160128102482)*x823))+((cj0*x824))+(((-1.0)*sj0*x827))+(((-1.0)*x821*x822))+(((0.800640512409928)*sj1))+(((-1.0)*x825*x826)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.25647184414198)+(((-42.7008273285295)*x823))+(((-1.0)*x822*x827))+((sj0*x821))+(((-1.0)*cj0*x826))+(((-1.0)*x824*x825))+(((1.70803309314118)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.70269548972511)+(((-20.0160128102482)*x823))+((cj0*x824))+(((-1.0)*sj0*x827))+(((-1.0)*x821*x822))+(((0.800640512409928)*sj1))+(((-1.0)*x825*x826))))+IKsqr(((-2.25647184414198)+(((-42.7008273285295)*x823))+(((-1.0)*x822*x827))+((sj0*x821))+(((-1.0)*cj0*x826))+(((-1.0)*x824*x825))+(((1.70803309314118)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.70269548972511)+(((-20.0160128102482)*x823))+((cj0*x824))+(((-1.0)*sj0*x827))+(((-1.0)*x821*x822))+(((0.800640512409928)*sj1))+(((-1.0)*x825*x826))), ((-2.25647184414198)+(((-42.7008273285295)*x823))+(((-1.0)*x822*x827))+((sj0*x821))+(((-1.0)*cj0*x826))+(((-1.0)*x824*x825))+(((1.70803309314118)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x828=IKsin(j4);
IkReal x829=IKcos(j4);
evalcond[0]=((0.0914)+(((-0.0192)*x828))+(((0.009)*x829))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.01)+(((0.0192)*x829))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.009)*x828))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x830=(py*sj0);
IkReal x831=((75000.0)*cj1);
IkReal x832=(pz*sj1);
IkReal x833=((160000.0)*cj1);
IkReal x834=(pz*sj3);
IkReal x835=(cj0*px);
IkReal x836=(sj1*sj3);
CheckValue<IkReal> x837=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x837.valid){
continue;
}
CheckValue<IkReal> x838 = IKatan2WithCheck(IkReal(((45360.0)+(((61792.0)*cj3))+(((6400.0)*cj1))+(((-75000.0)*x830*x836))+(((-1.0)*x833*x835))+(((-1.0)*x830*x833))+(((3000.0)*x836))+(((-75000.0)*x835*x836))+(((-3054.0)*sj3))+(((160000.0)*x832))+(((-1.0)*x831*x834)))),IkReal(((-21262.5)+(((-75000.0)*x832))+((x831*x835))+(((-1.0)*x833*x834))+(((-3000.0)*cj1))+(((-160000.0)*x835*x836))+(((-160000.0)*x830*x836))+(((6400.0)*x836))+((x830*x831))+(((-520.0)*sj3))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x837.value)))+(x838.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x839=IKsin(j4);
IkReal x840=IKcos(j4);
IkReal x841=(cj0*px);
IkReal x842=((1.0)*cj1);
IkReal x843=(py*sj0);
IkReal x844=((0.0192)*x839);
IkReal x845=((0.009)*x840);
evalcond[0]=((0.01)+(((0.009)*x839))+(((0.0192)*x840))+((cj1*pz))+(((-0.04)*sj1))+((sj1*x843))+((sj1*x841)));
evalcond[1]=((0.1058)+(((0.3862)*sj3))+((cj3*x844))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3))+(((-1.0)*cj3*x845)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*sj3*x844))+(((0.04)*cj1))+(((-1.0)*x841*x842))+(((-0.0144)*sj3))+(((-1.0)*x842*x843))+((pz*sj1))+((sj3*x845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x846=(px*sj0);
IkReal x847=((160000.0)*cj0);
IkReal x848=(cj3*sj1);
IkReal x849=((75000.0)*cj0);
IkReal x850=(py*sj0);
IkReal x851=(cj1*cj3*pz);
CheckValue<IkReal> x852=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x852.valid){
continue;
}
CheckValue<IkReal> x853 = IKatan2WithCheck(IkReal(((-16928.0)+(((160000.0)*x846))+(((-61792.0)*sj3))+(((-1.0)*py*x847))+(((-3054.0)*cj3))+(((-75000.0)*x848*x850))+(((-1.0)*px*x848*x849))+(((-75000.0)*x851))+(((3000.0)*x848)))),IkReal(((7935.0)+(((-160000.0)*x848*x850))+(((-1.0)*px*x847*x848))+((py*x849))+(((6400.0)*x848))+(((-520.0)*cj3))+(((28965.0)*sj3))+(((-160000.0)*x851))+(((-75000.0)*x846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x853.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x852.value)))+(x853.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x854=IKsin(j4);
IkReal x855=IKcos(j4);
IkReal x856=(cj0*px);
IkReal x857=((1.0)*cj1);
IkReal x858=(py*sj0);
IkReal x859=((0.0192)*x854);
IkReal x860=((0.009)*x855);
evalcond[0]=((0.01)+((sj1*x858))+((sj1*x856))+((cj1*pz))+(((0.009)*x854))+(((-0.04)*sj1))+(((0.0192)*x855)));
evalcond[1]=((0.1058)+(((-1.0)*cj3*x860))+((cj3*x859))+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+((sj3*x860))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*sj3*x859))+(((-1.0)*x856*x857))+((pz*sj1))+(((-1.0)*x857*x858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x861=((20.0160128102482)*px);
IkReal x862=(cj0*sj1);
IkReal x863=(cj1*pz);
IkReal x864=((42.7008273285295)*py);
IkReal x865=(sj0*sj1);
IkReal x866=((20.0160128102482)*py);
IkReal x867=((42.7008273285295)*px);
if( IKabs(((1.32852949025887)+((cj0*x864))+(((20.0160128102482)*x863))+((x861*x862))+((x865*x866))+(((-1.0)*sj0*x867))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14358153189218)+(((-1.0)*cj0*x866))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x863))+((sj0*x861))+((x862*x867))+((x864*x865)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.32852949025887)+((cj0*x864))+(((20.0160128102482)*x863))+((x861*x862))+((x865*x866))+(((-1.0)*sj0*x867))+(((-0.800640512409928)*sj1))))+IKsqr(((-1.14358153189218)+(((-1.0)*cj0*x866))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x863))+((sj0*x861))+((x862*x867))+((x864*x865))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.32852949025887)+((cj0*x864))+(((20.0160128102482)*x863))+((x861*x862))+((x865*x866))+(((-1.0)*sj0*x867))+(((-0.800640512409928)*sj1))), ((-1.14358153189218)+(((-1.0)*cj0*x866))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x863))+((sj0*x861))+((x862*x867))+((x864*x865))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x868=IKsin(j4);
IkReal x869=IKcos(j4);
evalcond[0]=((0.0358)+(((-0.0192)*x868))+(((0.009)*x869))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.01)+(((-0.0192)*x869))+((cj1*pz))+(((-0.009)*x868))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x870=((20.0160128102482)*px);
IkReal x871=(cj0*sj1);
IkReal x872=(cj1*pz);
IkReal x873=((42.7008273285295)*py);
IkReal x874=(sj0*sj1);
IkReal x875=((20.0160128102482)*py);
IkReal x876=((42.7008273285295)*px);
if( IKabs(((-2.95863357352549)+(((-1.0)*cj0*x873))+((x870*x871))+((x874*x875))+(((20.0160128102482)*x872))+((sj0*x876))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.866026154256739)+((x871*x876))+(((42.7008273285295)*x872))+(((-1.70803309314118)*sj1))+((x873*x874))+(((-1.0)*sj0*x870))+((cj0*x875)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.95863357352549)+(((-1.0)*cj0*x873))+((x870*x871))+((x874*x875))+(((20.0160128102482)*x872))+((sj0*x876))+(((-0.800640512409928)*sj1))))+IKsqr(((0.866026154256739)+((x871*x876))+(((42.7008273285295)*x872))+(((-1.70803309314118)*sj1))+((x873*x874))+(((-1.0)*sj0*x870))+((cj0*x875))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.95863357352549)+(((-1.0)*cj0*x873))+((x870*x871))+((x874*x875))+(((20.0160128102482)*x872))+((sj0*x876))+(((-0.800640512409928)*sj1))), ((0.866026154256739)+((x871*x876))+(((42.7008273285295)*x872))+(((-1.70803309314118)*sj1))+((x873*x874))+(((-1.0)*sj0*x870))+((cj0*x875))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x877=IKsin(j4);
IkReal x878=IKcos(j4);
evalcond[0]=((0.0646)+(((-0.009)*x878))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0192)*x877)));
evalcond[1]=((-0.01)+((cj1*pz))+(((-0.0192)*x878))+((cj0*px*sj1))+(((-0.009)*x877))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x879=(py*sj0);
IkReal x880=((75000.0)*cj1);
IkReal x881=(pz*sj1);
IkReal x882=((160000.0)*cj1);
IkReal x883=(pz*sj3);
IkReal x884=(cj0*px);
IkReal x885=(sj1*sj3);
CheckValue<IkReal> x886=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x886.valid){
continue;
}
CheckValue<IkReal> x887 = IKatan2WithCheck(IkReal(((45360.0)+(((-1.0)*x879*x882))+(((75000.0)*x884*x885))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((-1.0)*x882*x884))+((x880*x883))+(((160000.0)*x881))+(((-3000.0)*x885))+(((-3054.0)*sj3))+(((75000.0)*x879*x885)))),IkReal(((-21262.5)+((x879*x880))+(((-6400.0)*x885))+((x880*x884))+(((-75000.0)*x881))+((x882*x883))+(((-3000.0)*cj1))+(((160000.0)*x884*x885))+(((-520.0)*sj3))+(((160000.0)*x879*x885))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x886.value)))+(x887.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x888=IKcos(j4);
IkReal x889=IKsin(j4);
IkReal x890=(cj0*px);
IkReal x891=((1.0)*cj1);
IkReal x892=(py*sj0);
IkReal x893=((0.0192)*x889);
IkReal x894=((0.009)*x888);
evalcond[0]=((-0.01)+(((-0.009)*x889))+((sj1*x890))+((sj1*x892))+((cj1*pz))+(((-0.0192)*x888))+(((-0.04)*sj1)));
evalcond[1]=((0.0502)+((cj3*x894))+(((-1.0)*cj3*x893))+(((-0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+((sj3*x894))+((pz*sj1))+(((-1.0)*sj3*x893))+(((-1.0)*x890*x891))+(((-1.0)*x891*x892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x895=(px*sj0);
IkReal x896=((160000.0)*cj0);
IkReal x897=((160000.0)*cj3);
IkReal x898=(cj1*pz);
IkReal x899=(cj3*sj1);
IkReal x900=((75000.0)*cj0);
IkReal x901=(py*sj0);
CheckValue<IkReal> x902 = IKatan2WithCheck(IkReal(((8032.0)+(((-61792.0)*sj3))+((py*x896))+(((-3054.0)*cj3))+(((-3000.0)*x899))+((px*x899*x900))+(((75000.0)*cj3*x898))+(((75000.0)*x899*x901))+(((-160000.0)*x895)))),IkReal(((-3765.0)+(((-6400.0)*x899))+(((-1.0)*py*x900))+((x897*x898))+((sj1*x897*x901))+(((-520.0)*cj3))+(((28965.0)*sj3))+(((75000.0)*x895))+((px*x896*x899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x902.valid){
continue;
}
CheckValue<IkReal> x903=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x902.value)+(((1.5707963267949)*(x903.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x904=IKcos(j4);
IkReal x905=IKsin(j4);
IkReal x906=(cj0*px);
IkReal x907=((1.0)*cj1);
IkReal x908=(py*sj0);
IkReal x909=((0.0192)*x905);
IkReal x910=((0.009)*x904);
evalcond[0]=((-0.01)+((cj1*pz))+(((-0.04)*sj1))+(((-0.009)*x905))+((sj1*x908))+((sj1*x906))+(((-0.0192)*x904)));
evalcond[1]=((0.0502)+(((-0.3862)*sj3))+((cj3*x910))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj3*x909))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*sj3*x909))+((sj3*x910))+(((-0.0144)*sj3))+((pz*sj1))+(((-1.0)*x907*x908))+(((-1.0)*x906*x907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x911=(cj2*cj3);
IkReal x912=(sj1*sj3);
IkReal x913=(sj2*sj3);
IkReal x914=(cj1*sj2);
IkReal x915=(cj2*sj3);
IkReal x916=((96.0)*pz);
IkReal x917=(cj3*sj2);
IkReal x918=(cj1*sj3);
IkReal x919=((45.0)*pz*sj1);
IkReal x920=((45.0)*cj0*px);
IkReal x921=((45.0)*py*sj0);
IkReal x922=((96.0)*cj0*px);
IkReal x923=((96.0)*py*sj0);
CheckValue<IkReal> x924=IKPowWithIntegerCheck(IKsign(x913),-1);
if(!x924.valid){
continue;
}
CheckValue<IkReal> x925 = IKatan2WithCheck(IkReal(((((-1.8324)*x913))+(((37.0752)*x917))+(((1.8)*x912))+(((-1.0)*x912*x920))+(((-1.0)*x912*x921))+((cj1*x911*x921))+((cj1*x911*x920))+(((-1.0)*x914*x922))+(((-1.0)*x914*x923))+(((-1.8)*cj1*x911))+(((-1.251)*x915))+((sj1*sj2*x916))+(((-12.7575)*x911))+(((-45.0)*pz*x918))+(((3.84)*x914))+(((-1.0)*x911*x919))+(((27.216)*sj2))+(((-17.379)*cj2)))),IkReal(((((-2.6688)*x915))+(((-1.0)*x912*x923))+(((-1.0)*x912*x922))+((cj1*x911*x922))+((cj1*x911*x923))+(((-17.379)*x917))+(((-0.312)*x913))+(((-12.7575)*sj2))+(((-37.0752)*cj2))+(((-27.216)*x911))+((x914*x920))+((x914*x921))+(((-1.0)*sj2*x919))+(((-3.84)*cj1*x911))+(((-1.0)*sj1*x911*x916))+(((-1.8)*x914))+(((3.84)*x912))+(((-1.0)*x916*x918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x924.value)))+(x925.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x926=IKsin(j4);
IkReal x927=IKcos(j4);
IkReal x928=(cj0*px);
IkReal x929=((0.0144)*cj3);
IkReal x930=(py*sj0);
IkReal x931=((0.3862)*sj3);
IkReal x932=((1.0)*cj1);
IkReal x933=(cj2*cj3);
IkReal x934=(sj2*x926);
IkReal x935=((0.0192)*x926);
IkReal x936=((0.0192)*x927);
IkReal x937=((0.009)*x927);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*sj3*x935))+(((-1.0)*x930*x932))+(((0.04)*cj1))+(((-1.0)*x928*x932))+(((-0.0144)*sj3))+((pz*sj1))+((sj3*x937)));
evalcond[1]=((0.078)+(((0.0192)*cj3*x934))+(((-1.0)*cj2*x936))+(((-0.01)*cj2))+(((-0.009)*cj2*x926))+(((0.0278)*sj2))+(((-1.0)*cj3*sj2*x937))+(((-1.0)*px*sj0))+((cj0*py))+((sj2*x931))+((sj2*x929)));
evalcond[2]=((((0.0278)*cj2))+((sj1*x930))+((sj1*x928))+((cj1*pz))+((cj2*x931))+((cj2*x929))+(((-0.04)*sj1))+(((0.009)*x934))+(((-1.0)*x933*x937))+(((0.01)*sj2))+((sj2*x936))+((x933*x935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x938=(sj1*sj2);
IkReal x939=(cj2*sj1);
IkReal x940=(cj2*py);
IkReal x941=(cj2*px);
IkReal x942=((0.0192)*cj3);
IkReal x943=((0.009)*sj2);
IkReal x944=(cj0*py);
IkReal x945=(cj1*pz);
IkReal x946=((0.0192)*sj2);
IkReal x947=(px*sj0);
IkReal x948=(py*sj0);
IkReal x949=(cj2*cj3);
IkReal x950=(cj0*px);
IkReal x951=((0.009)*cj0*cj3);
IkReal x952=((0.009)*cj3*sj0);
CheckValue<IkReal> x953 = IKatan2WithCheck(IkReal(((0.00053376)+(((-0.000702)*x949))+(((0.00036648)*cj3))+(((0.00741504)*sj3))+(((0.0192)*x939*x948))+(((-1.0)*x940*x951))+(((-1.0)*x946*x947))+(((0.0192)*cj2*x945))+((x941*x952))+((cj3*x943*x945))+(((0.009)*cj3*x938*x948))+(((0.009)*cj3*x938*x950))+(((0.0014976)*sj2))+((x944*x946))+(((-0.000768)*x939))+(((-0.00036)*cj3*x938))+(((0.0192)*x939*x950)))),IkReal(((-0.0002502)+(((-0.009)*x939*x950))+(((0.00036)*x939))+(((-0.009)*cj2*x945))+(((-0.009)*x939*x948))+((sj2*x942*x945))+(((-0.000768)*cj3*x938))+(((-0.000702)*sj2))+((x943*x947))+(((-1.0)*cj0*x940*x942))+(((-1.0)*x943*x944))+((sj0*x941*x942))+(((-0.0014976)*x949))+(((6.24e-5)*cj3))+((x938*x942*x948))+((x938*x942*x950))+(((-0.0034758)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x953.valid){
continue;
}
CheckValue<IkReal> x954=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x953.value)+(((-1.5707963267949)*(x954.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x955=IKsin(j4);
IkReal x956=IKcos(j4);
IkReal x957=(cj0*px);
IkReal x958=((0.0144)*cj3);
IkReal x959=(py*sj0);
IkReal x960=((0.3862)*sj3);
IkReal x961=((1.0)*cj1);
IkReal x962=(cj2*cj3);
IkReal x963=(sj2*x955);
IkReal x964=((0.0192)*x955);
IkReal x965=((0.0192)*x956);
IkReal x966=((0.009)*x956);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x959*x961))+(((-1.0)*sj3*x964))+(((-1.0)*x957*x961))+((sj3*x966))+((pz*sj1)));
evalcond[1]=((0.078)+(((-1.0)*cj3*sj2*x966))+(((-1.0)*cj2*x965))+(((-0.01)*cj2))+(((-0.009)*cj2*x955))+(((0.0192)*cj3*x963))+(((0.0278)*sj2))+((sj2*x958))+((sj2*x960))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[2]=((((-1.0)*x962*x966))+(((0.0278)*cj2))+((x962*x964))+((cj1*pz))+(((0.009)*x963))+((cj2*x958))+((cj2*x960))+(((-0.04)*sj1))+((sj1*x957))+((sj1*x959))+((sj2*x965))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x967=((45.0)*py);
IkReal x968=(cj0*sj3);
IkReal x969=(cj2*sj3);
IkReal x970=((1.8)*cj1);
IkReal x971=(cj3*sj2);
IkReal x972=(cj1*cj2);
IkReal x973=((96.0)*py);
IkReal x974=(cj2*cj3);
IkReal x975=(cj1*sj0);
IkReal x976=(sj2*sj3);
IkReal x977=((96.0)*cj0*px);
IkReal x978=((45.0)*pz*sj1);
IkReal x979=((45.0)*cj0*px);
IkReal x980=((96.0)*pz*sj1);
IkReal x981=(px*sj0*sj3);
CheckValue<IkReal> x982=IKPowWithIntegerCheck(IKsign(x969),-1);
if(!x982.valid){
continue;
}
CheckValue<IkReal> x983 = IKatan2WithCheck(IkReal((((sj0*x972*x973))+(((-12.7575)*x971))+(((-17.379)*sj2))+((cj1*x971*x979))+(((-1.0)*x967*x968))+(((-1.0)*cj2*x980))+(((-1.0)*x971*x978))+(((-3.84)*x972))+(((1.8324)*x969))+(((45.0)*x981))+(((-27.216)*cj2))+(((-37.0752)*x974))+(((-1.0)*x970*x971))+(((-1.251)*x976))+((x967*x971*x975))+((x972*x977))+(((-3.51)*sj3)))),IkReal((((cj1*x971*x977))+(((17.379)*x974))+(((12.7575)*cj2))+(((-7.488)*sj3))+((x971*x973*x975))+(((-1.0)*x971*x980))+(((-2.6688)*x976))+(((-37.0752)*sj2))+(((96.0)*x981))+(((-1.0)*x972*x979))+((cj2*x978))+((cj2*x970))+(((0.312)*x969))+(((-27.216)*x971))+(((-1.0)*x968*x973))+(((-1.0)*sj0*x967*x972))+(((-3.84)*cj1*x971)))),IKFAST_ATAN2_MAGTHRESH);
if(!x983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((-1.5707963267949)*(x982.value)))+(x983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x984=IKsin(j4);
IkReal x985=IKcos(j4);
IkReal x986=(cj0*px);
IkReal x987=((0.0144)*cj3);
IkReal x988=(py*sj0);
IkReal x989=((0.3862)*sj3);
IkReal x990=((1.0)*cj1);
IkReal x991=(cj2*cj3);
IkReal x992=(sj2*x984);
IkReal x993=((0.0192)*x984);
IkReal x994=((0.0192)*x985);
IkReal x995=((0.009)*x985);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*sj3*x993))+((sj3*x995))+((pz*sj1))+(((-1.0)*x986*x990))+(((-1.0)*x988*x990)));
evalcond[1]=((0.078)+(((-0.01)*cj2))+(((-1.0)*cj2*x994))+(((-0.009)*cj2*x984))+(((0.0278)*sj2))+(((-1.0)*px*sj0))+(((-1.0)*cj3*sj2*x995))+((cj0*py))+((sj2*x989))+((sj2*x987))+(((0.0192)*cj3*x992)));
evalcond[2]=(((x991*x993))+(((0.009)*x992))+(((0.0278)*cj2))+(((-1.0)*x991*x995))+((sj2*x994))+((sj1*x986))+((sj1*x988))+((cj1*pz))+(((-0.04)*sj1))+((cj2*x987))+((cj2*x989))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x996=((1.0)*cj1);
CheckValue<IkReal> x997=IKPowWithIntegerCheck(sj2,-1);
if(!x997.valid){
continue;
}
if( IKabs(((x997.value)*(((((-1.0)*r00*sj0))+((cj0*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj0*r00*x996))+((r02*sj1))+(((-1.0)*r01*sj0*x996)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x997.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))))+IKsqr(((((-1.0)*cj0*r00*x996))+((r02*sj1))+(((-1.0)*r01*sj0*x996))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((x997.value)*(((((-1.0)*r00*sj0))+((cj0*r01))))), ((((-1.0)*cj0*r00*x996))+((r02*sj1))+(((-1.0)*r01*sj0*x996))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x998=IKsin(j3);
IkReal x999=(r01*sj0);
IkReal x1000=((1.0)*cj1);
IkReal x1001=(cj0*r00);
IkReal x1002=((1.0)*x998);
evalcond[0]=((((-1.0)*r00*sj0))+(((-1.0)*sj2*x1002))+((cj0*r01)));
evalcond[1]=(((sj1*x1001))+((cj1*r02))+(((-1.0)*cj2*x1002))+((sj1*x999)));
evalcond[2]=(((r02*sj1))+(((-1.0)*x1000*x999))+(((-1.0)*(IKcos(j3))))+(((-1.0)*x1000*x1001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[2];
IkReal x1003=(cj2*sj3);
j4eval[0]=x1003;
j4eval[1]=IKsign(x1003);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1004=(sj2*sj3);
j4eval[0]=x1004;
j4eval[1]=IKsign(x1004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j2))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=1.0;
j2=0;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1005=((20.0160128102482)*px);
IkReal x1006=(cj0*sj1);
IkReal x1007=(cj1*pz);
IkReal x1008=((42.7008273285295)*py);
IkReal x1009=(sj0*sj1);
IkReal x1010=((20.0160128102482)*py);
IkReal x1011=((42.7008273285295)*px);
if( IKabs(((-0.440886042167067)+(((-42.7008273285295)*x1007))+(((-1.0)*x1008*x1009))+(((-1.0)*x1006*x1011))+((cj0*x1010))+(((-1.0)*sj0*x1005))+(((1.70803309314118)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((3.74833199893248)+((x1009*x1010))+(((-1.0)*sj0*x1011))+((cj0*x1008))+((x1005*x1006))+(((20.0160128102482)*x1007))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.440886042167067)+(((-42.7008273285295)*x1007))+(((-1.0)*x1008*x1009))+(((-1.0)*x1006*x1011))+((cj0*x1010))+(((-1.0)*sj0*x1005))+(((1.70803309314118)*sj1))))+IKsqr(((3.74833199893248)+((x1009*x1010))+(((-1.0)*sj0*x1011))+((cj0*x1008))+((x1005*x1006))+(((20.0160128102482)*x1007))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-0.440886042167067)+(((-42.7008273285295)*x1007))+(((-1.0)*x1008*x1009))+(((-1.0)*x1006*x1011))+((cj0*x1010))+(((-1.0)*sj0*x1005))+(((1.70803309314118)*sj1))), ((3.74833199893248)+((x1009*x1010))+(((-1.0)*sj0*x1011))+((cj0*x1008))+((x1005*x1006))+(((20.0160128102482)*x1007))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1012=IKsin(j4);
IkReal x1013=IKcos(j4);
evalcond[0]=((0.068)+(((-0.009)*x1012))+(((-0.0192)*x1013))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0422)+(((-0.009)*x1013))+((cj1*pz))+(((0.0192)*x1012))+((cj0*px*sj1))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1014=((20.0160128102482)*px);
IkReal x1015=(cj0*sj1);
IkReal x1016=(cj1*pz);
IkReal x1017=((42.7008273285295)*py);
IkReal x1018=(sj0*sj1);
IkReal x1019=((20.0160128102482)*py);
IkReal x1020=((42.7008273285295)*px);
if( IKabs(((1.93327995729917)+((x1017*x1018))+(((-1.70803309314118)*sj1))+(((-1.0)*sj0*x1014))+((x1015*x1020))+((cj0*x1019))+(((42.7008273285295)*x1016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.63544168668268)+(((-1.0)*x1018*x1019))+(((-1.0)*sj0*x1020))+(((-1.0)*x1014*x1015))+((cj0*x1017))+(((-20.0160128102482)*x1016))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.93327995729917)+((x1017*x1018))+(((-1.70803309314118)*sj1))+(((-1.0)*sj0*x1014))+((x1015*x1020))+((cj0*x1019))+(((42.7008273285295)*x1016))))+IKsqr(((2.63544168668268)+(((-1.0)*x1018*x1019))+(((-1.0)*sj0*x1020))+(((-1.0)*x1014*x1015))+((cj0*x1017))+(((-20.0160128102482)*x1016))+(((0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.93327995729917)+((x1017*x1018))+(((-1.70803309314118)*sj1))+(((-1.0)*sj0*x1014))+((x1015*x1020))+((cj0*x1019))+(((42.7008273285295)*x1016))), ((2.63544168668268)+(((-1.0)*x1018*x1019))+(((-1.0)*sj0*x1020))+(((-1.0)*x1014*x1015))+((cj0*x1017))+(((-20.0160128102482)*x1016))+(((0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1021=IKcos(j4);
IkReal x1022=IKsin(j4);
evalcond[0]=((0.068)+(((-0.0192)*x1021))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.009)*x1022)));
evalcond[1]=((0.0134)+(((-0.0192)*x1022))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.009)*x1021))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1023=((42.7008273285295)*cj0);
IkReal x1024=(cj1*px);
IkReal x1025=((20.0160128102482)*sj0);
IkReal x1026=((20.0160128102482)*cj0);
IkReal x1027=(pz*sj1);
IkReal x1028=(cj1*py);
IkReal x1029=((42.7008273285295)*sj0);
if( IKabs(((12.8518815052042)+(((-1.0)*x1028*x1029))+((py*x1026))+(((-1.0)*x1023*x1024))+(((42.7008273285295)*x1027))+(((1.70803309314118)*cj1))+(((-1.0)*px*x1025)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.48265278889778)+((py*x1023))+(((-0.800640512409928)*cj1))+((x1025*x1028))+((x1024*x1026))+(((-1.0)*px*x1029))+(((-20.0160128102482)*x1027)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((12.8518815052042)+(((-1.0)*x1028*x1029))+((py*x1026))+(((-1.0)*x1023*x1024))+(((42.7008273285295)*x1027))+(((1.70803309314118)*cj1))+(((-1.0)*px*x1025))))+IKsqr(((-2.48265278889778)+((py*x1023))+(((-0.800640512409928)*cj1))+((x1025*x1028))+((x1024*x1026))+(((-1.0)*px*x1029))+(((-20.0160128102482)*x1027))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((12.8518815052042)+(((-1.0)*x1028*x1029))+((py*x1026))+(((-1.0)*x1023*x1024))+(((42.7008273285295)*x1027))+(((1.70803309314118)*cj1))+(((-1.0)*px*x1025))), ((-2.48265278889778)+((py*x1023))+(((-0.800640512409928)*cj1))+((x1025*x1028))+((x1024*x1026))+(((-1.0)*px*x1029))+(((-20.0160128102482)*x1027))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1030=IKcos(j4);
IkReal x1031=IKsin(j4);
IkReal x1032=((1.0)*cj1);
evalcond[0]=((0.068)+(((-0.009)*x1031))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0192)*x1030)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*cj0*px*x1032))+(((0.009)*x1030))+(((-1.0)*py*sj0*x1032))+((pz*sj1))+(((-0.0192)*x1031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1033=((42.7008273285295)*py);
IkReal x1034=((20.0160128102482)*sj0);
IkReal x1035=(pz*sj1);
IkReal x1036=(cj0*cj1*px);
if( IKabs(((-11.3594875900721)+(((-1.70803309314118)*cj1))+(((-42.7008273285295)*x1035))+((cj1*sj0*x1033))+(((20.0160128102482)*cj0*py))+(((42.7008273285295)*x1036))+(((-1.0)*px*x1034)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((8.86642647451294)+(((-1.0)*cj1*py*x1034))+(((0.800640512409928)*cj1))+((cj0*x1033))+(((-20.0160128102482)*x1036))+(((-42.7008273285295)*px*sj0))+(((20.0160128102482)*x1035)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-11.3594875900721)+(((-1.70803309314118)*cj1))+(((-42.7008273285295)*x1035))+((cj1*sj0*x1033))+(((20.0160128102482)*cj0*py))+(((42.7008273285295)*x1036))+(((-1.0)*px*x1034))))+IKsqr(((8.86642647451294)+(((-1.0)*cj1*py*x1034))+(((0.800640512409928)*cj1))+((cj0*x1033))+(((-20.0160128102482)*x1036))+(((-42.7008273285295)*px*sj0))+(((20.0160128102482)*x1035))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-11.3594875900721)+(((-1.70803309314118)*cj1))+(((-42.7008273285295)*x1035))+((cj1*sj0*x1033))+(((20.0160128102482)*cj0*py))+(((42.7008273285295)*x1036))+(((-1.0)*px*x1034))), ((8.86642647451294)+(((-1.0)*cj1*py*x1034))+(((0.800640512409928)*cj1))+((cj0*x1033))+(((-20.0160128102482)*x1036))+(((-42.7008273285295)*px*sj0))+(((20.0160128102482)*x1035))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1037=IKsin(j4);
IkReal x1038=IKcos(j4);
IkReal x1039=((1.0)*cj1);
evalcond[0]=((0.068)+(((-0.009)*x1037))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0192)*x1038)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-1.0)*cj0*px*x1039))+(((-0.009)*x1038))+(((-1.0)*py*sj0*x1039))+(((0.0192)*x1037))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1040=((75000.0)*cj1);
IkReal x1041=(py*sj0);
IkReal x1042=(pz*sj1);
IkReal x1043=((160000.0)*px);
IkReal x1044=(sj0*sj3);
IkReal x1045=(cj0*py*sj3);
CheckValue<IkReal> x1046=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1046.valid){
continue;
}
CheckValue<IkReal> x1047 = IKatan2WithCheck(IkReal(((45360.0)+(((61792.0)*cj3))+(((6400.0)*cj1))+(((-1.0)*cj0*cj1*x1043))+(((160000.0)*x1042))+(((75000.0)*x1045))+(((-75000.0)*px*x1044))+(((-160000.0)*cj1*x1041))+(((2796.0)*sj3)))),IkReal(((-21262.5)+((x1040*x1041))+(((160000.0)*x1045))+(((-3000.0)*cj1))+(((-1.0)*x1043*x1044))+(((11960.0)*sj3))+((cj0*px*x1040))+(((-75000.0)*x1042))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1046.value)))+(x1047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1048=IKsin(j4);
IkReal x1049=IKcos(j4);
IkReal x1050=(cj0*px);
IkReal x1051=((1.0)*cj1);
IkReal x1052=(py*sj0);
IkReal x1053=((0.0192)*x1048);
IkReal x1054=((0.009)*x1049);
evalcond[0]=((0.068)+(((-0.0192)*x1049))+(((-0.009)*x1048))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+((cj3*x1053))+((sj1*x1052))+((sj1*x1050))+((cj1*pz))+(((0.3862)*sj3))+(((-0.04)*sj1))+(((0.0144)*cj3))+(((-1.0)*cj3*x1054)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+((sj3*x1054))+(((-0.0144)*sj3))+(((-1.0)*sj3*x1053))+((pz*sj1))+(((-1.0)*x1050*x1051))+(((-1.0)*x1051*x1052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1055=((160000.0)*cj3);
IkReal x1056=(cj0*py);
IkReal x1057=(px*sj0);
IkReal x1058=(cj1*pz);
IkReal x1059=((75000.0)*cj3);
IkReal x1060=(cj0*px*sj1);
IkReal x1061=(py*sj0*sj1);
CheckValue<IkReal> x1062=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1062.valid){
continue;
}
CheckValue<IkReal> x1063 = IKatan2WithCheck(IkReal(((-4448.0)+(((-61792.0)*sj3))+((x1056*x1059))+(((6400.0)*sj1))+(((-160000.0)*x1058))+(((-160000.0)*x1060))+(((-160000.0)*x1061))+(((2796.0)*cj3))+(((-1.0)*x1057*x1059)))),IkReal(((2085.0)+((x1055*x1056))+(((75000.0)*x1060))+(((75000.0)*x1061))+(((75000.0)*x1058))+(((11960.0)*cj3))+(((-1.0)*x1055*x1057))+(((-3000.0)*sj1))+(((28965.0)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1062.value)))+(x1063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1064=IKsin(j4);
IkReal x1065=IKcos(j4);
IkReal x1066=(cj0*px);
IkReal x1067=((1.0)*cj1);
IkReal x1068=(py*sj0);
IkReal x1069=((0.0192)*x1064);
IkReal x1070=((0.009)*x1065);
evalcond[0]=((0.068)+(((-0.0192)*x1065))+(((-0.009)*x1064))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.0278)+((cj3*x1069))+((cj1*pz))+(((0.3862)*sj3))+(((-0.04)*sj1))+((sj1*x1066))+((sj1*x1068))+(((-1.0)*cj3*x1070))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+((sj3*x1070))+(((-1.0)*sj3*x1069))+(((-0.0144)*sj3))+(((-1.0)*x1066*x1067))+((pz*sj1))+(((-1.0)*x1067*x1068)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=0;
cj2=-1.0;
j2=3.14159265358979;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1071=((20.0160128102482)*px);
IkReal x1072=(cj0*sj1);
IkReal x1073=(cj1*pz);
IkReal x1074=((42.7008273285295)*py);
IkReal x1075=(sj0*sj1);
IkReal x1076=((20.0160128102482)*py);
IkReal x1077=((42.7008273285295)*px);
if( IKabs(((-3.56338404056579)+((x1074*x1075))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x1073))+((sj0*x1071))+((x1072*x1077))+(((-1.0)*cj0*x1076)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.91299706431812)+(((-1.0)*x1075*x1076))+(((-1.0)*x1071*x1072))+(((-20.0160128102482)*x1073))+((sj0*x1077))+(((-1.0)*cj0*x1074))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-3.56338404056579)+((x1074*x1075))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x1073))+((sj0*x1071))+((x1072*x1077))+(((-1.0)*cj0*x1076))))+IKsqr(((-2.91299706431812)+(((-1.0)*x1075*x1076))+(((-1.0)*x1071*x1072))+(((-20.0160128102482)*x1073))+((sj0*x1077))+(((-1.0)*cj0*x1074))+(((0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-3.56338404056579)+((x1074*x1075))+(((-1.70803309314118)*sj1))+(((42.7008273285295)*x1073))+((sj0*x1071))+((x1072*x1077))+(((-1.0)*cj0*x1076))), ((-2.91299706431812)+(((-1.0)*x1075*x1076))+(((-1.0)*x1071*x1072))+(((-20.0160128102482)*x1073))+((sj0*x1077))+(((-1.0)*cj0*x1074))+(((0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1078=IKcos(j4);
IkReal x1079=IKsin(j4);
evalcond[0]=((0.088)+(((0.009)*x1079))+(((0.0192)*x1078))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0422)+(((0.009)*x1078))+((cj1*pz))+((cj0*px*sj1))+(((-0.0192)*x1079))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1080=((20.0160128102482)*px);
IkReal x1081=(cj0*sj1);
IkReal x1082=(cj1*pz);
IkReal x1083=((42.7008273285295)*py);
IkReal x1084=(sj0*sj1);
IkReal x1085=((20.0160128102482)*py);
IkReal x1086=((42.7008273285295)*px);
if( IKabs(((-1.18921804109955)+(((-1.0)*cj0*x1085))+(((-1.0)*x1081*x1086))+(((-42.7008273285295)*x1082))+(((1.70803309314118)*sj1))+((sj0*x1080))+(((-1.0)*x1083*x1084)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-4.02588737656792)+(((-1.0)*cj0*x1083))+(((20.0160128102482)*x1082))+((x1080*x1081))+((sj0*x1086))+((x1084*x1085))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.18921804109955)+(((-1.0)*cj0*x1085))+(((-1.0)*x1081*x1086))+(((-42.7008273285295)*x1082))+(((1.70803309314118)*sj1))+((sj0*x1080))+(((-1.0)*x1083*x1084))))+IKsqr(((-4.02588737656792)+(((-1.0)*cj0*x1083))+(((20.0160128102482)*x1082))+((x1080*x1081))+((sj0*x1086))+((x1084*x1085))+(((-0.800640512409928)*sj1))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.18921804109955)+(((-1.0)*cj0*x1085))+(((-1.0)*x1081*x1086))+(((-42.7008273285295)*x1082))+(((1.70803309314118)*sj1))+((sj0*x1080))+(((-1.0)*x1083*x1084))), ((-4.02588737656792)+(((-1.0)*cj0*x1083))+(((20.0160128102482)*x1082))+((x1080*x1081))+((sj0*x1086))+((x1084*x1085))+(((-0.800640512409928)*sj1))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1087=IKsin(j4);
IkReal x1088=IKcos(j4);
evalcond[0]=((0.088)+(((0.0192)*x1088))+(((0.009)*x1087))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0134)+(((0.0192)*x1087))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.009)*x1088))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1089=((42.7008273285295)*cj0);
IkReal x1090=(cj1*px);
IkReal x1091=((20.0160128102482)*sj0);
IkReal x1092=((20.0160128102482)*cj0);
IkReal x1093=(pz*sj1);
IkReal x1094=(cj1*py);
IkReal x1095=((42.7008273285295)*sj0);
if( IKabs(((9.72938350680544)+(((42.7008273285295)*x1093))+(((-1.0)*py*x1092))+(((-1.0)*x1089*x1090))+(((1.70803309314118)*cj1))+(((-1.0)*x1094*x1095))+((px*x1091)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-9.14398185214839)+(((-1.0)*py*x1089))+(((-0.800640512409928)*cj1))+(((-20.0160128102482)*x1093))+((x1091*x1094))+((px*x1095))+((x1090*x1092)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((9.72938350680544)+(((42.7008273285295)*x1093))+(((-1.0)*py*x1092))+(((-1.0)*x1089*x1090))+(((1.70803309314118)*cj1))+(((-1.0)*x1094*x1095))+((px*x1091))))+IKsqr(((-9.14398185214839)+(((-1.0)*py*x1089))+(((-0.800640512409928)*cj1))+(((-20.0160128102482)*x1093))+((x1091*x1094))+((px*x1095))+((x1090*x1092))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((9.72938350680544)+(((42.7008273285295)*x1093))+(((-1.0)*py*x1092))+(((-1.0)*x1089*x1090))+(((1.70803309314118)*cj1))+(((-1.0)*x1094*x1095))+((px*x1091))), ((-9.14398185214839)+(((-1.0)*py*x1089))+(((-0.800640512409928)*cj1))+(((-20.0160128102482)*x1093))+((x1091*x1094))+((px*x1095))+((x1090*x1092))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1096=IKcos(j4);
IkReal x1097=IKsin(j4);
IkReal x1098=((1.0)*cj1);
evalcond[0]=((0.088)+(((0.009)*x1097))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0192)*x1096)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-0.0192)*x1097))+(((0.009)*x1096))+((pz*sj1))+(((-1.0)*py*sj0*x1098))+(((-1.0)*cj0*px*x1098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1099=((42.7008273285295)*py);
IkReal x1100=((20.0160128102482)*sj0);
IkReal x1101=(pz*sj1);
IkReal x1102=(cj0*cj1*px);
if( IKabs(((-14.4819855884708)+(((-1.70803309314118)*cj1))+(((-20.0160128102482)*cj0*py))+((cj1*sj0*x1099))+(((42.7008273285295)*x1102))+((px*x1100))+(((-42.7008273285295)*x1101)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x1101))+(((-1.0)*cj1*py*x1100))+(((-20.0160128102482)*x1102))+(((-1.0)*cj0*x1099))+(((42.7008273285295)*px*sj0)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-14.4819855884708)+(((-1.70803309314118)*cj1))+(((-20.0160128102482)*cj0*py))+((cj1*sj0*x1099))+(((42.7008273285295)*x1102))+((px*x1100))+(((-42.7008273285295)*x1101))))+IKsqr(((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x1101))+(((-1.0)*cj1*py*x1100))+(((-20.0160128102482)*x1102))+(((-1.0)*cj0*x1099))+(((42.7008273285295)*px*sj0))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-14.4819855884708)+(((-1.70803309314118)*cj1))+(((-20.0160128102482)*cj0*py))+((cj1*sj0*x1099))+(((42.7008273285295)*x1102))+((px*x1100))+(((-42.7008273285295)*x1101))), ((2.20509741126234)+(((0.800640512409928)*cj1))+(((20.0160128102482)*x1101))+(((-1.0)*cj1*py*x1100))+(((-20.0160128102482)*x1102))+(((-1.0)*cj0*x1099))+(((42.7008273285295)*px*sj0))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1103=IKsin(j4);
IkReal x1104=IKcos(j4);
IkReal x1105=((1.0)*cj1);
evalcond[0]=((0.088)+(((0.0192)*x1104))+(((-1.0)*px*sj0))+((cj0*py))+(((0.009)*x1103)));
evalcond[1]=((0.2979)+(((-0.009)*x1104))+(((0.04)*cj1))+(((-1.0)*cj0*px*x1105))+(((0.0192)*x1103))+(((-1.0)*py*sj0*x1105))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1106=((75000.0)*cj1);
IkReal x1107=(py*sj0);
IkReal x1108=(pz*sj1);
IkReal x1109=((160000.0)*px);
IkReal x1110=(sj0*sj3);
IkReal x1111=(cj0*py*sj3);
CheckValue<IkReal> x1112=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1112.valid){
continue;
}
CheckValue<IkReal> x1113 = IKatan2WithCheck(IkReal(((45360.0)+(((-75000.0)*x1111))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((160000.0)*x1108))+(((-1.0)*cj0*cj1*x1109))+(((-160000.0)*cj1*x1107))+(((-8904.0)*sj3))+(((75000.0)*px*x1110)))),IkReal(((-21262.5)+((x1109*x1110))+(((-75000.0)*x1108))+(((-3000.0)*cj1))+(((-13000.0)*sj3))+((cj0*px*x1106))+(((-160000.0)*x1111))+((x1106*x1107))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1112.value)))+(x1113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1114=IKcos(j4);
IkReal x1115=IKsin(j4);
IkReal x1116=(cj0*px);
IkReal x1117=((1.0)*cj1);
IkReal x1118=(py*sj0);
IkReal x1119=((0.0192)*x1115);
IkReal x1120=((0.009)*x1114);
evalcond[0]=((0.088)+(((0.0192)*x1114))+(((-1.0)*px*sj0))+(((0.009)*x1115))+((cj0*py)));
evalcond[1]=((-0.0278)+(((-0.3862)*sj3))+((cj1*pz))+(((-0.04)*sj1))+((sj1*x1118))+((sj1*x1116))+(((-0.0144)*cj3))+(((-1.0)*cj3*x1119))+((cj3*x1120)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*x1116*x1117))+(((-0.0144)*sj3))+(((-1.0)*sj3*x1119))+((sj3*x1120))+((pz*sj1))+(((-1.0)*x1117*x1118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1121=((160000.0)*cj3);
IkReal x1122=(cj0*py);
IkReal x1123=(px*sj0);
IkReal x1124=(cj1*pz);
IkReal x1125=((75000.0)*cj3);
IkReal x1126=(cj0*px*sj1);
IkReal x1127=(py*sj0*sj1);
CheckValue<IkReal> x1128 = IKatan2WithCheck(IkReal(((-4448.0)+(((-6400.0)*sj1))+(((-61792.0)*sj3))+(((-1.0)*x1122*x1125))+(((160000.0)*x1124))+(((160000.0)*x1127))+(((160000.0)*x1126))+(((-8904.0)*cj3))+((x1123*x1125)))),IkReal(((2085.0)+((x1121*x1123))+(((-1.0)*x1121*x1122))+(((-75000.0)*x1124))+(((-75000.0)*x1127))+(((-75000.0)*x1126))+(((3000.0)*sj1))+(((28965.0)*sj3))+(((-13000.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1128.valid){
continue;
}
CheckValue<IkReal> x1129=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1128.value)+(((1.5707963267949)*(x1129.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1130=IKcos(j4);
IkReal x1131=IKsin(j4);
IkReal x1132=(cj0*px);
IkReal x1133=((1.0)*cj1);
IkReal x1134=(py*sj0);
IkReal x1135=((0.0192)*x1131);
IkReal x1136=((0.009)*x1130);
evalcond[0]=((0.088)+(((0.0192)*x1130))+(((0.009)*x1131))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.0278)+((cj3*x1136))+(((-0.3862)*sj3))+((sj1*x1134))+((sj1*x1132))+((cj1*pz))+(((-0.04)*sj1))+(((-1.0)*cj3*x1135))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-1.0)*sj3*x1135))+(((-0.0144)*sj3))+(((-1.0)*x1132*x1133))+((pz*sj1))+((sj3*x1136))+(((-1.0)*x1133*x1134)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1137=(py*sj2);
IkReal x1138=((20.0160128102482)*sj1);
IkReal x1139=((42.7008273285295)*cj2);
IkReal x1140=(px*sj0);
IkReal x1141=(cj1*pz);
IkReal x1142=(cj2*sj1);
IkReal x1143=((42.7008273285295)*cj0);
IkReal x1144=((20.0160128102482)*sj2);
IkReal x1145=((42.7008273285295)*sj2);
IkReal x1146=(cj0*px);
IkReal x1147=(sj0*sj1);
IkReal x1148=(sj1*sj2);
IkReal x1149=((20.0160128102482)*cj2);
IkReal x1150=(cj0*py);
if( IKabs(((-2.00213504136643)+(((-1.0)*sj0*x1137*x1138))+(((-1.0)*x1140*x1149))+((x1140*x1145))+((x1149*x1150))+(((-1.0)*x1137*x1143))+(((-1.0)*x1141*x1144))+(((0.800640512409928)*x1148))+(((-1.0)*sj2*x1138*x1146))+(((1.56124899919936)*cj2))+(((1.70803309314118)*x1142))+(((-1.0)*sj1*x1139*x1146))+(((-3.3306645316253)*sj2))+(((-1.0)*x1139*x1141))+(((-1.0)*py*x1139*x1147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.417667467307179)+(((-1.0)*x1140*x1144))+(((-42.7008273285295)*x1137*x1147))+(((-1.0)*x1141*x1145))+((x1141*x1149))+((cj2*py*sj0*x1138))+((cj2*x1138*x1146))+(((1.70803309314118)*x1148))+(((-1.0)*px*x1143*x1148))+(((-1.0)*x1139*x1140))+(((3.3306645316253)*cj2))+(((-0.800640512409928)*x1142))+(((1.56124899919936)*sj2))+((x1139*x1150))+(((20.0160128102482)*cj0*x1137)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.00213504136643)+(((-1.0)*sj0*x1137*x1138))+(((-1.0)*x1140*x1149))+((x1140*x1145))+((x1149*x1150))+(((-1.0)*x1137*x1143))+(((-1.0)*x1141*x1144))+(((0.800640512409928)*x1148))+(((-1.0)*sj2*x1138*x1146))+(((1.56124899919936)*cj2))+(((1.70803309314118)*x1142))+(((-1.0)*sj1*x1139*x1146))+(((-3.3306645316253)*sj2))+(((-1.0)*x1139*x1141))+(((-1.0)*py*x1139*x1147))))+IKsqr(((0.417667467307179)+(((-1.0)*x1140*x1144))+(((-42.7008273285295)*x1137*x1147))+(((-1.0)*x1141*x1145))+((x1141*x1149))+((cj2*py*sj0*x1138))+((cj2*x1138*x1146))+(((1.70803309314118)*x1148))+(((-1.0)*px*x1143*x1148))+(((-1.0)*x1139*x1140))+(((3.3306645316253)*cj2))+(((-0.800640512409928)*x1142))+(((1.56124899919936)*sj2))+((x1139*x1150))+(((20.0160128102482)*cj0*x1137))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.00213504136643)+(((-1.0)*sj0*x1137*x1138))+(((-1.0)*x1140*x1149))+((x1140*x1145))+((x1149*x1150))+(((-1.0)*x1137*x1143))+(((-1.0)*x1141*x1144))+(((0.800640512409928)*x1148))+(((-1.0)*sj2*x1138*x1146))+(((1.56124899919936)*cj2))+(((1.70803309314118)*x1142))+(((-1.0)*sj1*x1139*x1146))+(((-3.3306645316253)*sj2))+(((-1.0)*x1139*x1141))+(((-1.0)*py*x1139*x1147))), ((0.417667467307179)+(((-1.0)*x1140*x1144))+(((-42.7008273285295)*x1137*x1147))+(((-1.0)*x1141*x1145))+((x1141*x1149))+((cj2*py*sj0*x1138))+((cj2*x1138*x1146))+(((1.70803309314118)*x1148))+(((-1.0)*px*x1143*x1148))+(((-1.0)*x1139*x1140))+(((3.3306645316253)*cj2))+(((-0.800640512409928)*x1142))+(((1.56124899919936)*sj2))+((x1139*x1150))+(((20.0160128102482)*cj0*x1137))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1151=IKsin(j4);
IkReal x1152=IKcos(j4);
IkReal x1153=((0.0192)*sj2);
IkReal x1154=((0.009)*sj2);
IkReal x1155=((0.0192)*cj2);
IkReal x1156=((0.009)*cj2);
evalcond[0]=((0.078)+(((-0.01)*cj2))+(((-1.0)*x1152*x1154))+(((-1.0)*x1152*x1155))+((x1151*x1153))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*x1151*x1156))+(((0.0422)*sj2)));
evalcond[1]=(((x1152*x1153))+((cj1*pz))+((cj0*px*sj1))+(((-1.0)*x1152*x1156))+(((-0.04)*sj1))+((x1151*x1154))+((x1151*x1155))+(((0.0422)*cj2))+((py*sj0*sj1))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1157=(py*sj2);
IkReal x1158=((20.0160128102482)*sj1);
IkReal x1159=((42.7008273285295)*cj2);
IkReal x1160=(px*sj0);
IkReal x1161=(cj1*pz);
IkReal x1162=(cj2*sj1);
IkReal x1163=((42.7008273285295)*cj0);
IkReal x1164=((20.0160128102482)*sj2);
IkReal x1165=((42.7008273285295)*sj2);
IkReal x1166=(cj0*px);
IkReal x1167=(sj0*sj1);
IkReal x1168=(sj1*sj2);
IkReal x1169=((20.0160128102482)*cj2);
IkReal x1170=(cj0*py);
if( IKabs(((0.372030958099813)+((x1159*x1161))+((sj1*x1159*x1166))+(((-1.70803309314118)*x1162))+(((-1.0)*sj0*x1157*x1158))+(((3.3306645316253)*sj2))+((x1157*x1163))+(((1.56124899919936)*cj2))+(((0.800640512409928)*x1168))+(((-1.0)*x1160*x1169))+(((-1.0)*x1160*x1165))+((py*x1159*x1167))+(((-1.0)*x1161*x1164))+(((-1.0)*sj2*x1158*x1166))+((x1169*x1170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.695222844942621)+(((-1.0)*x1159*x1160))+(((-42.7008273285295)*x1157*x1167))+(((-1.0)*cj2*x1158*x1166))+(((-20.0160128102482)*cj0*x1157))+(((-1.0)*cj2*py*sj0*x1158))+(((-1.56124899919936)*sj2))+(((0.800640512409928)*x1162))+(((3.3306645316253)*cj2))+(((-1.0)*px*x1163*x1168))+(((1.70803309314118)*x1168))+(((-1.0)*x1161*x1169))+(((-1.0)*x1161*x1165))+((x1160*x1164))+((x1159*x1170)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((0.372030958099813)+((x1159*x1161))+((sj1*x1159*x1166))+(((-1.70803309314118)*x1162))+(((-1.0)*sj0*x1157*x1158))+(((3.3306645316253)*sj2))+((x1157*x1163))+(((1.56124899919936)*cj2))+(((0.800640512409928)*x1168))+(((-1.0)*x1160*x1169))+(((-1.0)*x1160*x1165))+((py*x1159*x1167))+(((-1.0)*x1161*x1164))+(((-1.0)*sj2*x1158*x1166))+((x1169*x1170))))+IKsqr(((-0.695222844942621)+(((-1.0)*x1159*x1160))+(((-42.7008273285295)*x1157*x1167))+(((-1.0)*cj2*x1158*x1166))+(((-20.0160128102482)*cj0*x1157))+(((-1.0)*cj2*py*sj0*x1158))+(((-1.56124899919936)*sj2))+(((0.800640512409928)*x1162))+(((3.3306645316253)*cj2))+(((-1.0)*px*x1163*x1168))+(((1.70803309314118)*x1168))+(((-1.0)*x1161*x1169))+(((-1.0)*x1161*x1165))+((x1160*x1164))+((x1159*x1170))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((0.372030958099813)+((x1159*x1161))+((sj1*x1159*x1166))+(((-1.70803309314118)*x1162))+(((-1.0)*sj0*x1157*x1158))+(((3.3306645316253)*sj2))+((x1157*x1163))+(((1.56124899919936)*cj2))+(((0.800640512409928)*x1168))+(((-1.0)*x1160*x1169))+(((-1.0)*x1160*x1165))+((py*x1159*x1167))+(((-1.0)*x1161*x1164))+(((-1.0)*sj2*x1158*x1166))+((x1169*x1170))), ((-0.695222844942621)+(((-1.0)*x1159*x1160))+(((-42.7008273285295)*x1157*x1167))+(((-1.0)*cj2*x1158*x1166))+(((-20.0160128102482)*cj0*x1157))+(((-1.0)*cj2*py*sj0*x1158))+(((-1.56124899919936)*sj2))+(((0.800640512409928)*x1162))+(((3.3306645316253)*cj2))+(((-1.0)*px*x1163*x1168))+(((1.70803309314118)*x1168))+(((-1.0)*x1161*x1169))+(((-1.0)*x1161*x1165))+((x1160*x1164))+((x1159*x1170))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1171=IKcos(j4);
IkReal x1172=IKsin(j4);
IkReal x1173=(sj2*x1172);
IkReal x1174=((0.0192)*x1171);
IkReal x1175=((0.009)*x1171);
IkReal x1176=(cj2*x1172);
evalcond[0]=((0.078)+(((-0.009)*x1176))+(((-0.0192)*x1173))+(((-0.01)*cj2))+(((-1.0)*cj2*x1174))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0134)*sj2))+((sj2*x1175)));
evalcond[1]=((((0.0134)*cj2))+(((-0.0192)*x1176))+((cj1*pz))+(((0.009)*x1173))+((cj0*px*sj1))+(((-0.04)*sj1))+((cj2*x1175))+((py*sj0*sj1))+(((0.01)*sj2))+((sj2*x1174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=cj2;
j4eval[1]=IKsign(cj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1177=(cj0*px);
IkReal x1178=((42.7008273285295)*cj1);
IkReal x1179=((20.0160128102482)*sj1);
IkReal x1180=((20.0160128102482)*cj1);
IkReal x1181=((42.7008273285295)*sj1);
IkReal x1182=(py*sj0);
if( IKabs(((11.2906325060048)+((pz*x1181))+(((-1.0)*pz*x1180))+(((-1.0)*x1179*x1182))+(((1.70803309314118)*cj1))+(((-1.0)*x1178*x1182))+(((-1.0)*x1177*x1179))+(((-1.0)*x1177*x1178))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+(((-1.0)*x1181*x1182))+(((-0.800640512409928)*cj1))+((x1180*x1182))+((x1177*x1180))+(((-1.0)*pz*x1178))+(((-1.0)*pz*x1179))+(((1.70803309314118)*sj1))+(((-1.0)*x1177*x1181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((11.2906325060048)+((pz*x1181))+(((-1.0)*pz*x1180))+(((-1.0)*x1179*x1182))+(((1.70803309314118)*cj1))+(((-1.0)*x1178*x1182))+(((-1.0)*x1177*x1179))+(((-1.0)*x1177*x1178))+(((0.800640512409928)*sj1))))+IKsqr(((-5.81331732052309)+(((-1.0)*x1181*x1182))+(((-0.800640512409928)*cj1))+((x1180*x1182))+((x1177*x1180))+(((-1.0)*pz*x1178))+(((-1.0)*pz*x1179))+(((1.70803309314118)*sj1))+(((-1.0)*x1177*x1181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((11.2906325060048)+((pz*x1181))+(((-1.0)*pz*x1180))+(((-1.0)*x1179*x1182))+(((1.70803309314118)*cj1))+(((-1.0)*x1178*x1182))+(((-1.0)*x1177*x1179))+(((-1.0)*x1177*x1178))+(((0.800640512409928)*sj1))), ((-5.81331732052309)+(((-1.0)*x1181*x1182))+(((-0.800640512409928)*cj1))+((x1180*x1182))+((x1177*x1180))+(((-1.0)*pz*x1178))+(((-1.0)*pz*x1179))+(((1.70803309314118)*sj1))+(((-1.0)*x1177*x1181))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1183=IKcos(j4);
IkReal x1184=IKsin(j4);
IkReal x1185=(cj0*px);
IkReal x1186=(py*sj0);
IkReal x1187=((1.0)*cj1);
evalcond[0]=((0.01)+(((0.009)*x1184))+(((0.0192)*x1183))+((sj1*x1185))+((sj1*x1186))+((cj1*pz))+(((-0.04)*sj1)));
evalcond[1]=((0.2691)+(((-0.0192)*x1184))+(((0.04)*cj1))+(((0.009)*x1183))+(((-1.0)*x1186*x1187))+(((-1.0)*x1185*x1187))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1188=(cj0*px);
IkReal x1189=((42.7008273285295)*cj1);
IkReal x1190=((20.0160128102482)*sj1);
IkReal x1191=((20.0160128102482)*cj1);
IkReal x1192=((42.7008273285295)*sj1);
IkReal x1193=(py*sj0);
if( IKabs(((11.2906325060048)+(((-1.0)*x1189*x1193))+(((-1.0)*x1188*x1189))+((pz*x1192))+((pz*x1191))+((x1188*x1190))+(((1.70803309314118)*cj1))+((x1190*x1193))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-5.81331732052309)+(((-0.800640512409928)*cj1))+((pz*x1189))+(((-1.70803309314118)*sj1))+((x1188*x1192))+((x1188*x1191))+(((-1.0)*pz*x1190))+((x1192*x1193))+((x1191*x1193)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((11.2906325060048)+(((-1.0)*x1189*x1193))+(((-1.0)*x1188*x1189))+((pz*x1192))+((pz*x1191))+((x1188*x1190))+(((1.70803309314118)*cj1))+((x1190*x1193))+(((-0.800640512409928)*sj1))))+IKsqr(((-5.81331732052309)+(((-0.800640512409928)*cj1))+((pz*x1189))+(((-1.70803309314118)*sj1))+((x1188*x1192))+((x1188*x1191))+(((-1.0)*pz*x1190))+((x1192*x1193))+((x1191*x1193))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((11.2906325060048)+(((-1.0)*x1189*x1193))+(((-1.0)*x1188*x1189))+((pz*x1192))+((pz*x1191))+((x1188*x1190))+(((1.70803309314118)*cj1))+((x1190*x1193))+(((-0.800640512409928)*sj1))), ((-5.81331732052309)+(((-0.800640512409928)*cj1))+((pz*x1189))+(((-1.70803309314118)*sj1))+((x1188*x1192))+((x1188*x1191))+(((-1.0)*pz*x1190))+((x1192*x1193))+((x1191*x1193))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1194=IKcos(j4);
IkReal x1195=IKsin(j4);
IkReal x1196=(cj0*px);
IkReal x1197=(py*sj0);
IkReal x1198=((1.0)*cj1);
evalcond[0]=((-0.01)+(((-0.0192)*x1194))+((cj1*pz))+((sj1*x1196))+((sj1*x1197))+(((-0.009)*x1195))+(((-0.04)*sj1)));
evalcond[1]=((0.2691)+(((-0.0192)*x1195))+(((0.04)*cj1))+(((0.009)*x1194))+(((-1.0)*x1197*x1198))+(((-1.0)*x1196*x1198))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1199=(cj1*sj2);
IkReal x1200=(py*sj0);
IkReal x1201=((75000.0)*pz);
IkReal x1202=(cj0*px);
IkReal x1203=(sj1*sj2);
IkReal x1204=((75000.0)*sj1);
IkReal x1205=((160000.0)*sj1);
IkReal x1206=((160000.0)*pz);
CheckValue<IkReal> x1207=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x1207.valid){
continue;
}
CheckValue<IkReal> x1208 = IKatan2WithCheck(IkReal(((((-160000.0)*x1199*x1202))+(((-160000.0)*x1199*x1200))+(((42306.0)*sj2))+(((6400.0)*x1199))+(((-1.0)*cj1*x1201))+(((-1.0)*x1202*x1204))+(((-31050.0)*cj2))+((x1203*x1206))+(((-1.0)*x1200*x1204))+(((3000.0)*sj1)))),IkReal(((((-66240.0)*cj2))+(((-21782.5)*sj2))+(((6400.0)*sj1))+(((-1.0)*cj1*x1206))+(((-1.0)*x1202*x1205))+(((-3000.0)*x1199))+(((-1.0)*x1200*x1205))+(((75000.0)*x1199*x1202))+(((75000.0)*x1199*x1200))+(((-1.0)*x1201*x1203)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1207.value)))+(x1208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1209=IKcos(j4);
IkReal x1210=IKsin(j4);
IkReal x1211=(cj0*px);
IkReal x1212=(py*sj0);
IkReal x1213=((1.0)*cj1);
IkReal x1214=((0.0192)*x1209);
IkReal x1215=((0.009)*x1210);
evalcond[0]=((0.078)+(((0.414)*sj2))+(((-0.01)*cj2))+(((-1.0)*cj2*x1214))+(((-1.0)*cj2*x1215))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((0.009)*x1209))+(((-0.0192)*x1210))+(((-1.0)*x1212*x1213))+(((-1.0)*x1211*x1213))+((pz*sj1)));
evalcond[2]=(((cj1*pz))+(((-0.04)*sj1))+(((0.414)*cj2))+((sj2*x1214))+((sj2*x1215))+((sj1*x1211))+((sj1*x1212))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1216=((160000.0)*px);
IkReal x1217=(cj0*py);
IkReal x1218=(cj1*cj2);
IkReal x1219=((75000.0)*px);
IkReal x1220=(cj2*pz*sj1);
IkReal x1221=(py*sj0*x1218);
CheckValue<IkReal> x1222 = IKatan2WithCheck(IkReal(((5850.0)+(((-1.0)*cj0*x1216*x1218))+(((31050.0)*sj2))+(((-160000.0)*x1221))+(((6400.0)*x1218))+(((75000.0)*x1217))+(((160000.0)*x1220))+(((42306.0)*cj2))+(((-1.0)*sj0*x1219)))),IkReal(((12480.0)+((cj0*x1218*x1219))+(((66240.0)*sj2))+(((160000.0)*x1217))+(((-21782.5)*cj2))+(((-3000.0)*x1218))+(((-75000.0)*x1220))+(((75000.0)*x1221))+(((-1.0)*sj0*x1216)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1222.valid){
continue;
}
CheckValue<IkReal> x1223=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1222.value)+(((1.5707963267949)*(x1223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1224=IKcos(j4);
IkReal x1225=IKsin(j4);
IkReal x1226=(cj0*px);
IkReal x1227=(py*sj0);
IkReal x1228=((1.0)*cj1);
IkReal x1229=((0.0192)*x1224);
IkReal x1230=((0.009)*x1225);
evalcond[0]=((0.078)+(((0.414)*sj2))+(((-0.01)*cj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj2*x1229))+(((-1.0)*cj2*x1230)));
evalcond[1]=((0.2691)+(((0.04)*cj1))+(((-1.0)*x1226*x1228))+(((-1.0)*x1227*x1228))+(((0.009)*x1224))+(((-0.0192)*x1225))+((pz*sj1)));
evalcond[2]=(((sj1*x1226))+((sj1*x1227))+((sj2*x1229))+((sj2*x1230))+((cj1*pz))+(((-0.04)*sj1))+(((0.414)*cj2))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=cj2;
j4eval[1]=IKsign(cj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=sj2;
j4eval[1]=IKsign(sj2);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1231=(cj0*px);
IkReal x1232=((42.7008273285295)*cj1);
IkReal x1233=((20.0160128102482)*sj1);
IkReal x1234=((20.0160128102482)*cj1);
IkReal x1235=((42.7008273285295)*sj1);
IkReal x1236=(py*sj0);
if( IKabs(((-12.9207365892714)+(((-1.70803309314118)*cj1))+(((-1.0)*pz*x1234))+(((-1.0)*pz*x1235))+((x1231*x1232))+(((-1.0)*x1233*x1236))+((x1232*x1236))+(((0.800640512409928)*sj1))+(((-1.0)*x1231*x1233)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((0.800640512409928)*cj1))+((pz*x1233))+(((-1.0)*pz*x1232))+(((-1.0)*x1235*x1236))+(((1.70803309314118)*sj1))+(((-1.0)*x1234*x1236))+(((-1.0)*x1231*x1234))+(((-1.0)*x1231*x1235)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-12.9207365892714)+(((-1.70803309314118)*cj1))+(((-1.0)*pz*x1234))+(((-1.0)*pz*x1235))+((x1231*x1232))+(((-1.0)*x1233*x1236))+((x1232*x1236))+(((0.800640512409928)*sj1))+(((-1.0)*x1231*x1233))))+IKsqr(((5.53576194288764)+(((0.800640512409928)*cj1))+((pz*x1233))+(((-1.0)*pz*x1232))+(((-1.0)*x1235*x1236))+(((1.70803309314118)*sj1))+(((-1.0)*x1234*x1236))+(((-1.0)*x1231*x1234))+(((-1.0)*x1231*x1235))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-12.9207365892714)+(((-1.70803309314118)*cj1))+(((-1.0)*pz*x1234))+(((-1.0)*pz*x1235))+((x1231*x1232))+(((-1.0)*x1233*x1236))+((x1232*x1236))+(((0.800640512409928)*sj1))+(((-1.0)*x1231*x1233))), ((5.53576194288764)+(((0.800640512409928)*cj1))+((pz*x1233))+(((-1.0)*pz*x1232))+(((-1.0)*x1235*x1236))+(((1.70803309314118)*sj1))+(((-1.0)*x1234*x1236))+(((-1.0)*x1231*x1234))+(((-1.0)*x1231*x1235))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1237=IKsin(j4);
IkReal x1238=IKcos(j4);
IkReal x1239=(cj0*px);
IkReal x1240=(py*sj0);
IkReal x1241=((1.0)*cj1);
evalcond[0]=((0.01)+((sj1*x1239))+((cj1*pz))+(((-0.04)*sj1))+(((0.0192)*x1238))+(((0.009)*x1237))+((sj1*x1240)));
evalcond[1]=((0.2979)+(((-1.0)*x1239*x1241))+(((-0.009)*x1238))+(((0.04)*cj1))+(((-1.0)*x1240*x1241))+(((0.0192)*x1237))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1242=(cj0*px);
IkReal x1243=((42.7008273285295)*cj1);
IkReal x1244=((20.0160128102482)*sj1);
IkReal x1245=((20.0160128102482)*cj1);
IkReal x1246=((42.7008273285295)*sj1);
IkReal x1247=(py*sj0);
if( IKabs(((-12.9207365892714)+(((-1.70803309314118)*cj1))+(((-1.0)*pz*x1246))+((pz*x1245))+((x1242*x1244))+((x1242*x1243))+((x1244*x1247))+((x1243*x1247))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((5.53576194288764)+(((0.800640512409928)*cj1))+(((-1.0)*x1245*x1247))+(((-1.70803309314118)*sj1))+((pz*x1243))+((pz*x1244))+(((-1.0)*x1242*x1245))+((x1246*x1247))+((x1242*x1246)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-12.9207365892714)+(((-1.70803309314118)*cj1))+(((-1.0)*pz*x1246))+((pz*x1245))+((x1242*x1244))+((x1242*x1243))+((x1244*x1247))+((x1243*x1247))+(((-0.800640512409928)*sj1))))+IKsqr(((5.53576194288764)+(((0.800640512409928)*cj1))+(((-1.0)*x1245*x1247))+(((-1.70803309314118)*sj1))+((pz*x1243))+((pz*x1244))+(((-1.0)*x1242*x1245))+((x1246*x1247))+((x1242*x1246))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-12.9207365892714)+(((-1.70803309314118)*cj1))+(((-1.0)*pz*x1246))+((pz*x1245))+((x1242*x1244))+((x1242*x1243))+((x1244*x1247))+((x1243*x1247))+(((-0.800640512409928)*sj1))), ((5.53576194288764)+(((0.800640512409928)*cj1))+(((-1.0)*x1245*x1247))+(((-1.70803309314118)*sj1))+((pz*x1243))+((pz*x1244))+(((-1.0)*x1242*x1245))+((x1246*x1247))+((x1242*x1246))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1248=IKsin(j4);
IkReal x1249=IKcos(j4);
IkReal x1250=(cj0*px);
IkReal x1251=(py*sj0);
IkReal x1252=((1.0)*cj1);
evalcond[0]=((-0.01)+(((-0.009)*x1248))+((sj1*x1251))+((sj1*x1250))+((cj1*pz))+(((-0.04)*sj1))+(((-0.0192)*x1249)));
evalcond[1]=((0.2979)+(((-0.009)*x1249))+(((0.04)*cj1))+(((-1.0)*x1251*x1252))+(((-1.0)*x1250*x1252))+((pz*sj1))+(((0.0192)*x1248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1253=(cj1*sj2);
IkReal x1254=(py*sj0);
IkReal x1255=(cj0*px);
IkReal x1256=((75000.0)*pz);
IkReal x1257=(sj1*sj2);
IkReal x1258=((160000.0)*pz);
IkReal x1259=((75000.0)*sj1);
IkReal x1260=((160000.0)*sj1);
CheckValue<IkReal> x1261=IKPowWithIntegerCheck(IKsign(sj2),-1);
if(!x1261.valid){
continue;
}
CheckValue<IkReal> x1262 = IKatan2WithCheck(IkReal(((((-6400.0)*x1253))+(((26880.0)*cj2))+(((-1.0)*x1255*x1259))+(((-48414.0)*sj2))+(((-1.0)*cj1*x1256))+(((-1.0)*x1257*x1258))+(((160000.0)*x1253*x1254))+(((160000.0)*x1253*x1255))+(((-1.0)*x1254*x1259))+(((3000.0)*sj1)))),IkReal(((((3000.0)*x1253))+(((-75000.0)*x1253*x1255))+(((-75000.0)*x1253*x1254))+((x1256*x1257))+(((6400.0)*sj1))+(((-1.0)*x1255*x1260))+(((-1.0)*cj1*x1258))+(((57344.0)*cj2))+(((-1.0)*x1254*x1260))+(((20742.5)*sj2)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1262.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1261.value)))+(x1262.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1263=IKsin(j4);
IkReal x1264=IKcos(j4);
IkReal x1265=(cj0*px);
IkReal x1266=(py*sj0);
IkReal x1267=((1.0)*cj1);
IkReal x1268=((0.0192)*x1264);
IkReal x1269=((0.009)*x1263);
evalcond[0]=((0.078)+(((-0.3584)*sj2))+(((-0.01)*cj2))+(((-1.0)*cj2*x1269))+(((-1.0)*cj2*x1268))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((-1.0)*x1266*x1267))+(((0.0192)*x1263))+(((-0.009)*x1264))+(((-1.0)*x1265*x1267))+((pz*sj1)));
evalcond[2]=(((sj1*x1265))+((sj1*x1266))+((cj1*pz))+(((-0.3584)*cj2))+(((-0.04)*sj1))+(((0.01)*sj2))+((sj2*x1268))+((sj2*x1269)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1270=((160000.0)*py);
IkReal x1271=((75000.0)*py);
IkReal x1272=(cj1*cj2);
IkReal x1273=((160000.0)*px);
IkReal x1274=((75000.0)*px);
IkReal x1275=(sj0*x1272);
IkReal x1276=(cj2*pz*sj1);
CheckValue<IkReal> x1277 = IKatan2WithCheck(IkReal(((5850.0)+(((-6400.0)*x1272))+((cj0*x1271))+((cj0*x1272*x1273))+(((-160000.0)*x1276))+(((-48414.0)*cj2))+((x1270*x1275))+(((-1.0)*sj0*x1274))+(((-26880.0)*sj2)))),IkReal(((12480.0)+(((3000.0)*x1272))+((cj0*x1270))+(((75000.0)*x1276))+(((-1.0)*x1271*x1275))+(((20742.5)*cj2))+(((-57344.0)*sj2))+(((-1.0)*sj0*x1273))+(((-1.0)*cj0*x1272*x1274)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1277.valid){
continue;
}
CheckValue<IkReal> x1278=IKPowWithIntegerCheck(IKsign(cj2),-1);
if(!x1278.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1277.value)+(((1.5707963267949)*(x1278.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1279=IKsin(j4);
IkReal x1280=IKcos(j4);
IkReal x1281=(cj0*px);
IkReal x1282=(py*sj0);
IkReal x1283=((1.0)*cj1);
IkReal x1284=((0.0192)*x1280);
IkReal x1285=((0.009)*x1279);
evalcond[0]=((0.078)+(((-0.3584)*sj2))+(((-1.0)*cj2*x1285))+(((-1.0)*cj2*x1284))+(((-0.01)*cj2))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.2979)+(((0.04)*cj1))+(((0.0192)*x1279))+((pz*sj1))+(((-0.009)*x1280))+(((-1.0)*x1281*x1283))+(((-1.0)*x1282*x1283)));
evalcond[2]=(((cj1*pz))+((sj2*x1284))+((sj2*x1285))+(((-0.3584)*cj2))+(((-0.04)*sj1))+((sj1*x1282))+((sj1*x1281))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=1.0;
cj2=0;
j2=1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1286=((20.0160128102482)*px);
IkReal x1287=(cj0*sj1);
IkReal x1288=(cj1*pz);
IkReal x1289=((42.7008273285295)*py);
IkReal x1290=(sj0*sj1);
IkReal x1291=((20.0160128102482)*py);
IkReal x1292=((42.7008273285295)*px);
if( IKabs(((-5.33279957299173)+((sj0*x1292))+(((-20.0160128102482)*x1288))+(((-1.0)*x1290*x1291))+(((-1.0)*cj0*x1289))+(((-1.0)*x1286*x1287))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((1.97891646650654)+(((-1.0)*x1287*x1292))+(((-42.7008273285295)*x1288))+(((-1.0)*x1289*x1290))+(((1.70803309314118)*sj1))+((cj0*x1291))+(((-1.0)*sj0*x1286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-5.33279957299173)+((sj0*x1292))+(((-20.0160128102482)*x1288))+(((-1.0)*x1290*x1291))+(((-1.0)*cj0*x1289))+(((-1.0)*x1286*x1287))+(((0.800640512409928)*sj1))))+IKsqr(((1.97891646650654)+(((-1.0)*x1287*x1292))+(((-42.7008273285295)*x1288))+(((-1.0)*x1289*x1290))+(((1.70803309314118)*sj1))+((cj0*x1291))+(((-1.0)*sj0*x1286))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-5.33279957299173)+((sj0*x1292))+(((-20.0160128102482)*x1288))+(((-1.0)*x1290*x1291))+(((-1.0)*cj0*x1289))+(((-1.0)*x1286*x1287))+(((0.800640512409928)*sj1))), ((1.97891646650654)+(((-1.0)*x1287*x1292))+(((-42.7008273285295)*x1288))+(((-1.0)*x1289*x1290))+(((1.70803309314118)*sj1))+((cj0*x1291))+(((-1.0)*sj0*x1286))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1293=IKsin(j4);
IkReal x1294=IKcos(j4);
evalcond[0]=((0.1202)+(((-0.009)*x1294))+(((0.0192)*x1293))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.01)+(((0.009)*x1293))+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((0.0192)*x1294))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1295=((20.0160128102482)*px);
IkReal x1296=(cj0*sj1);
IkReal x1297=(cj1*pz);
IkReal x1298=((42.7008273285295)*py);
IkReal x1299=(sj0*sj1);
IkReal x1300=((20.0160128102482)*py);
IkReal x1301=((42.7008273285295)*px);
if( IKabs(((3.70269548972511)+(((-20.0160128102482)*x1297))+(((-1.0)*sj0*x1301))+(((-1.0)*x1299*x1300))+(((-1.0)*x1295*x1296))+((cj0*x1298))+(((0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.25647184414198)+((sj0*x1295))+(((-1.0)*cj0*x1300))+(((-1.0)*x1296*x1301))+(((-1.0)*x1298*x1299))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x1297)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((3.70269548972511)+(((-20.0160128102482)*x1297))+(((-1.0)*sj0*x1301))+(((-1.0)*x1299*x1300))+(((-1.0)*x1295*x1296))+((cj0*x1298))+(((0.800640512409928)*sj1))))+IKsqr(((-2.25647184414198)+((sj0*x1295))+(((-1.0)*cj0*x1300))+(((-1.0)*x1296*x1301))+(((-1.0)*x1298*x1299))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x1297))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((3.70269548972511)+(((-20.0160128102482)*x1297))+(((-1.0)*sj0*x1301))+(((-1.0)*x1299*x1300))+(((-1.0)*x1295*x1296))+((cj0*x1298))+(((0.800640512409928)*sj1))), ((-2.25647184414198)+((sj0*x1295))+(((-1.0)*cj0*x1300))+(((-1.0)*x1296*x1301))+(((-1.0)*x1298*x1299))+(((1.70803309314118)*sj1))+(((-42.7008273285295)*x1297))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1302=IKsin(j4);
IkReal x1303=IKcos(j4);
evalcond[0]=((0.0914)+(((-0.0192)*x1302))+(((0.009)*x1303))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((0.01)+(((0.0192)*x1303))+((cj1*pz))+((cj0*px*sj1))+(((0.009)*x1302))+(((-0.04)*sj1))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1304=(py*sj0);
IkReal x1305=((75000.0)*cj1);
IkReal x1306=(pz*sj1);
IkReal x1307=((160000.0)*cj1);
IkReal x1308=(pz*sj3);
IkReal x1309=(cj0*px);
IkReal x1310=(sj1*sj3);
CheckValue<IkReal> x1311=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1311.valid){
continue;
}
CheckValue<IkReal> x1312 = IKatan2WithCheck(IkReal(((45360.0)+(((-1.0)*x1307*x1309))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((-75000.0)*x1309*x1310))+(((160000.0)*x1306))+(((3000.0)*x1310))+(((-1.0)*x1305*x1308))+(((-75000.0)*x1304*x1310))+(((-3054.0)*sj3))+(((-1.0)*x1304*x1307)))),IkReal(((-21262.5)+(((-1.0)*x1307*x1308))+(((-75000.0)*x1306))+((x1305*x1309))+(((-160000.0)*x1309*x1310))+(((-3000.0)*cj1))+((x1304*x1305))+(((6400.0)*x1310))+(((-520.0)*sj3))+(((-160000.0)*x1304*x1310))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1312.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1311.value)))+(x1312.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1313=IKsin(j4);
IkReal x1314=IKcos(j4);
IkReal x1315=(cj0*px);
IkReal x1316=((1.0)*cj1);
IkReal x1317=(py*sj0);
IkReal x1318=((0.0192)*x1313);
IkReal x1319=((0.009)*x1314);
evalcond[0]=((0.01)+(((0.0192)*x1314))+((cj1*pz))+(((0.009)*x1313))+(((-0.04)*sj1))+((sj1*x1315))+((sj1*x1317)));
evalcond[1]=((0.1058)+((cj3*x1318))+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3))+(((-1.0)*cj3*x1319)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*x1315*x1316))+((sj3*x1319))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*sj3*x1318))+((pz*sj1))+(((-1.0)*x1316*x1317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1320=(px*sj0);
IkReal x1321=((160000.0)*cj0);
IkReal x1322=(cj3*sj1);
IkReal x1323=((75000.0)*cj0);
IkReal x1324=(py*sj0);
IkReal x1325=(cj1*cj3*pz);
CheckValue<IkReal> x1326=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1326.valid){
continue;
}
CheckValue<IkReal> x1327 = IKatan2WithCheck(IkReal(((-16928.0)+(((-1.0)*px*x1322*x1323))+(((-61792.0)*sj3))+(((-3054.0)*cj3))+(((-75000.0)*x1325))+(((160000.0)*x1320))+(((3000.0)*x1322))+(((-1.0)*py*x1321))+(((-75000.0)*x1322*x1324)))),IkReal(((7935.0)+((py*x1323))+(((-160000.0)*x1322*x1324))+(((-75000.0)*x1320))+(((6400.0)*x1322))+(((-160000.0)*x1325))+(((-1.0)*px*x1321*x1322))+(((-520.0)*cj3))+(((28965.0)*sj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1326.value)))+(x1327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1328=IKsin(j4);
IkReal x1329=IKcos(j4);
IkReal x1330=(cj0*px);
IkReal x1331=((1.0)*cj1);
IkReal x1332=(py*sj0);
IkReal x1333=((0.0192)*x1328);
IkReal x1334=((0.009)*x1329);
evalcond[0]=((0.01)+(((0.0192)*x1329))+((cj1*pz))+(((0.009)*x1328))+((sj1*x1332))+((sj1*x1330))+(((-0.04)*sj1)));
evalcond[1]=((0.1058)+(((-1.0)*cj3*x1334))+((cj3*x1333))+(((0.3862)*sj3))+(((-1.0)*px*sj0))+((cj0*py))+(((0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x1330*x1331))+((sj3*x1334))+(((-1.0)*x1331*x1332))+(((-1.0)*sj3*x1333))+((pz*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j2)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=cj3;
j4eval[1]=IKsign(cj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj2=-1.0;
cj2=0;
j2=-1.5707963267949;
j4eval[0]=sj3;
j4eval[1]=IKsign(sj3);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1335=((20.0160128102482)*px);
IkReal x1336=(cj0*sj1);
IkReal x1337=(cj1*pz);
IkReal x1338=((42.7008273285295)*py);
IkReal x1339=(sj0*sj1);
IkReal x1340=((20.0160128102482)*py);
IkReal x1341=((42.7008273285295)*px);
if( IKabs(((1.32852949025887)+((x1339*x1340))+((cj0*x1338))+((x1335*x1336))+(((-1.0)*sj0*x1341))+(((20.0160128102482)*x1337))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.14358153189218)+((x1338*x1339))+(((-1.0)*cj0*x1340))+(((-1.70803309314118)*sj1))+((x1336*x1341))+((sj0*x1335))+(((42.7008273285295)*x1337)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((1.32852949025887)+((x1339*x1340))+((cj0*x1338))+((x1335*x1336))+(((-1.0)*sj0*x1341))+(((20.0160128102482)*x1337))+(((-0.800640512409928)*sj1))))+IKsqr(((-1.14358153189218)+((x1338*x1339))+(((-1.0)*cj0*x1340))+(((-1.70803309314118)*sj1))+((x1336*x1341))+((sj0*x1335))+(((42.7008273285295)*x1337))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((1.32852949025887)+((x1339*x1340))+((cj0*x1338))+((x1335*x1336))+(((-1.0)*sj0*x1341))+(((20.0160128102482)*x1337))+(((-0.800640512409928)*sj1))), ((-1.14358153189218)+((x1338*x1339))+(((-1.0)*cj0*x1340))+(((-1.70803309314118)*sj1))+((x1336*x1341))+((sj0*x1335))+(((42.7008273285295)*x1337))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1342=IKsin(j4);
IkReal x1343=IKcos(j4);
evalcond[0]=((0.0358)+(((0.009)*x1343))+(((-0.0192)*x1342))+(((-1.0)*px*sj0))+((cj0*py)));
evalcond[1]=((-0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.009)*x1342))+(((-0.0192)*x1343))+((py*sj0*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1344=((20.0160128102482)*px);
IkReal x1345=(cj0*sj1);
IkReal x1346=(cj1*pz);
IkReal x1347=((42.7008273285295)*py);
IkReal x1348=(sj0*sj1);
IkReal x1349=((20.0160128102482)*py);
IkReal x1350=((42.7008273285295)*px);
if( IKabs(((-2.95863357352549)+(((-1.0)*cj0*x1347))+((sj0*x1350))+((x1344*x1345))+(((20.0160128102482)*x1346))+((x1348*x1349))+(((-0.800640512409928)*sj1)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((0.866026154256739)+((x1345*x1350))+(((42.7008273285295)*x1346))+(((-1.70803309314118)*sj1))+((x1347*x1348))+((cj0*x1349))+(((-1.0)*sj0*x1344)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-2.95863357352549)+(((-1.0)*cj0*x1347))+((sj0*x1350))+((x1344*x1345))+(((20.0160128102482)*x1346))+((x1348*x1349))+(((-0.800640512409928)*sj1))))+IKsqr(((0.866026154256739)+((x1345*x1350))+(((42.7008273285295)*x1346))+(((-1.70803309314118)*sj1))+((x1347*x1348))+((cj0*x1349))+(((-1.0)*sj0*x1344))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-2.95863357352549)+(((-1.0)*cj0*x1347))+((sj0*x1350))+((x1344*x1345))+(((20.0160128102482)*x1346))+((x1348*x1349))+(((-0.800640512409928)*sj1))), ((0.866026154256739)+((x1345*x1350))+(((42.7008273285295)*x1346))+(((-1.70803309314118)*sj1))+((x1347*x1348))+((cj0*x1349))+(((-1.0)*sj0*x1344))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x1351=IKsin(j4);
IkReal x1352=IKcos(j4);
evalcond[0]=((0.0646)+(((-1.0)*px*sj0))+(((-0.009)*x1352))+((cj0*py))+(((0.0192)*x1351)));
evalcond[1]=((-0.01)+((cj1*pz))+((cj0*px*sj1))+(((-0.04)*sj1))+(((-0.009)*x1351))+((py*sj0*sj1))+(((-0.0192)*x1352)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1353=(py*sj0);
IkReal x1354=((75000.0)*cj1);
IkReal x1355=(pz*sj1);
IkReal x1356=((160000.0)*cj1);
IkReal x1357=(pz*sj3);
IkReal x1358=(cj0*px);
IkReal x1359=(sj1*sj3);
CheckValue<IkReal> x1360=IKPowWithIntegerCheck(IKsign(sj3),-1);
if(!x1360.valid){
continue;
}
CheckValue<IkReal> x1361 = IKatan2WithCheck(IkReal(((45360.0)+(((75000.0)*x1353*x1359))+(((61792.0)*cj3))+(((6400.0)*cj1))+(((-3000.0)*x1359))+((x1354*x1357))+(((-1.0)*x1356*x1358))+(((160000.0)*x1355))+(((75000.0)*x1358*x1359))+(((-3054.0)*sj3))+(((-1.0)*x1353*x1356)))),IkReal(((-21262.5)+(((-3000.0)*cj1))+((x1354*x1358))+(((160000.0)*x1353*x1359))+(((-75000.0)*x1355))+(((160000.0)*x1358*x1359))+(((-520.0)*sj3))+((x1353*x1354))+(((-6400.0)*x1359))+((x1356*x1357))+(((-28965.0)*cj3)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1360.value)))+(x1361.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1362=IKcos(j4);
IkReal x1363=IKsin(j4);
IkReal x1364=(cj0*px);
IkReal x1365=((1.0)*cj1);
IkReal x1366=(py*sj0);
IkReal x1367=((0.0192)*x1363);
IkReal x1368=((0.009)*x1362);
evalcond[0]=((-0.01)+((sj1*x1366))+((sj1*x1364))+((cj1*pz))+(((-0.04)*sj1))+(((-0.009)*x1363))+(((-0.0192)*x1362)));
evalcond[1]=((0.0502)+(((-0.3862)*sj3))+(((-1.0)*cj3*x1367))+((cj3*x1368))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((-1.0)*x1364*x1365))+(((0.04)*cj1))+(((-1.0)*sj3*x1367))+(((-0.0144)*sj3))+(((-1.0)*x1365*x1366))+((pz*sj1))+((sj3*x1368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1369=(px*sj0);
IkReal x1370=((160000.0)*cj0);
IkReal x1371=((160000.0)*cj3);
IkReal x1372=(cj1*pz);
IkReal x1373=(cj3*sj1);
IkReal x1374=((75000.0)*cj0);
IkReal x1375=(py*sj0);
CheckValue<IkReal> x1376=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1376.valid){
continue;
}
CheckValue<IkReal> x1377 = IKatan2WithCheck(IkReal(((8032.0)+((px*x1373*x1374))+(((-61792.0)*sj3))+(((-3054.0)*cj3))+((py*x1370))+(((75000.0)*cj3*x1372))+(((75000.0)*x1373*x1375))+(((-3000.0)*x1373))+(((-160000.0)*x1369)))),IkReal(((-3765.0)+(((-6400.0)*x1373))+((px*x1370*x1373))+((x1371*x1372))+(((-520.0)*cj3))+(((28965.0)*sj3))+((sj1*x1371*x1375))+(((-1.0)*py*x1374))+(((75000.0)*x1369)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1376.value)))+(x1377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1378=IKcos(j4);
IkReal x1379=IKsin(j4);
IkReal x1380=(cj0*px);
IkReal x1381=((1.0)*cj1);
IkReal x1382=(py*sj0);
IkReal x1383=((0.0192)*x1379);
IkReal x1384=((0.009)*x1378);
evalcond[0]=((-0.01)+(((-0.0192)*x1378))+(((-0.009)*x1379))+((cj1*pz))+((sj1*x1382))+((sj1*x1380))+(((-0.04)*sj1)));
evalcond[1]=((0.0502)+((cj3*x1384))+(((-0.3862)*sj3))+(((-1.0)*cj3*x1383))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.0144)*cj3)));
evalcond[2]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+((sj3*x1384))+(((-1.0)*x1380*x1381))+(((-1.0)*x1381*x1382))+((pz*sj1))+(((-1.0)*sj3*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1385=(cj2*cj3);
IkReal x1386=(sj1*sj3);
IkReal x1387=(sj2*sj3);
IkReal x1388=(cj1*sj2);
IkReal x1389=(cj2*sj3);
IkReal x1390=((96.0)*pz);
IkReal x1391=(cj3*sj2);
IkReal x1392=(cj1*sj3);
IkReal x1393=((45.0)*pz*sj1);
IkReal x1394=((45.0)*cj0*px);
IkReal x1395=((45.0)*py*sj0);
IkReal x1396=((96.0)*cj0*px);
IkReal x1397=((96.0)*py*sj0);
CheckValue<IkReal> x1398=IKPowWithIntegerCheck(IKsign(x1387),-1);
if(!x1398.valid){
continue;
}
CheckValue<IkReal> x1399 = IKatan2WithCheck(IkReal(((((-1.251)*x1389))+(((-1.0)*x1385*x1393))+((sj1*sj2*x1390))+(((37.0752)*x1391))+(((-1.8)*cj1*x1385))+(((-12.7575)*x1385))+(((1.8)*x1386))+(((-1.0)*x1388*x1397))+(((-1.0)*x1388*x1396))+(((-1.8324)*x1387))+((cj1*x1385*x1395))+((cj1*x1385*x1394))+(((-45.0)*pz*x1392))+(((27.216)*sj2))+(((-1.0)*x1386*x1395))+(((-1.0)*x1386*x1394))+(((-17.379)*cj2))+(((3.84)*x1388)))),IkReal((((x1388*x1394))+((x1388*x1395))+(((-17.379)*x1391))+(((-12.7575)*sj2))+(((-0.312)*x1387))+(((-1.8)*x1388))+(((-37.0752)*cj2))+(((-2.6688)*x1389))+(((-1.0)*x1390*x1392))+(((-27.216)*x1385))+(((-1.0)*sj1*x1385*x1390))+(((-3.84)*cj1*x1385))+((cj1*x1385*x1397))+((cj1*x1385*x1396))+(((-1.0)*sj2*x1393))+(((-1.0)*x1386*x1397))+(((-1.0)*x1386*x1396))+(((3.84)*x1386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1398.value)))+(x1399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1400=IKsin(j4);
IkReal x1401=IKcos(j4);
IkReal x1402=(cj0*px);
IkReal x1403=((0.0144)*cj3);
IkReal x1404=(py*sj0);
IkReal x1405=((0.3862)*sj3);
IkReal x1406=((1.0)*cj1);
IkReal x1407=(cj2*cj3);
IkReal x1408=(sj2*x1400);
IkReal x1409=((0.0192)*x1400);
IkReal x1410=((0.0192)*x1401);
IkReal x1411=((0.009)*x1401);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x1404*x1406))+(((-1.0)*x1402*x1406))+((pz*sj1))+(((-1.0)*sj3*x1409))+((sj3*x1411)));
evalcond[1]=((0.078)+(((0.0192)*cj3*x1408))+(((-0.01)*cj2))+(((-1.0)*cj2*x1410))+((sj2*x1403))+((sj2*x1405))+(((-0.009)*cj2*x1400))+(((0.0278)*sj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj3*sj2*x1411)));
evalcond[2]=(((sj2*x1410))+(((0.0278)*cj2))+((cj1*pz))+(((-1.0)*x1407*x1411))+((sj1*x1404))+((sj1*x1402))+(((0.009)*x1408))+(((-0.04)*sj1))+(((0.01)*sj2))+((cj2*x1405))+((cj2*x1403))+((x1407*x1409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1412=(sj1*sj2);
IkReal x1413=(cj2*sj1);
IkReal x1414=(cj2*py);
IkReal x1415=(cj2*px);
IkReal x1416=((0.0192)*cj3);
IkReal x1417=((0.009)*sj2);
IkReal x1418=(cj0*py);
IkReal x1419=(cj1*pz);
IkReal x1420=((0.0192)*sj2);
IkReal x1421=(px*sj0);
IkReal x1422=(py*sj0);
IkReal x1423=(cj2*cj3);
IkReal x1424=(cj0*px);
IkReal x1425=((0.009)*cj0*cj3);
IkReal x1426=((0.009)*cj3*sj0);
CheckValue<IkReal> x1427 = IKatan2WithCheck(IkReal(((0.00053376)+((x1415*x1426))+(((0.00036648)*cj3))+(((0.00741504)*sj3))+(((0.0192)*cj2*x1419))+(((-0.00036)*cj3*x1412))+(((-1.0)*x1420*x1421))+(((-0.000702)*x1423))+(((0.009)*cj3*x1412*x1424))+(((0.009)*cj3*x1412*x1422))+((cj3*x1417*x1419))+(((0.0014976)*sj2))+((x1418*x1420))+(((0.0192)*x1413*x1422))+(((0.0192)*x1413*x1424))+(((-1.0)*x1414*x1425))+(((-0.000768)*x1413)))),IkReal(((-0.0002502)+(((-0.009)*x1413*x1422))+(((-0.009)*x1413*x1424))+((sj0*x1415*x1416))+(((-1.0)*x1417*x1418))+((x1412*x1416*x1424))+((x1412*x1416*x1422))+(((-0.000702)*sj2))+(((0.00036)*x1413))+(((-0.009)*cj2*x1419))+(((-0.000768)*cj3*x1412))+(((6.24e-5)*cj3))+(((-1.0)*cj0*x1414*x1416))+((x1417*x1421))+((sj2*x1416*x1419))+(((-0.0034758)*sj3))+(((-0.0014976)*x1423)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1427.valid){
continue;
}
CheckValue<IkReal> x1428=IKPowWithIntegerCheck(IKsign(cj3),-1);
if(!x1428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1427.value)+(((-1.5707963267949)*(x1428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1429=IKsin(j4);
IkReal x1430=IKcos(j4);
IkReal x1431=(cj0*px);
IkReal x1432=((0.0144)*cj3);
IkReal x1433=(py*sj0);
IkReal x1434=((0.3862)*sj3);
IkReal x1435=((1.0)*cj1);
IkReal x1436=(cj2*cj3);
IkReal x1437=(sj2*x1429);
IkReal x1438=((0.0192)*x1429);
IkReal x1439=((0.0192)*x1430);
IkReal x1440=((0.009)*x1430);
evalcond[0]=((0.2835)+(((-1.0)*sj3*x1438))+(((0.3862)*cj3))+(((0.04)*cj1))+(((-0.0144)*sj3))+(((-1.0)*x1431*x1435))+((sj3*x1440))+((pz*sj1))+(((-1.0)*x1433*x1435)));
evalcond[1]=((0.078)+(((0.0192)*cj3*x1437))+(((-0.01)*cj2))+(((-1.0)*cj2*x1439))+((sj2*x1434))+((sj2*x1432))+(((-1.0)*cj3*sj2*x1440))+(((0.0278)*sj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-0.009)*cj2*x1429)));
evalcond[2]=(((x1436*x1438))+(((0.0278)*cj2))+((sj2*x1439))+(((0.009)*x1437))+((cj1*pz))+((sj1*x1431))+((sj1*x1433))+(((-0.04)*sj1))+(((-1.0)*x1436*x1440))+((cj2*x1434))+((cj2*x1432))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1441=((45.0)*py);
IkReal x1442=(cj0*sj3);
IkReal x1443=(cj2*sj3);
IkReal x1444=((1.8)*cj1);
IkReal x1445=(cj3*sj2);
IkReal x1446=(cj1*cj2);
IkReal x1447=((96.0)*py);
IkReal x1448=(cj2*cj3);
IkReal x1449=(cj1*sj0);
IkReal x1450=(sj2*sj3);
IkReal x1451=((96.0)*cj0*px);
IkReal x1452=((45.0)*pz*sj1);
IkReal x1453=((45.0)*cj0*px);
IkReal x1454=((96.0)*pz*sj1);
IkReal x1455=(px*sj0*sj3);
CheckValue<IkReal> x1456 = IKatan2WithCheck(IkReal(((((-17.379)*sj2))+(((-1.0)*cj2*x1454))+((x1446*x1451))+((sj0*x1446*x1447))+(((45.0)*x1455))+((x1441*x1445*x1449))+(((-1.0)*x1445*x1452))+(((-1.0)*x1441*x1442))+(((-12.7575)*x1445))+((cj1*x1445*x1453))+(((-27.216)*cj2))+(((-37.0752)*x1448))+(((-1.0)*x1444*x1445))+(((-1.251)*x1450))+(((-3.84)*x1446))+(((1.8324)*x1443))+(((-3.51)*sj3)))),IkReal((((x1445*x1447*x1449))+(((-27.216)*x1445))+(((12.7575)*cj2))+(((-7.488)*sj3))+(((-1.0)*x1445*x1454))+((cj1*x1445*x1451))+(((-3.84)*cj1*x1445))+(((0.312)*x1443))+(((-1.0)*x1446*x1453))+(((-37.0752)*sj2))+((cj2*x1444))+(((17.379)*x1448))+((cj2*x1452))+(((-1.0)*sj0*x1441*x1446))+(((96.0)*x1455))+(((-1.0)*x1442*x1447))+(((-2.6688)*x1450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1456.valid){
continue;
}
CheckValue<IkReal> x1457=IKPowWithIntegerCheck(IKsign(x1443),-1);
if(!x1457.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1456.value)+(((-1.5707963267949)*(x1457.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1458=IKsin(j4);
IkReal x1459=IKcos(j4);
IkReal x1460=(cj0*px);
IkReal x1461=((0.0144)*cj3);
IkReal x1462=(py*sj0);
IkReal x1463=((0.3862)*sj3);
IkReal x1464=((1.0)*cj1);
IkReal x1465=(cj2*cj3);
IkReal x1466=(sj2*x1458);
IkReal x1467=((0.0192)*x1458);
IkReal x1468=((0.0192)*x1459);
IkReal x1469=((0.009)*x1459);
evalcond[0]=((0.2835)+(((0.3862)*cj3))+(((0.04)*cj1))+((sj3*x1469))+(((-0.0144)*sj3))+(((-1.0)*x1462*x1464))+(((-1.0)*x1460*x1464))+((pz*sj1))+(((-1.0)*sj3*x1467)));
evalcond[1]=((0.078)+((sj2*x1461))+((sj2*x1463))+(((0.0192)*cj3*x1466))+(((-0.009)*cj2*x1458))+(((-0.01)*cj2))+(((-1.0)*cj2*x1468))+(((0.0278)*sj2))+(((-1.0)*px*sj0))+((cj0*py))+(((-1.0)*cj3*sj2*x1469)));
evalcond[2]=(((cj2*x1463))+((cj2*x1461))+((sj2*x1468))+(((0.0278)*cj2))+(((0.009)*x1466))+((x1465*x1467))+((cj1*pz))+(((-0.04)*sj1))+((sj1*x1462))+((sj1*x1460))+(((-1.0)*x1465*x1469))+(((0.01)*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - inmoov (b79f23046dcb5d35647b579826ea4f1b)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
