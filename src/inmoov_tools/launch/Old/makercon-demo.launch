<launch>

<rosparam file="$(find inmoov_tools)/launch/params.yaml"/>

<include file="$(find inmoov_tools)/launch/servobus.launch" />

<!--include file="$(find inmoov_tools)/launch/webcams.launch" /-->

  <node name="usb_cam_left" pkg="usb_cam" type="usb_cam_node" output="screen" >
    <param name="video_device" value="/dev/video0" />
    <param name="image_width" value="640" />
    <param name="image_height" value="360" />
    <param name="framerate" value="15" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="usb_cam_left" />
    <param name="io_method" value="mmap"/>
  </node>
    <node name="usb_cam_right" pkg="usb_cam" type="usb_cam_node" output="screen" >
    <param name="video_device" value="/dev/video1" />
    <param name="image_width" value="640" />
    <param name="image_height" value="360" />
    <param name="framerate" value="15" />
    <param name="pixel_format" value="yuyv" />
    <param name="camera_frame_id" value="usb_cam_right" />
    <param name="io_method" value="mmap"/>
  </node>

<include file="$(find inmoov_description)/launch/display.launch"/>
<!--node name="display" pkg="rqt_gui" type="rqt_gui" /-->

<include file="$(find kinect2_bridge)/launch/kinect2_bridge.launch" >
<arg name="fps_limit" value="15"/>
<arg name="depth_method" value="cuda"/>
<arg name="reg_method" value="opencl"/>
<arg name="worker_threads" value="2"/>
</include>

<!--node name="trainer" pkg="inmoov_tools" type="trainer.py" respawn="true" /-->

<!--node name="image_view_kinect_color" pkg="image_view" type="image_view" respawn="false" output="screen">
<remap from="image" to="/kinect2/hd/image_color"/>
<param name="autosize" value="false" />
</node-->


</launch>